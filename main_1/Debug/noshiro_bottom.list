
noshiro_bottom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080070a0  080070a0  000080a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00008230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007234  08007234  00008234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007238  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000068  080072a0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080072a0  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f09  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003291  00000000  00000000  0001ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00022230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef1  00000000  00000000  00023548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d5  00000000  00000000  00024439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001706b  00000000  00000000  0003ee0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fe5  00000000  00000000  00055e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d0c  00000000  00000000  000fbea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00100bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007088 	.word	0x08007088

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08007088 	.word	0x08007088

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <LTC2460_READ>:
    }
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
    return LTC2460_Success;
}

LTC2460_StatusTypeDef LTC2460_READ(LTC2460_HandleTypeDef *ltc2460, uint16_t *value) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b087      	sub	sp, #28
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	uint8_t pRxData[2] = {};
 800063a:	230c      	movs	r3, #12
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2200      	movs	r2, #0
 8000640:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_RESET);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6858      	ldr	r0, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	891b      	ldrh	r3, [r3, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f001 fc00 	bl	8001e52 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f001 f81a 	bl	800168c <HAL_Delay>
    if(!ltc2460->receive_only && HAL_GPIO_ReadPin(ltc2460->miso, ltc2460->miso_num) == GPIO_PIN_SET){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c9b      	ldrb	r3, [r3, #18]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d114      	bne.n	800068a <LTC2460_READ+0x5a>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8a1b      	ldrh	r3, [r3, #16]
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f001 fbd4 	bl	8001e18 <HAL_GPIO_ReadPin>
 8000670:	0003      	movs	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d109      	bne.n	800068a <LTC2460_READ+0x5a>
        HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6858      	ldr	r0, [r3, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	891b      	ldrh	r3, [r3, #8]
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f001 fbe6 	bl	8001e52 <HAL_GPIO_WritePin>
        return LTC2460_NotYetConverted;
 8000686:	2301      	movs	r3, #1
 8000688:	e04a      	b.n	8000720 <LTC2460_READ+0xf0>
    }
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6858      	ldr	r0, [r3, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	891b      	ldrh	r3, [r3, #8]
 8000692:	2201      	movs	r2, #1
 8000694:	0019      	movs	r1, r3
 8000696:	f001 fbdc 	bl	8001e52 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fff6 	bl	800168c <HAL_Delay>
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_RESET);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	891b      	ldrh	r3, [r3, #8]
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f001 fbd1 	bl	8001e52 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef stat;
	if(ltc2460->receive_only){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7c9b      	ldrb	r3, [r3, #18]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <LTC2460_READ+0xa0>
		stat = HAL_SPI_Receive(ltc2460->spi, (uint8_t *)value,2, 100 );
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	230f      	movs	r3, #15
 80006be:	18fc      	adds	r4, r7, r3
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	2202      	movs	r2, #2
 80006c6:	f002 fb8b 	bl	8002de0 <HAL_SPI_Receive>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
 80006ce:	e00e      	b.n	80006ee <LTC2460_READ+0xbe>
	}else{
		stat = HAL_SPI_TransmitReceive(ltc2460->spi, ltc2460->pTxData, (uint8_t *)value, 2, 100);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3314      	adds	r3, #20
 80006d8:	0019      	movs	r1, r3
 80006da:	230f      	movs	r3, #15
 80006dc:	18fc      	adds	r4, r7, r3
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	2364      	movs	r3, #100	@ 0x64
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	f002 fccd 	bl	8003084 <HAL_SPI_TransmitReceive>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
	}
	HAL_Delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 ffcc 	bl	800168c <HAL_Delay>
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6858      	ldr	r0, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	891b      	ldrh	r3, [r3, #8]
 80006fc:	2201      	movs	r2, #1
 80006fe:	0019      	movs	r1, r3
 8000700:	f001 fba7 	bl	8001e52 <HAL_GPIO_WritePin>
    if(stat != HAL_OK){
 8000704:	220f      	movs	r2, #15
 8000706:	18bb      	adds	r3, r7, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <LTC2460_READ+0xe8>
        return stat + 1;
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	e003      	b.n	8000720 <LTC2460_READ+0xf0>
    }

    HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 ffb7 	bl	800168c <HAL_Delay>

    return LTC2460_Success;
 800071e:	2300      	movs	r3, #0
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b005      	add	sp, #20
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800072e:	4b46      	ldr	r3, [pc, #280]	@ (8000848 <main+0x120>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f005 fc1a 	bl	8005f70 <setbuf>
	ltc2460.speed = 0;
 800073c:	4b43      	ldr	r3, [pc, #268]	@ (800084c <main+0x124>)
 800073e:	2200      	movs	r2, #0
 8000740:	74da      	strb	r2, [r3, #19]
	ltc2460.spi = &hspi2;
 8000742:	4b42      	ldr	r3, [pc, #264]	@ (800084c <main+0x124>)
 8000744:	4a42      	ldr	r2, [pc, #264]	@ (8000850 <main+0x128>)
 8000746:	601a      	str	r2, [r3, #0]
	ltc2460.miso = GPIOB;
 8000748:	4b40      	ldr	r3, [pc, #256]	@ (800084c <main+0x124>)
 800074a:	4a42      	ldr	r2, [pc, #264]	@ (8000854 <main+0x12c>)
 800074c:	60da      	str	r2, [r3, #12]
	ltc2460.ss = GPIOD;
 800074e:	4b3f      	ldr	r3, [pc, #252]	@ (800084c <main+0x124>)
 8000750:	4a41      	ldr	r2, [pc, #260]	@ (8000858 <main+0x130>)
 8000752:	605a      	str	r2, [r3, #4]
	ltc2460.miso_num = GPIO_PIN_14;
 8000754:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <main+0x124>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	01d2      	lsls	r2, r2, #7
 800075a:	821a      	strh	r2, [r3, #16]
	ltc2460.ss_num = GPIO_PIN_0;
 800075c:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <main+0x124>)
 800075e:	2201      	movs	r2, #1
 8000760:	811a      	strh	r2, [r3, #8]
	ltc2460.receive_only = 1;
 8000762:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <main+0x124>)
 8000764:	2201      	movs	r2, #1
 8000766:	749a      	strb	r2, [r3, #18]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 ff54 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f892 	bl	8000894 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = FLASH_BASE;
 8000770:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <main+0x134>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	0512      	lsls	r2, r2, #20
 8000776:	609a      	str	r2, [r3, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f9e4 	bl	8000b44 <MX_GPIO_Init>
  MX_SPI2_Init();
 800077c:	f000 f8d2 	bl	8000924 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000780:	f000 f910 	bl	80009a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000784:	f000 f95c 	bl	8000a40 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8000788:	f000 f9a8 	bl	8000adc <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800078c:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <main+0x12c>)
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fb5d 	bl	8001e52 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, rx_Buff_V, RX_BUFF_SIZE_VALVE);
 8000798:	4931      	ldr	r1, [pc, #196]	@ (8000860 <main+0x138>)
 800079a:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <main+0x13c>)
 800079c:	221a      	movs	r2, #26
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 fbaa 	bl	8003ef8 <HAL_UART_Receive_IT>

  HAL_UART_Receive_IT(&huart2, rx_Buff_3, RX_BUFF_SIZE_MAIN3);
 80007a4:	4930      	ldr	r1, [pc, #192]	@ (8000868 <main+0x140>)
 80007a6:	4b31      	ldr	r3, [pc, #196]	@ (800086c <main+0x144>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 fba4 	bl	8003ef8 <HAL_UART_Receive_IT>

  HAL_UART_Receive_IT(&huart4, rx_Buff_PC, 1);
 80007b0:	492f      	ldr	r1, [pc, #188]	@ (8000870 <main+0x148>)
 80007b2:	4b30      	ldr	r3, [pc, #192]	@ (8000874 <main+0x14c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fb9e 	bl	8003ef8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t voltage;
    LTC2460_READ(&ltc2460, &voltage);
 80007bc:	1cba      	adds	r2, r7, #2
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <main+0x124>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff ff34 	bl	8000630 <LTC2460_READ>
    int voltage_micro = voltage / 9197;
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	492a      	ldr	r1, [pc, #168]	@ (8000878 <main+0x150>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fca2 	bl	8000118 <__udivsi3>
 80007d4:	0003      	movs	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	607b      	str	r3, [r7, #4]
    printf("voltage_raw: %d voltage: %d.%06d\r\n",voltage, voltage_micro/1000000, voltage_micro%1000000);
 80007da:	1cbb      	adds	r3, r7, #2
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	001c      	movs	r4, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4926      	ldr	r1, [pc, #152]	@ (800087c <main+0x154>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fd21 	bl	800022c <__divsi3>
 80007ea:	0003      	movs	r3, r0
 80007ec:	001d      	movs	r5, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4922      	ldr	r1, [pc, #136]	@ (800087c <main+0x154>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe00 	bl	80003f8 <__aeabi_idivmod>
 80007f8:	000b      	movs	r3, r1
 80007fa:	4821      	ldr	r0, [pc, #132]	@ (8000880 <main+0x158>)
 80007fc:	002a      	movs	r2, r5
 80007fe:	0021      	movs	r1, r4
 8000800:	f005 fda6 	bl	8006350 <iprintf>
    voltage_send = voltage_micro / 100000;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	491f      	ldr	r1, [pc, #124]	@ (8000884 <main+0x15c>)
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fd0f 	bl	800022c <__divsi3>
 800080e:	0003      	movs	r3, r0
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <main+0x160>)
 8000814:	701a      	strb	r2, [r3, #0]

    send_MAIN3(tx_Buff_3);
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <main+0x164>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb87 	bl	8000f2c <send_MAIN3>
    printf("Voltage_send:%d\r\n", voltage_send);
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <main+0x160>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	001a      	movs	r2, r3
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <main+0x168>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f005 fd91 	bl	8006350 <iprintf>
    HAL_UART_Transmit(&huart2, tx_Buff_3, TX_BUFF_SIZE_MAIN3, 10);
 800082e:	4917      	ldr	r1, [pc, #92]	@ (800088c <main+0x164>)
 8000830:	480e      	ldr	r0, [pc, #56]	@ (800086c <main+0x144>)
 8000832:	230a      	movs	r3, #10
 8000834:	220a      	movs	r2, #10
 8000836:	f003 fabb 	bl	8003db0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800083a:	23fa      	movs	r3, #250	@ 0xfa
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	0018      	movs	r0, r3
 8000840:	f000 ff24 	bl	800168c <HAL_Delay>
  {
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	e7b9      	b.n	80007bc <main+0x94>
 8000848:	20000018 	.word	0x20000018
 800084c:	200002ec 	.word	0x200002ec
 8000850:	20000084 	.word	0x20000084
 8000854:	50000400 	.word	0x50000400
 8000858:	50000c00 	.word	0x50000c00
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	200002ac 	.word	0x200002ac
 8000864:	200000e8 	.word	0x200000e8
 8000868:	200002a4 	.word	0x200002a4
 800086c:	2000017c 	.word	0x2000017c
 8000870:	200002d8 	.word	0x200002d8
 8000874:	20000210 	.word	0x20000210
 8000878:	000023ed 	.word	0x000023ed
 800087c:	000f4240 	.word	0x000f4240
 8000880:	080070a0 	.word	0x080070a0
 8000884:	000186a0 	.word	0x000186a0
 8000888:	200002e8 	.word	0x200002e8
 800088c:	200002c8 	.word	0x200002c8
 8000890:	080070c4 	.word	0x080070c4

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b093      	sub	sp, #76	@ 0x4c
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	2410      	movs	r4, #16
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	2338      	movs	r3, #56	@ 0x38
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 fdc3 	bl	8006430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	2310      	movs	r3, #16
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f005 fdbc 	bl	8006430 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fae5 	bl	8001e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2202      	movs	r2, #2
 80008c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	0052      	lsls	r2, r2, #1
 80008ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2240      	movs	r2, #64	@ 0x40
 80008da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fb1d 	bl	8001f24 <HAL_RCC_OscConfig>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008ee:	f000 fb7f 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	003b      	movs	r3, r7
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f8:	003b      	movs	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	003b      	movs	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	003b      	movs	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090a:	003b      	movs	r3, r7
 800090c:	2100      	movs	r1, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fe22 	bl	8002558 <HAL_RCC_ClockConfig>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000918:	f000 fb6a 	bl	8000ff0 <Error_Handler>
  }
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b013      	add	sp, #76	@ 0x4c
 8000922:	bd90      	pop	{r4, r7, pc}

08000924 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_SPI2_Init+0x78>)
 800092a:	4a1d      	ldr	r2, [pc, #116]	@ (80009a0 <MX_SPI2_Init+0x7c>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_SPI2_Init+0x78>)
 8000930:	2282      	movs	r2, #130	@ 0x82
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_SPI2_Init+0x78>)
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	00d2      	lsls	r2, r2, #3
 800093c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_SPI2_Init+0x78>)
 8000940:	22f0      	movs	r2, #240	@ 0xf0
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_SPI2_Init+0x78>)
 8000948:	2202      	movs	r2, #2
 800094a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_SPI2_Init+0x78>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_SPI2_Init+0x78>)
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_SPI2_Init+0x78>)
 800095c:	2230      	movs	r2, #48	@ 0x30
 800095e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_SPI2_Init+0x78>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_SPI2_Init+0x78>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_SPI2_Init+0x78>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <MX_SPI2_Init+0x78>)
 8000974:	2207      	movs	r2, #7
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_SPI2_Init+0x78>)
 800097a:	2200      	movs	r2, #0
 800097c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <MX_SPI2_Init+0x78>)
 8000980:	2208      	movs	r2, #8
 8000982:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <MX_SPI2_Init+0x78>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f972 	bl	8002c70 <HAL_SPI_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 fb2e 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20000084 	.word	0x20000084
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009aa:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <MX_USART1_UART_Init+0x98>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009b0:	22e1      	movs	r2, #225	@ 0xe1
 80009b2:	0252      	lsls	r2, r2, #9
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f003 f988 	bl	8003d04 <HAL_UART_Init>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 fafa 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	0018      	movs	r0, r3
 8000a02:	f005 f9d5 	bl	8005db0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 faf1 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f005 fa0c 	bl	8005e30 <HAL_UARTEx_SetRxFifoThreshold>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 fae8 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <MX_USART1_UART_Init+0x94>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f005 f98a 	bl	8005d3c <HAL_UARTEx_DisableFifoMode>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 fae0 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	200000e8 	.word	0x200000e8
 8000a3c:	40013800 	.word	0x40013800

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <MX_USART2_UART_Init+0x98>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a4c:	22e1      	movs	r2, #225	@ 0xe1
 8000a4e:	0252      	lsls	r2, r2, #9
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f003 f93a 	bl	8003d04 <HAL_UART_Init>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 faac 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f005 f987 	bl	8005db0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 faa3 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f005 f9be 	bl	8005e30 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fa9a 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f005 f93c 	bl	8005d3c <HAL_UARTEx_DisableFifoMode>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fa92 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	2000017c 	.word	0x2000017c
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <MX_USART4_UART_Init+0x64>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000ae8:	22e1      	movs	r2, #225	@ 0xe1
 8000aea:	0252      	lsls	r2, r2, #9
 8000aec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <MX_USART4_UART_Init+0x60>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f003 f8ec 	bl	8003d04 <HAL_UART_Init>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 fa5e 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	20000210 	.word	0x20000210
 8000b40:	40004c00 	.word	0x40004c00

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b089      	sub	sp, #36	@ 0x24
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	240c      	movs	r4, #12
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f005 fc6b 	bl	8006430 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b66:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b78:	2102      	movs	r1, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b90:	2108      	movs	r1, #8
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_GPIO_Init+0xc8>)
 8000b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_GPIO_Init+0xcc>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 f952 	bl	8001e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_GPIO_Init+0xd0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 f94c 	bl	8001e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <MX_GPIO_Init+0xcc>)
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	0010      	movs	r0, r2
 8000bda:	f000 ffb9 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2220      	movs	r2, #32
 8000be4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <MX_GPIO_Init+0xd0>)
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0010      	movs	r0, r2
 8000c00:	f000 ffa6 	bl	8001b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b009      	add	sp, #36	@ 0x24
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	50000c00 	.word	0x50000c00
 8000c14:	50000400 	.word	0x50000400

08000c18 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart4,(uint8_t *)ptr,len,10);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <_write+0x24>)
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	f003 f8bf 	bl	8003db0 <HAL_UART_Transmit>
  return len;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b004      	add	sp, #16
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000210 	.word	0x20000210

08000c40 <calculateChecksum>:

void calculateChecksum(uint8_t *Buff, uint8_t Buff_size, uint8_t *ck_a, uint8_t *ck_b){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	1c0a      	adds	r2, r1, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	*ck_a = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
    *ck_b = 0;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < (Buff_size - 2); i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e014      	b.n	8000c90 <calculateChecksum+0x50>
        *ck_a = (*ck_a + Buff[i]) & 0xFF;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	68f9      	ldr	r1, [r7, #12]
 8000c6e:	18cb      	adds	r3, r1, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	18d3      	adds	r3, r2, r3
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	701a      	strb	r2, [r3, #0]
        *ck_b = (*ck_b + *ck_a) & 0xFF;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < (Buff_size - 2); i++) {
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	230b      	movs	r3, #11
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3b02      	subs	r3, #2
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <calculateChecksum+0x26>
    }
	printf("ck_a : %d\r\n", *ck_a);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <calculateChecksum+0x88>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f005 fb51 	bl	8006350 <iprintf>
	printf("ck_b : %d\r\n", *ck_b);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <calculateChecksum+0x8c>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f005 fb49 	bl	8006350 <iprintf>
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b006      	add	sp, #24
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	080070d8 	.word	0x080070d8
 8000ccc:	080070e4 	.word	0x080070e4

08000cd0 <checkUART>:


int checkUART(uint8_t *rx_Buff, uint8_t *ck_a, uint8_t *ck_b){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  int flag = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
	if (((rx_Buff[0] << 8) | (rx_Buff[1])) == ADDRESS || rx_Buff[2] == 2){
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3201      	adds	r2, #1
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	23fd      	movs	r3, #253	@ 0xfd
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <checkUART+0x30>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d124      	bne.n	8000d4a <checkUART+0x7a>
        Buff_size = rx_Buff[4];
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	791a      	ldrb	r2, [r3, #4]
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <checkUART+0x88>)
 8000d06:	701a      	strb	r2, [r3, #0]
		calculateChecksum(rx_Buff, Buff_size, ck_a, ck_b);
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <checkUART+0x88>)
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff ff95 	bl	8000c40 <calculateChecksum>

		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <checkUART+0x88>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3b02      	subs	r3, #2
 8000d20:	68f9      	ldr	r1, [r7, #12]
 8000d22:	18cb      	adds	r3, r1, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d009      	beq.n	8000d3e <checkUART+0x6e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <checkUART+0x88>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	68f9      	ldr	r1, [r7, #12]
 8000d36:	18cb      	adds	r3, r1, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d102      	bne.n	8000d44 <checkUART+0x74>
			flag = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d42:	e004      	b.n	8000d4e <checkUART+0x7e>
		}else{
			flag = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d48:	e001      	b.n	8000d4e <checkUART+0x7e>
		}

	}else{
		flag = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
	}
  return flag;
 8000d4e:	697b      	ldr	r3, [r7, #20]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b006      	add	sp, #24
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200002da 	.word	0x200002da

08000d5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  //Valve
	if (huart->Instance == USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a57      	ldr	r2, [pc, #348]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x16c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12a      	bne.n	8000dc4 <HAL_UART_RxCpltCallback+0x68>
	{
    printf("Received from Valve\r\n");
 8000d6e:	4b57      	ldr	r3, [pc, #348]	@ (8000ecc <HAL_UART_RxCpltCallback+0x170>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f005 fb53 	bl	800641c <puts>
    if(rx_Buff_V[0] == 0x24)
 8000d76:	4b56      	ldr	r3, [pc, #344]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x174>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b24      	cmp	r3, #36	@ 0x24
 8000d7c:	d111      	bne.n	8000da2 <HAL_UART_RxCpltCallback+0x46>
    {
    	TankPressure = rx_Buff_V[1];
 8000d7e:	4b54      	ldr	r3, [pc, #336]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x174>)
 8000d80:	785a      	ldrb	r2, [r3, #1]
 8000d82:	4b54      	ldr	r3, [pc, #336]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x178>)
 8000d84:	701a      	strb	r2, [r3, #0]
    	PHASE = rx_Buff_V[4];
 8000d86:	4b52      	ldr	r3, [pc, #328]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x174>)
 8000d88:	791a      	ldrb	r2, [r3, #4]
 8000d8a:	4b53      	ldr	r3, [pc, #332]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x17c>)
 8000d8c:	701a      	strb	r2, [r3, #0]
    	printf("TP:%d\r\nPHASE:%d\r\n", TankPressure, PHASE);
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x178>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	0019      	movs	r1, r3
 8000d94:	4b50      	ldr	r3, [pc, #320]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x17c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	4b50      	ldr	r3, [pc, #320]	@ (8000edc <HAL_UART_RxCpltCallback+0x180>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f005 fad7 	bl	8006350 <iprintf>
    }
	  flag = 0;
 8000da2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x184>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
	  MX_USART1_UART_Init();
 8000da8:	f7ff fdfc 	bl	80009a4 <MX_USART1_UART_Init>
	  memset(rx_Buff_V, 0, RX_BUFF_SIZE_VALVE);
 8000dac:	4b48      	ldr	r3, [pc, #288]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x174>)
 8000dae:	221a      	movs	r2, #26
 8000db0:	2100      	movs	r1, #0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f005 fb3c 	bl	8006430 <memset>
	  HAL_UART_Receive_IT(&huart1, rx_Buff_V, RX_BUFF_SIZE_VALVE);
 8000db8:	4945      	ldr	r1, [pc, #276]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x174>)
 8000dba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x188>)
 8000dbc:	221a      	movs	r2, #26
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f003 f89a 	bl	8003ef8 <HAL_UART_Receive_IT>
	}
  // Main3
	if (huart->Instance == USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a47      	ldr	r2, [pc, #284]	@ (8000ee8 <HAL_UART_RxCpltCallback+0x18c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d13b      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0xea>
	{
	  printf("Received from Main3 %d\r\n", rx_Buff_3[5]);
 8000dce:	4b47      	ldr	r3, [pc, #284]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	4b46      	ldr	r3, [pc, #280]	@ (8000ef0 <HAL_UART_RxCpltCallback+0x194>)
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f005 fab9 	bl	8006350 <iprintf>
	  if(checkUART(rx_Buff_3, &ck_a_rx3, &ck_b_rx3))
 8000dde:	4a45      	ldr	r2, [pc, #276]	@ (8000ef4 <HAL_UART_RxCpltCallback+0x198>)
 8000de0:	4945      	ldr	r1, [pc, #276]	@ (8000ef8 <HAL_UART_RxCpltCallback+0x19c>)
 8000de2:	4b42      	ldr	r3, [pc, #264]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff73 	bl	8000cd0 <checkUART>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d01a      	beq.n	8000e24 <HAL_UART_RxCpltCallback+0xc8>
	  {
	    if(rx_Buff_3[3] == MAIN1)
 8000dee:	4b3f      	ldr	r3, [pc, #252]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000df0:	78db      	ldrb	r3, [r3, #3]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d104      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0xa4>
	    {
	      command = rx_Buff_3[5];
 8000df6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000df8:	795a      	ldrb	r2, [r3, #5]
 8000dfa:	4b40      	ldr	r3, [pc, #256]	@ (8000efc <HAL_UART_RxCpltCallback+0x1a0>)
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e011      	b.n	8000e24 <HAL_UART_RxCpltCallback+0xc8>
	    }else if(rx_Buff_3[3] == VALVE)
 8000e00:	4b3a      	ldr	r3, [pc, #232]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000e02:	78db      	ldrb	r3, [r3, #3]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10d      	bne.n	8000e24 <HAL_UART_RxCpltCallback+0xc8>
	    {
	      HAL_UART_Transmit(&huart1, &rx_Buff_3[5], 1, 10);
 8000e08:	493d      	ldr	r1, [pc, #244]	@ (8000f00 <HAL_UART_RxCpltCallback+0x1a4>)
 8000e0a:	4836      	ldr	r0, [pc, #216]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x188>)
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f002 ffce 	bl	8003db0 <HAL_UART_Transmit>
	      printf("SendToValve:%c\r\n", rx_Buff_3[5]);
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000e16:	795b      	ldrb	r3, [r3, #5]
 8000e18:	001a      	movs	r2, r3
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1a8>)
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f005 fa96 	bl	8006350 <iprintf>
	    }
	  }
	  flag = 0;
 8000e24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x184>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
		MX_USART2_UART_Init();
 8000e2a:	f7ff fe09 	bl	8000a40 <MX_USART2_UART_Init>
		memset(rx_Buff_3, 0, RX_BUFF_SIZE_MAIN3);
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	2100      	movs	r1, #0
 8000e34:	0018      	movs	r0, r3
 8000e36:	f005 fafb 	bl	8006430 <memset>
		HAL_UART_Receive_IT(&huart2, rx_Buff_3, RX_BUFF_SIZE_MAIN3);
 8000e3a:	492c      	ldr	r1, [pc, #176]	@ (8000eec <HAL_UART_RxCpltCallback+0x190>)
 8000e3c:	4b32      	ldr	r3, [pc, #200]	@ (8000f08 <HAL_UART_RxCpltCallback+0x1ac>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 f859 	bl	8003ef8 <HAL_UART_Receive_IT>
	}
  // PC
	if (huart->Instance == USART4)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a30      	ldr	r2, [pc, #192]	@ (8000f0c <HAL_UART_RxCpltCallback+0x1b0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d136      	bne.n	8000ebe <HAL_UART_RxCpltCallback+0x162>
	{
	  printf("Receive from PC:");
 8000e50:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_UART_RxCpltCallback+0x1b4>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f005 fa7c 	bl	8006350 <iprintf>

	  printf("%d", rx_Buff_PC[0]);
 8000e58:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <HAL_UART_RxCpltCallback+0x1b8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <HAL_UART_RxCpltCallback+0x1bc>)
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f005 fa74 	bl	8006350 <iprintf>
	  tx_Buff_V[0] = rx_Buff_PC[0];
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <HAL_UART_RxCpltCallback+0x1b8>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_UART_RxCpltCallback+0x1c0>)
 8000e6e:	701a      	strb	r2, [r3, #0]
	  printf("\r\n");
 8000e70:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <HAL_UART_RxCpltCallback+0x1c4>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f005 fad2 	bl	800641c <puts>
	    for(int i = 0; i < TX_BUFF_SIZE_VALVE; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e00c      	b.n	8000e98 <HAL_UART_RxCpltCallback+0x13c>
        {
          printf("%#x", tx_Buff_V[i]);
 8000e7e:	4a27      	ldr	r2, [pc, #156]	@ (8000f1c <HAL_UART_RxCpltCallback+0x1c0>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	001a      	movs	r2, r3
 8000e88:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <HAL_UART_RxCpltCallback+0x1c8>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f005 fa5f 	bl	8006350 <iprintf>
	    for(int i = 0; i < TX_BUFF_SIZE_VALVE; i++)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	ddef      	ble.n	8000e7e <HAL_UART_RxCpltCallback+0x122>
        }
	    printf("\r\n");
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <HAL_UART_RxCpltCallback+0x1c4>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f005 fabb 	bl	800641c <puts>
	  HAL_UART_Transmit(&huart1, tx_Buff_V, TX_BUFF_SIZE_VALVE, 10);
 8000ea6:	491d      	ldr	r1, [pc, #116]	@ (8000f1c <HAL_UART_RxCpltCallback+0x1c0>)
 8000ea8:	480e      	ldr	r0, [pc, #56]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x188>)
 8000eaa:	230a      	movs	r3, #10
 8000eac:	2201      	movs	r2, #1
 8000eae:	f002 ff7f 	bl	8003db0 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart4, rx_Buff_PC, 1);
 8000eb2:	4918      	ldr	r1, [pc, #96]	@ (8000f14 <HAL_UART_RxCpltCallback+0x1b8>)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <HAL_UART_RxCpltCallback+0x1cc>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f003 f81d 	bl	8003ef8 <HAL_UART_Receive_IT>
	}
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	080070f0 	.word	0x080070f0
 8000ed0:	200002ac 	.word	0x200002ac
 8000ed4:	200002e5 	.word	0x200002e5
 8000ed8:	200002e4 	.word	0x200002e4
 8000edc:	08007108 	.word	0x08007108
 8000ee0:	200002e0 	.word	0x200002e0
 8000ee4:	200000e8 	.word	0x200000e8
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	200002a4 	.word	0x200002a4
 8000ef0:	0800711c 	.word	0x0800711c
 8000ef4:	200002dc 	.word	0x200002dc
 8000ef8:	200002db 	.word	0x200002db
 8000efc:	200002d9 	.word	0x200002d9
 8000f00:	200002a9 	.word	0x200002a9
 8000f04:	08007138 	.word	0x08007138
 8000f08:	2000017c 	.word	0x2000017c
 8000f0c:	40004c00 	.word	0x40004c00
 8000f10:	0800714c 	.word	0x0800714c
 8000f14:	200002d8 	.word	0x200002d8
 8000f18:	08007160 	.word	0x08007160
 8000f1c:	200002d4 	.word	0x200002d4
 8000f20:	08007164 	.word	0x08007164
 8000f24:	08007168 	.word	0x08007168
 8000f28:	20000210 	.word	0x20000210

08000f2c <send_MAIN3>:
	calculateChecksum(tx_Buff, TX_BUFF_SIZE_VALVE, &ck_a_tx3, &ck_b_tx3);
	tx_Buff[TX_BUFF_SIZE_VALVE - 2] = ck_a_tx3;
	tx_Buff[TX_BUFF_SIZE_VALVE - 1] = ck_b_tx3;
}

void send_MAIN3(uint8_t *tx_Buff){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	sendto = MAIN3;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <send_MAIN3+0x84>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
	sendfrom = MAIN1;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <send_MAIN3+0x88>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]

    tx_Buff[0] = (ADDRESS >> 8) & 0xFF;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2207      	movs	r2, #7
 8000f44:	701a      	strb	r2, [r3, #0]
    tx_Buff[1] = ADDRESS & 0xFF;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	22e8      	movs	r2, #232	@ 0xe8
 8000f4c:	701a      	strb	r2, [r3, #0]
    tx_Buff[2] = sendto;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3302      	adds	r3, #2
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <send_MAIN3+0x84>)
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	701a      	strb	r2, [r3, #0]
    tx_Buff[3] = sendfrom;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <send_MAIN3+0x88>)
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
    tx_Buff[4] = TX_BUFF_SIZE_MAIN3;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	220a      	movs	r2, #10
 8000f68:	701a      	strb	r2, [r3, #0]
    tx_Buff[5] = voltage_send;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3305      	adds	r3, #5
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <send_MAIN3+0x8c>)
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	701a      	strb	r2, [r3, #0]
    tx_Buff[6] = PHASE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3306      	adds	r3, #6
 8000f78:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <send_MAIN3+0x90>)
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	701a      	strb	r2, [r3, #0]
    tx_Buff[7] = TankPressure;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3307      	adds	r3, #7
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <send_MAIN3+0x94>)
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	701a      	strb	r2, [r3, #0]

    calculateChecksum(tx_Buff, TX_BUFF_SIZE_MAIN3, &ck_a_tx3, &ck_b_tx3);
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <send_MAIN3+0x98>)
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <send_MAIN3+0x9c>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	210a      	movs	r1, #10
 8000f90:	f7ff fe56 	bl	8000c40 <calculateChecksum>
    tx_Buff[TX_BUFF_SIZE_MAIN3 - 2] = ck_a_tx3;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3308      	adds	r3, #8
 8000f98:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <send_MAIN3+0x9c>)
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	701a      	strb	r2, [r3, #0]
    tx_Buff[TX_BUFF_SIZE_MAIN3 - 1] = ck_b_tx3;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3309      	adds	r3, #9
 8000fa2:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <send_MAIN3+0x98>)
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200002e6 	.word	0x200002e6
 8000fb4:	200002e7 	.word	0x200002e7
 8000fb8:	200002e8 	.word	0x200002e8
 8000fbc:	200002e4 	.word	0x200002e4
 8000fc0:	200002e5 	.word	0x200002e5
 8000fc4:	200002de 	.word	0x200002de
 8000fc8:	200002dd 	.word	0x200002dd

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fde:	f000 fb39 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	40001000 	.word	0x40001000

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_MspInit+0x6c>)
 8001004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_MspInit+0x6c>)
 8001008:	2101      	movs	r1, #1
 800100a:	430a      	orrs	r2, r1
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_MspInit+0x6c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	2201      	movs	r2, #1
 8001014:	4013      	ands	r3, r2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <HAL_MspInit+0x6c>)
 800101c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_MspInit+0x6c>)
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	0549      	lsls	r1, r1, #21
 8001024:	430a      	orrs	r2, r1
 8001026:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <HAL_MspInit+0x6c>)
 800102a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	4013      	ands	r3, r2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2003      	movs	r0, #3
 800103c:	f000 fbe8 	bl	8001810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 fbfa 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2004      	movs	r0, #4
 800104c:	f000 fbe0 	bl	8001810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001050:	2004      	movs	r0, #4
 8001052:	f000 fbf2 	bl	800183a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001056:	23c0      	movs	r3, #192	@ 0xc0
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fb3a 	bl	80016d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b08b      	sub	sp, #44	@ 0x2c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	2414      	movs	r4, #20
 8001076:	193b      	adds	r3, r7, r4
 8001078:	0018      	movs	r0, r3
 800107a:	2314      	movs	r3, #20
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f005 f9d6 	bl	8006430 <memset>
  if(hspi->Instance==SPI2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <HAL_SPI_MspInit+0x8c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d130      	bne.n	80010f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 8001090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	01c9      	lsls	r1, r1, #7
 8001098:	430a      	orrs	r2, r1
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 800109e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 80010ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 80010b0:	2102      	movs	r1, #2
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_SPI_MspInit+0x90>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	22c0      	movs	r2, #192	@ 0xc0
 80010c6:	01d2      	lsls	r2, r2, #7
 80010c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	0021      	movs	r1, r4
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2202      	movs	r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <HAL_SPI_MspInit+0x94>)
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f000 fd30 	bl	8001b50 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b00b      	add	sp, #44	@ 0x2c
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	40003800 	.word	0x40003800
 80010fc:	40021000 	.word	0x40021000
 8001100:	50000400 	.word	0x50000400

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b09b      	sub	sp, #108	@ 0x6c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	2354      	movs	r3, #84	@ 0x54
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	0018      	movs	r0, r3
 8001112:	2314      	movs	r3, #20
 8001114:	001a      	movs	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	f005 f98a 	bl	8006430 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	2420      	movs	r4, #32
 800111e:	193b      	adds	r3, r7, r4
 8001120:	0018      	movs	r0, r3
 8001122:	2334      	movs	r3, #52	@ 0x34
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f005 f982 	bl	8006430 <memset>
  if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6d      	ldr	r2, [pc, #436]	@ (80012e8 <HAL_UART_MspInit+0x1e4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d148      	bne.n	80011c8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	193b      	adds	r3, r7, r4
 8001144:	0018      	movs	r0, r3
 8001146:	f001 fbdb 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114e:	f7ff ff4f 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001152:	4b66      	ldr	r3, [pc, #408]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001156:	4b65      	ldr	r3, [pc, #404]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001158:	2180      	movs	r1, #128	@ 0x80
 800115a:	01c9      	lsls	r1, r1, #7
 800115c:	430a      	orrs	r2, r1
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001160:	4b62      	ldr	r3, [pc, #392]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	01db      	lsls	r3, r3, #7
 8001168:	4013      	ands	r3, r2
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b5f      	ldr	r3, [pc, #380]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001172:	4b5e      	ldr	r3, [pc, #376]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	@ 0x34
 800117a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 800117c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117e:	2201      	movs	r2, #1
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001186:	2154      	movs	r1, #84	@ 0x54
 8001188:	187b      	adds	r3, r7, r1
 800118a:	22c0      	movs	r2, #192	@ 0xc0
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2202      	movs	r2, #2
 8001194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2201      	movs	r2, #1
 80011a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	187a      	adds	r2, r7, r1
 80011aa:	23a0      	movs	r3, #160	@ 0xa0
 80011ac:	05db      	lsls	r3, r3, #23
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 fccd 	bl	8001b50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201b      	movs	r0, #27
 80011bc:	f000 fb28 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011c0:	201b      	movs	r0, #27
 80011c2:	f000 fb3a 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80011c6:	e08b      	b.n	80012e0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <HAL_UART_MspInit+0x1ec>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d148      	bne.n	8001264 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d2:	2120      	movs	r1, #32
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2202      	movs	r2, #2
 80011d8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 fb8c 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80011ec:	f7ff ff00 	bl	8000ff0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 80011f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 80011f6:	2180      	movs	r1, #128	@ 0x80
 80011f8:	0289      	lsls	r1, r1, #10
 80011fa:	430a      	orrs	r2, r1
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 800120e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001212:	2101      	movs	r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 800121a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121c:	2201      	movs	r2, #1
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001224:	2154      	movs	r1, #84	@ 0x54
 8001226:	187b      	adds	r3, r7, r1
 8001228:	220c      	movs	r2, #12
 800122a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2202      	movs	r2, #2
 8001230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2201      	movs	r2, #1
 8001242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	187a      	adds	r2, r7, r1
 8001246:	23a0      	movs	r3, #160	@ 0xa0
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 fc7f 	bl	8001b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fada 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 faec 	bl	800183a <HAL_NVIC_EnableIRQ>
}
 8001262:	e03d      	b.n	80012e0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART4)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <HAL_UART_MspInit+0x1f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d138      	bne.n	80012e0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART4_CLK_ENABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001274:	2180      	movs	r1, #128	@ 0x80
 8001276:	0309      	lsls	r1, r1, #12
 8001278:	430a      	orrs	r2, r1
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 800127e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	031b      	lsls	r3, r3, #12
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001290:	2101      	movs	r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_UART_MspInit+0x1e8>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a2:	2154      	movs	r1, #84	@ 0x54
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2203      	movs	r2, #3
 80012a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2202      	movs	r2, #2
 80012ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2204      	movs	r2, #4
 80012c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	187a      	adds	r2, r7, r1
 80012c4:	23a0      	movs	r3, #160	@ 0xa0
 80012c6:	05db      	lsls	r3, r3, #23
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 fc40 	bl	8001b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	201d      	movs	r0, #29
 80012d6:	f000 fa9b 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80012da:	201d      	movs	r0, #29
 80012dc:	f000 faad 	bl	800183a <HAL_NVIC_EnableIRQ>
}
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b01b      	add	sp, #108	@ 0x6c
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40004c00 	.word	0x40004c00

080012f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001300:	232b      	movs	r3, #43	@ 0x2b
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001308:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <HAL_InitTick+0xf0>)
 800130a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <HAL_InitTick+0xf0>)
 800130e:	2110      	movs	r1, #16
 8001310:	430a      	orrs	r2, r1
 8001312:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <HAL_InitTick+0xf0>)
 8001316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001318:	2210      	movs	r2, #16
 800131a:	4013      	ands	r3, r2
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001320:	230c      	movs	r3, #12
 8001322:	18fa      	adds	r2, r7, r3
 8001324:	2410      	movs	r4, #16
 8001326:	193b      	adds	r3, r7, r4
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fabe 	bl	80028ac <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001330:	193b      	adds	r3, r7, r4
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d104      	bne.n	8001346 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800133c:	f001 faa0 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8001340:	0003      	movs	r3, r0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001344:	e004      	b.n	8001350 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001346:	f001 fa9b 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 800134a:	0003      	movs	r3, r0
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001352:	4926      	ldr	r1, [pc, #152]	@ (80013ec <HAL_InitTick+0xf4>)
 8001354:	0018      	movs	r0, r3
 8001356:	f7fe fedf 	bl	8000118 <__udivsi3>
 800135a:	0003      	movs	r3, r0
 800135c:	3b01      	subs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_InitTick+0xf8>)
 8001362:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <HAL_InitTick+0xfc>)
 8001364:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001366:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <HAL_InitTick+0xf8>)
 8001368:	4a23      	ldr	r2, [pc, #140]	@ (80013f8 <HAL_InitTick+0x100>)
 800136a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <HAL_InitTick+0xf8>)
 800136e:	6a3a      	ldr	r2, [r7, #32]
 8001370:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8001372:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_InitTick+0xf8>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_InitTick+0xf8>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_InitTick+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001384:	252b      	movs	r5, #43	@ 0x2b
 8001386:	197c      	adds	r4, r7, r5
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_InitTick+0xf8>)
 800138a:	0018      	movs	r0, r3
 800138c:	f002 fa30 	bl	80037f0 <HAL_TIM_Base_Init>
 8001390:	0003      	movs	r3, r0
 8001392:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001394:	197b      	adds	r3, r7, r5
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11e      	bne.n	80013da <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800139c:	197c      	adds	r4, r7, r5
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_InitTick+0xf8>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 fa85 	bl	80038b0 <HAL_TIM_Base_Start_IT>
 80013a6:	0003      	movs	r3, r0
 80013a8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80013aa:	197b      	adds	r3, r7, r5
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d113      	bne.n	80013da <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80013b2:	2011      	movs	r0, #17
 80013b4:	f000 fa41 	bl	800183a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	0019      	movs	r1, r3
 80013c4:	2011      	movs	r0, #17
 80013c6:	f000 fa23 	bl	8001810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_InitTick+0x104>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e003      	b.n	80013da <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	232b      	movs	r3, #43	@ 0x2b
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80013da:	232b      	movs	r3, #43	@ 0x2b
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b00c      	add	sp, #48	@ 0x30
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	000f4240 	.word	0x000f4240
 80013f0:	20000304 	.word	0x20000304
 80013f4:	40001000 	.word	0x40001000
 80013f8:	000003e7 	.word	0x000003e7
 80013fc:	20000004 	.word	0x20000004

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001404:	46c0      	nop			@ (mov r8, r8)
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001432:	f000 fadf 	bl	80019f4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800144e:	0018      	movs	r0, r3
 8001450:	f002 fa8a 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	20000304 	.word	0x20000304

08001460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <USART1_IRQHandler+0x14>)
 8001466:	0018      	movs	r0, r3
 8001468:	f002 fda4 	bl	8003fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	200000e8 	.word	0x200000e8

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <USART2_IRQHandler+0x14>)
 800147e:	0018      	movs	r0, r3
 8001480:	f002 fd98 	bl	8003fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	2000017c 	.word	0x2000017c

08001490 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <USART3_4_LPUART1_IRQHandler+0x14>)
 8001496:	0018      	movs	r0, r3
 8001498:	f002 fd8c 	bl	8003fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000210 	.word	0x20000210

080014a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	e000      	b.n	80014be <_read+0x16>
 80014bc:	bf00      	nop
 80014be:	0001      	movs	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b006      	add	sp, #24
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	425b      	negs	r3, r3
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	0192      	lsls	r2, r2, #6
 8001506:	605a      	str	r2, [r3, #4]
  return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <_isatty>:

int _isatty(int file)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151a:	2301      	movs	r3, #1
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f004 ff8c 	bl	8006488 <__errno>
 8001570:	0003      	movs	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	2301      	movs	r3, #1
 8001578:	425b      	negs	r3, r3
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	18d2      	adds	r2, r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b006      	add	sp, #24
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20009000 	.word	0x20009000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20000350 	.word	0x20000350
 80015a4:	200004c0 	.word	0x200004c0

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <SystemInit+0x14>)
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	0512      	lsls	r2, r2, #20
 80015b2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c0:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c4:	f7ff fff0 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	@ (800160c <LoopForever+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ee:	f004 ff51 	bl	8006494 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015f2:	f7ff f899 	bl	8000728 <main>

080015f6 <LoopForever>:

LoopForever:
  b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   r0, =_estack
 80015f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001604:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 8001608:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800160c:	200004c0 	.word	0x200004c0

08001610 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_COMP_IRQHandler>
	...

08001614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_Init+0x3c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_Init+0x3c>)
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	0049      	lsls	r1, r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162e:	2003      	movs	r0, #3
 8001630:	f7ff fe62 	bl	80012f8 <HAL_InitTick>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d003      	beq.n	8001640 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e001      	b.n	8001644 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fcdc 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_IncTick+0x1c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_IncTick+0x20>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	18d2      	adds	r2, r2, r3
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_IncTick+0x20>)
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	20000008 	.word	0x20000008
 8001674:	20000354 	.word	0x20000354

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b02      	ldr	r3, [pc, #8]	@ (8001688 <HAL_GetTick+0x10>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	20000354 	.word	0x20000354

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff fff0 	bl	8001678 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	001a      	movs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	189b      	adds	r3, r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	f7ff ffe0 	bl	8001678 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	40010000 	.word	0x40010000
 80016fc:	fffff9ff 	.word	0xfffff9ff

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	0002      	movs	r2, r0
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b7f      	cmp	r3, #127	@ 0x7f
 8001712:	d809      	bhi.n	8001728 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	001a      	movs	r2, r3
 800171a:	231f      	movs	r3, #31
 800171c:	401a      	ands	r2, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <__NVIC_EnableIRQ+0x30>)
 8001720:	2101      	movs	r1, #1
 8001722:	4091      	lsls	r1, r2
 8001724:	000a      	movs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	0002      	movs	r2, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b7f      	cmp	r3, #127	@ 0x7f
 8001748:	d828      	bhi.n	800179c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800174a:	4a2f      	ldr	r2, [pc, #188]	@ (8001808 <__NVIC_SetPriority+0xd4>)
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b25b      	sxtb	r3, r3
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	33c0      	adds	r3, #192	@ 0xc0
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	589b      	ldr	r3, [r3, r2]
 800175a:	1dfa      	adds	r2, r7, #7
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	0011      	movs	r1, r2
 8001760:	2203      	movs	r2, #3
 8001762:	400a      	ands	r2, r1
 8001764:	00d2      	lsls	r2, r2, #3
 8001766:	21ff      	movs	r1, #255	@ 0xff
 8001768:	4091      	lsls	r1, r2
 800176a:	000a      	movs	r2, r1
 800176c:	43d2      	mvns	r2, r2
 800176e:	401a      	ands	r2, r3
 8001770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	22ff      	movs	r2, #255	@ 0xff
 8001778:	401a      	ands	r2, r3
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	0018      	movs	r0, r3
 8001780:	2303      	movs	r3, #3
 8001782:	4003      	ands	r3, r0
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	481f      	ldr	r0, [pc, #124]	@ (8001808 <__NVIC_SetPriority+0xd4>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b25b      	sxtb	r3, r3
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	430a      	orrs	r2, r1
 8001794:	33c0      	adds	r3, #192	@ 0xc0
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800179a:	e031      	b.n	8001800 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179c:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <__NVIC_SetPriority+0xd8>)
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0019      	movs	r1, r3
 80017a4:	230f      	movs	r3, #15
 80017a6:	400b      	ands	r3, r1
 80017a8:	3b08      	subs	r3, #8
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3306      	adds	r3, #6
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	3304      	adds	r3, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1dfa      	adds	r2, r7, #7
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	0011      	movs	r1, r2
 80017bc:	2203      	movs	r2, #3
 80017be:	400a      	ands	r2, r1
 80017c0:	00d2      	lsls	r2, r2, #3
 80017c2:	21ff      	movs	r1, #255	@ 0xff
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	43d2      	mvns	r2, r2
 80017ca:	401a      	ands	r2, r3
 80017cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	22ff      	movs	r2, #255	@ 0xff
 80017d4:	401a      	ands	r2, r3
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	0018      	movs	r0, r3
 80017dc:	2303      	movs	r3, #3
 80017de:	4003      	ands	r3, r0
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <__NVIC_SetPriority+0xd8>)
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	001c      	movs	r4, r3
 80017ec:	230f      	movs	r3, #15
 80017ee:	4023      	ands	r3, r4
 80017f0:	3b08      	subs	r3, #8
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	430a      	orrs	r2, r1
 80017f6:	3306      	adds	r3, #6
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	18c3      	adds	r3, r0, r3
 80017fc:	3304      	adds	r3, #4
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b003      	add	sp, #12
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	210f      	movs	r1, #15
 800181c:	187b      	adds	r3, r7, r1
 800181e:	1c02      	adds	r2, r0, #0
 8001820:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	187b      	adds	r3, r7, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b25b      	sxtb	r3, r3
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff81 	bl	8001734 <__NVIC_SetPriority>
}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	0002      	movs	r2, r0
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b25b      	sxtb	r3, r3
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff ff57 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e050      	b.n	8001910 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2225      	movs	r2, #37	@ 0x25
 8001872:	5c9b      	ldrb	r3, [r3, r2]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d008      	beq.n	800188c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e041      	b.n	8001910 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	210e      	movs	r1, #14
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	491c      	ldr	r1, [pc, #112]	@ (8001918 <HAL_DMA_Abort+0xbc>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_DMA_Abort+0xc0>)
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	221c      	movs	r2, #28
 80018c6:	4013      	ands	r3, r2
 80018c8:	2201      	movs	r2, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <HAL_DMA_Abort+0xc0>)
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ee:	490a      	ldr	r1, [pc, #40]	@ (8001918 <HAL_DMA_Abort+0xbc>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80018fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2225      	movs	r2, #37	@ 0x25
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2224      	movs	r2, #36	@ 0x24
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	fffffeff 	.word	0xfffffeff
 800191c:	40020000 	.word	0x40020000

08001920 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	210f      	movs	r1, #15
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2225      	movs	r2, #37	@ 0x25
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d006      	beq.n	800194a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e049      	b.n	80019de <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	210e      	movs	r1, #14
 8001956:	438a      	bics	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	438a      	bics	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	491d      	ldr	r1, [pc, #116]	@ (80019ec <HAL_DMA_Abort_IT+0xcc>)
 8001976:	400a      	ands	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_DMA_Abort_IT+0xd0>)
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	221c      	movs	r2, #28
 8001984:	4013      	ands	r3, r2
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_DMA_Abort_IT+0xd0>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001998:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ac:	490f      	ldr	r1, [pc, #60]	@ (80019ec <HAL_DMA_Abort_IT+0xcc>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2225      	movs	r2, #37	@ 0x25
 80019c0:	2101      	movs	r1, #1
 80019c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	@ 0x24
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	0010      	movs	r0, r2
 80019dc:	4798      	blx	r3
    }
  }
  return status;
 80019de:	230f      	movs	r3, #15
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	fffffeff 	.word	0xfffffeff
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80019fa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae8 <HAL_FLASH_IRQHandler+0xf4>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 8001a04:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	e013      	b.n	8001a3e <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_FLASH_IRQHandler+0xfc>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 8001a30:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	e002      	b.n	8001a3e <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00f      	beq.n	8001a64 <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001a44:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a4e:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a52:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <HAL_FLASH_IRQHandler+0xf4>)
 8001a54:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f852 	bl	8001b08 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d028      	beq.n	8001ac0 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11a      	bne.n	8001ab2 <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a84:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a96:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	f000 f838 	bl	8001b18 <FLASH_PageErase>
 8001aa8:	e006      	b.n	8001ab8 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e002      	b.n	8001ab8 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 f81c 	bl	8001af8 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d108      	bne.n	8001ada <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_FLASH_IRQHandler+0xf0>)
 8001ace:	4909      	ldr	r1, [pc, #36]	@ (8001af4 <HAL_FLASH_IRQHandler+0x100>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_FLASH_IRQHandler+0xf8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	0000c3fa 	.word	0x0000c3fa
 8001aec:	20000358 	.word	0x20000358
 8001af0:	00040001 	.word	0x00040001
 8001af4:	fcffffff 	.word	0xfcffffff

08001af8 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001b10:	46c0      	nop			@ (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <FLASH_PageErase+0x2c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <FLASH_PageErase+0x30>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	00da      	lsls	r2, r3, #3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <FLASH_PageErase+0x2c>)
 8001b36:	4905      	ldr	r1, [pc, #20]	@ (8001b4c <FLASH_PageErase+0x34>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	615a      	str	r2, [r3, #20]
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	ffffe007 	.word	0xffffe007
 8001b4c:	00010002 	.word	0x00010002

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e147      	b.n	8001df0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4091      	lsls	r1, r2
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x28>
 8001b76:	e138      	b.n	8001dea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d005      	beq.n	8001b90 <HAL_GPIO_Init+0x40>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d130      	bne.n	8001bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	2201      	movs	r2, #1
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d017      	beq.n	8001c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d123      	bne.n	8001c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	58d3      	ldr	r3, [r2, r3]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	409a      	lsls	r2, r3
 8001c54:	0013      	movs	r3, r2
 8001c56:	43da      	mvns	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2107      	movs	r1, #7
 8001c66:	400b      	ands	r3, r1
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	23c0      	movs	r3, #192	@ 0xc0
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d100      	bne.n	8001cc4 <HAL_GPIO_Init+0x174>
 8001cc2:	e092      	b.n	8001dea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001cc4:	4a50      	ldr	r2, [pc, #320]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3318      	adds	r3, #24
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	23a0      	movs	r3, #160	@ 0xa0
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x1ca>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a45      	ldr	r2, [pc, #276]	@ (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x1c6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a44      	ldr	r2, [pc, #272]	@ (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x1c2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x1be>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x1cc>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x1cc>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x1cc>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x1cc>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	2103      	movs	r1, #3
 8001d20:	400a      	ands	r2, r1
 8001d22:	00d2      	lsls	r2, r2, #3
 8001d24:	4093      	lsls	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d2c:	4936      	ldr	r1, [pc, #216]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3318      	adds	r3, #24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	035b      	lsls	r3, r3, #13
 8001d52:	4013      	ands	r3, r2
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	039b      	lsls	r3, r3, #14
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d88:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d90:	2384      	movs	r3, #132	@ 0x84
 8001d92:	58d3      	ldr	r3, [r2, r3]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db4:	4914      	ldr	r1, [pc, #80]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001db6:	2284      	movs	r2, #132	@ 0x84
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001dbc:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	58d3      	ldr	r3, [r2, r3]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de2:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001de4:	2280      	movs	r2, #128	@ 0x80
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	40da      	lsrs	r2, r3
 8001df8:	1e13      	subs	r3, r2, #0
 8001dfa:	d000      	beq.n	8001dfe <HAL_GPIO_Init+0x2ae>
 8001dfc:	e6b0      	b.n	8001b60 <HAL_GPIO_Init+0x10>
  }
}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b006      	add	sp, #24
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	50000400 	.word	0x50000400
 8001e10:	50000800 	.word	0x50000800
 8001e14:	50000c00 	.word	0x50000c00

08001e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	000a      	movs	r2, r1
 8001e22:	1cbb      	adds	r3, r7, #2
 8001e24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	1cba      	adds	r2, r7, #2
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	0008      	movs	r0, r1
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	1c02      	adds	r2, r0, #0
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	1c7b      	adds	r3, r7, #1
 8001e66:	1c0a      	adds	r2, r1, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6a:	1c7b      	adds	r3, r7, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	1cbb      	adds	r3, r7, #2
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d11f      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	189b      	adds	r3, r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4912      	ldr	r1, [pc, #72]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7fe f92a 	bl	8000118 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eca:	e008      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e001      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e009      	b.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d0ed      	beq.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	40007000 	.word	0x40007000
 8001f00:	fffff9ff 	.word	0xfffff9ff
 8001f04:	20000000 	.word	0x20000000
 8001f08:	000f4240 	.word	0x000f4240

08001f0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	23e0      	movs	r3, #224	@ 0xe0
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	4013      	ands	r3, r2
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e2fe      	b.n	8002534 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1e>
 8001f40:	e07c      	b.n	800203c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4bc3      	ldr	r3, [pc, #780]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	@ 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4c:	4bc0      	ldr	r3, [pc, #768]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2203      	movs	r2, #3
 8001f52:	4013      	ands	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3e>
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d10b      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	4bb9      	ldr	r3, [pc, #740]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	4013      	ands	r3, r2
 8001f72:	d062      	beq.n	800203a <HAL_RCC_OscConfig+0x116>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d15e      	bne.n	800203a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e2d9      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x78>
 8001f8c:	4bb0      	ldr	r3, [pc, #704]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4baf      	ldr	r3, [pc, #700]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	0249      	lsls	r1, r1, #9
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e020      	b.n	8001fde <HAL_RCC_OscConfig+0xba>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	23a0      	movs	r3, #160	@ 0xa0
 8001fa2:	02db      	lsls	r3, r3, #11
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_RCC_OscConfig+0xa2>
 8001fa8:	4ba9      	ldr	r3, [pc, #676]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4ba8      	ldr	r3, [pc, #672]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	2180      	movs	r1, #128	@ 0x80
 8001fb0:	02c9      	lsls	r1, r1, #11
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	4ba6      	ldr	r3, [pc, #664]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4ba5      	ldr	r3, [pc, #660]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0249      	lsls	r1, r1, #9
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0xba>
 8001fc6:	4ba2      	ldr	r3, [pc, #648]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4ba1      	ldr	r3, [pc, #644]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	49a1      	ldr	r1, [pc, #644]	@ (8002254 <HAL_RCC_OscConfig+0x330>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	4b9f      	ldr	r3, [pc, #636]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b9e      	ldr	r3, [pc, #632]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	499f      	ldr	r1, [pc, #636]	@ (8002258 <HAL_RCC_OscConfig+0x334>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d014      	beq.n	8002010 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fb47 	bl	8001678 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fb42 	bl	8001678 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e298      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4b93      	ldr	r3, [pc, #588]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xcc>
 800200e:	e015      	b.n	800203c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fb32 	bl	8001678 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201a:	f7ff fb2d 	bl	8001678 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	@ 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e283      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202c:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0xf6>
 8002038:	e000      	b.n	800203c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d100      	bne.n	8002048 <HAL_RCC_OscConfig+0x124>
 8002046:	e099      	b.n	800217c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002048:	4b81      	ldr	r3, [pc, #516]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2238      	movs	r2, #56	@ 0x38
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002052:	4b7f      	ldr	r3, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x144>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d002      	beq.n	800206e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d135      	bne.n	80020da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206e:	4b78      	ldr	r3, [pc, #480]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4013      	ands	r3, r2
 8002078:	d005      	beq.n	8002086 <HAL_RCC_OscConfig+0x162>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e256      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4b72      	ldr	r3, [pc, #456]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a74      	ldr	r2, [pc, #464]	@ (800225c <HAL_RCC_OscConfig+0x338>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	021a      	lsls	r2, r3, #8
 8002096:	4b6e      	ldr	r3, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002098:	430a      	orrs	r2, r1
 800209a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002260 <HAL_RCC_OscConfig+0x33c>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020b6:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0adb      	lsrs	r3, r3, #11
 80020bc:	2207      	movs	r2, #7
 80020be:	4013      	ands	r3, r2
 80020c0:	4a68      	ldr	r2, [pc, #416]	@ (8002264 <HAL_RCC_OscConfig+0x340>)
 80020c2:	40da      	lsrs	r2, r3
 80020c4:	4b68      	ldr	r3, [pc, #416]	@ (8002268 <HAL_RCC_OscConfig+0x344>)
 80020c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020c8:	4b68      	ldr	r3, [pc, #416]	@ (800226c <HAL_RCC_OscConfig+0x348>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff f913 	bl	80012f8 <HAL_InitTick>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d051      	beq.n	800217a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e22c      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d030      	beq.n	8002144 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002260 <HAL_RCC_OscConfig+0x33c>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020f6:	4b56      	ldr	r3, [pc, #344]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b55      	ldr	r3, [pc, #340]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0049      	lsls	r1, r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fab8 	bl	8001678 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fab3 	bl	8001678 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e209      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4013      	ands	r3, r2
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <HAL_RCC_OscConfig+0x338>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	021a      	lsls	r2, r3, #8
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e01b      	b.n	800217c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002144:	4b42      	ldr	r3, [pc, #264]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800214a:	4949      	ldr	r1, [pc, #292]	@ (8002270 <HAL_RCC_OscConfig+0x34c>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fa92 	bl	8001678 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fa8d 	bl	8001678 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1e3      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800216c:	4b38      	ldr	r3, [pc, #224]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4013      	ands	r3, r2
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x236>
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	4013      	ands	r3, r2
 8002184:	d047      	beq.n	8002216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002186:	4b32      	ldr	r3, [pc, #200]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2238      	movs	r2, #56	@ 0x38
 800218c:	4013      	ands	r3, r2
 800218e:	2b18      	cmp	r3, #24
 8002190:	d10a      	bne.n	80021a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002192:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d03c      	beq.n	8002216 <HAL_RCC_OscConfig+0x2f2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d138      	bne.n	8002216 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e1c5      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d019      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021b0:	4b27      	ldr	r3, [pc, #156]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021b4:	4b26      	ldr	r3, [pc, #152]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	430a      	orrs	r2, r1
 80021ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff fa5c 	bl	8001678 <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff fa57 	bl	8001678 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1ad      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d0f1      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2a2>
 80021e2:	e018      	b.n	8002216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	438a      	bics	r2, r1
 80021ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff fa42 	bl	8001678 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fa:	f7ff fa3d 	bl	8001678 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e193      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002210:	2202      	movs	r2, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d1f1      	bne.n	80021fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2204      	movs	r2, #4
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x2fe>
 8002220:	e0c6      	b.n	80023b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	231f      	movs	r3, #31
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2238      	movs	r2, #56	@ 0x38
 8002230:	4013      	ands	r3, r2
 8002232:	2b20      	cmp	r3, #32
 8002234:	d11e      	bne.n	8002274 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d100      	bne.n	8002242 <HAL_RCC_OscConfig+0x31e>
 8002240:	e0b6      	b.n	80023b0 <HAL_RCC_OscConfig+0x48c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d000      	beq.n	800224c <HAL_RCC_OscConfig+0x328>
 800224a:	e0b1      	b.n	80023b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e171      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
 8002250:	40021000 	.word	0x40021000
 8002254:	fffeffff 	.word	0xfffeffff
 8002258:	fffbffff 	.word	0xfffbffff
 800225c:	ffff80ff 	.word	0xffff80ff
 8002260:	ffffc7ff 	.word	0xffffc7ff
 8002264:	00f42400 	.word	0x00f42400
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004
 8002270:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002274:	4bb1      	ldr	r3, [pc, #708]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	4013      	ands	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_RCC_OscConfig+0x360>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x362>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d011      	beq.n	80022ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4bac      	ldr	r3, [pc, #688]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800228c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800228e:	4bab      	ldr	r3, [pc, #684]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	0549      	lsls	r1, r1, #21
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002298:	4ba8      	ldr	r3, [pc, #672]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800229a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ae:	4ba4      	ldr	r3, [pc, #656]	@ (8002540 <HAL_RCC_OscConfig+0x61c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002540 <HAL_RCC_OscConfig+0x61c>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4ba0      	ldr	r3, [pc, #640]	@ (8002540 <HAL_RCC_OscConfig+0x61c>)
 80022c0:	2180      	movs	r1, #128	@ 0x80
 80022c2:	0049      	lsls	r1, r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022c8:	f7ff f9d6 	bl	8001678 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff f9d1 	bl	8001678 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e127      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e4:	4b96      	ldr	r3, [pc, #600]	@ (8002540 <HAL_RCC_OscConfig+0x61c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x3e2>
 80022f8:	4b90      	ldr	r3, [pc, #576]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80022fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fc:	4b8f      	ldr	r3, [pc, #572]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80022fe:	2101      	movs	r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x41c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x404>
 800230e:	4b8b      	ldr	r3, [pc, #556]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002312:	4b8a      	ldr	r3, [pc, #552]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002314:	2104      	movs	r1, #4
 8002316:	430a      	orrs	r2, r1
 8002318:	65da      	str	r2, [r3, #92]	@ 0x5c
 800231a:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800231c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800231e:	4b87      	ldr	r3, [pc, #540]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0x41c>
 8002328:	4b84      	ldr	r3, [pc, #528]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800232a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800232c:	4b83      	ldr	r3, [pc, #524]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002334:	4b81      	ldr	r3, [pc, #516]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002338:	4b80      	ldr	r3, [pc, #512]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800233a:	2104      	movs	r1, #4
 800233c:	438a      	bics	r2, r1
 800233e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f996 	bl	8001678 <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002350:	e009      	b.n	8002366 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff f991 	bl	8001678 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	4a79      	ldr	r2, [pc, #484]	@ (8002544 <HAL_RCC_OscConfig+0x620>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0e6      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b75      	ldr	r3, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x42e>
 8002370:	e013      	b.n	800239a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7ff f981 	bl	8001678 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800237a:	e009      	b.n	8002390 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7ff f97c 	bl	8001678 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	4a6f      	ldr	r2, [pc, #444]	@ (8002544 <HAL_RCC_OscConfig+0x620>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0d1      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002390:	4b6a      	ldr	r3, [pc, #424]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800239a:	231f      	movs	r3, #31
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b65      	ldr	r3, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a8:	4b64      	ldr	r3, [pc, #400]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023aa:	4967      	ldr	r1, [pc, #412]	@ (8002548 <HAL_RCC_OscConfig+0x624>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x496>
 80023b8:	e0bb      	b.n	8002532 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ba:	4b60      	ldr	r3, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2238      	movs	r2, #56	@ 0x38
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d100      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4a4>
 80023c6:	e07b      	b.n	80024c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d156      	bne.n	800247e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023d6:	495d      	ldr	r1, [pc, #372]	@ (800254c <HAL_RCC_OscConfig+0x628>)
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f94c 	bl	8001678 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff f947 	bl	8001678 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e09d      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	4b50      	ldr	r3, [pc, #320]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	049b      	lsls	r3, r3, #18
 8002400:	4013      	ands	r3, r2
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002404:	4b4d      	ldr	r3, [pc, #308]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a51      	ldr	r2, [pc, #324]	@ (8002550 <HAL_RCC_OscConfig+0x62c>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	431a      	orrs	r2, r3
 8002432:	4b42      	ldr	r3, [pc, #264]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b40      	ldr	r3, [pc, #256]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800243e:	2180      	movs	r1, #128	@ 0x80
 8002440:	0449      	lsls	r1, r1, #17
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 800244c:	2180      	movs	r1, #128	@ 0x80
 800244e:	0549      	lsls	r1, r1, #21
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff f910 	bl	8001678 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7ff f90b 	bl	8001678 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e061      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	049b      	lsls	r3, r3, #18
 8002478:	4013      	ands	r3, r2
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x53a>
 800247c:	e059      	b.n	8002532 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002484:	4931      	ldr	r1, [pc, #196]	@ (800254c <HAL_RCC_OscConfig+0x628>)
 8002486:	400a      	ands	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff f8f5 	bl	8001678 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff f8f0 	bl	8001678 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e046      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a6:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	049b      	lsls	r3, r3, #18
 80024ae:	4013      	ands	r3, r2
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024b2:	4b22      	ldr	r3, [pc, #136]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80024b8:	4926      	ldr	r1, [pc, #152]	@ (8002554 <HAL_RCC_OscConfig+0x630>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	e038      	b.n	8002532 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e033      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2203      	movs	r2, #3
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d126      	bne.n	800252e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2270      	movs	r2, #112	@ 0x70
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d11f      	bne.n	800252e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	23fe      	movs	r3, #254	@ 0xfe
 80024f2:	01db      	lsls	r3, r3, #7
 80024f4:	401a      	ands	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d116      	bne.n	800252e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	23f8      	movs	r3, #248	@ 0xf8
 8002504:	039b      	lsls	r3, r3, #14
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d10e      	bne.n	800252e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	23e0      	movs	r3, #224	@ 0xe0
 8002514:	051b      	lsls	r3, r3, #20
 8002516:	401a      	ands	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	0f5b      	lsrs	r3, r3, #29
 8002524:	075a      	lsls	r2, r3, #29
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b008      	add	sp, #32
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	40007000 	.word	0x40007000
 8002544:	00001388 	.word	0x00001388
 8002548:	efffffff 	.word	0xefffffff
 800254c:	feffffff 	.word	0xfeffffff
 8002550:	11c1808c 	.word	0x11c1808c
 8002554:	eefefffc 	.word	0xeefefffc

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0e9      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2207      	movs	r2, #7
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d91e      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b73      	ldr	r3, [pc, #460]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2207      	movs	r2, #7
 8002580:	4393      	bics	r3, r2
 8002582:	0019      	movs	r1, r3
 8002584:	4b70      	ldr	r3, [pc, #448]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800258c:	f7ff f874 	bl	8001678 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002594:	e009      	b.n	80025aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7ff f86f 	bl	8001678 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_RCC_ClockConfig+0x1f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0ca      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025aa:	4b67      	ldr	r3, [pc, #412]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2207      	movs	r2, #7
 80025b0:	4013      	ands	r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d006      	beq.n	80025da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025cc:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 80025d2:	21e0      	movs	r1, #224	@ 0xe0
 80025d4:	01c9      	lsls	r1, r1, #7
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a5d      	ldr	r2, [pc, #372]	@ (8002754 <HAL_RCC_ClockConfig+0x1fc>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b59      	ldr	r3, [pc, #356]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d057      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002600:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	029b      	lsls	r3, r3, #10
 8002608:	4013      	ands	r3, r2
 800260a:	d12b      	bne.n	8002664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e097      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d107      	bne.n	8002628 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002618:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	049b      	lsls	r3, r3, #18
 8002620:	4013      	ands	r3, r2
 8002622:	d11f      	bne.n	8002664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e08b      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b47      	ldr	r3, [pc, #284]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4013      	ands	r3, r2
 800263a:	d113      	bne.n	8002664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e07f      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002648:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264c:	2202      	movs	r2, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d108      	bne.n	8002664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e074      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002656:	4b3e      	ldr	r3, [pc, #248]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e06d      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2207      	movs	r2, #7
 800266a:	4393      	bics	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fffe 	bl	8001678 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002680:	e009      	b.n	8002696 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f7fe fff9 	bl	8001678 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <HAL_RCC_ClockConfig+0x1f4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e054      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2238      	movs	r2, #56	@ 0x38
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1ec      	bne.n	8002682 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2207      	movs	r2, #7
 80026ae:	4013      	ands	r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d21e      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2207      	movs	r2, #7
 80026bc:	4393      	bics	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026c8:	f7fe ffd6 	bl	8001678 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d2:	f7fe ffd1 	bl	8001678 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_RCC_ClockConfig+0x1f4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e02c      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2204      	movs	r2, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <HAL_RCC_ClockConfig+0x200>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002712:	f000 f829 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002716:	0001      	movs	r1, r0
 8002718:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	220f      	movs	r2, #15
 8002720:	401a      	ands	r2, r3
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <HAL_RCC_ClockConfig+0x204>)
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	58d3      	ldr	r3, [r2, r3]
 8002728:	221f      	movs	r2, #31
 800272a:	4013      	ands	r3, r2
 800272c:	000a      	movs	r2, r1
 800272e:	40da      	lsrs	r2, r3
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_ClockConfig+0x208>)
 8002732:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x20c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0018      	movs	r0, r3
 800273a:	f7fe fddd 	bl	80012f8 <HAL_InitTick>
 800273e:	0003      	movs	r3, r0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40022000 	.word	0x40022000
 800274c:	00001388 	.word	0x00001388
 8002750:	40021000 	.word	0x40021000
 8002754:	fffff0ff 	.word	0xfffff0ff
 8002758:	ffff8fff 	.word	0xffff8fff
 800275c:	0800716c 	.word	0x0800716c
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	4b3c      	ldr	r3, [pc, #240]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2238      	movs	r2, #56	@ 0x38
 8002774:	4013      	ands	r3, r2
 8002776:	d10f      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002778:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0adb      	lsrs	r3, r3, #11
 800277e:	2207      	movs	r2, #7
 8002780:	4013      	ands	r3, r2
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	0013      	movs	r3, r2
 8002788:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800278a:	6839      	ldr	r1, [r7, #0]
 800278c:	4835      	ldr	r0, [pc, #212]	@ (8002864 <HAL_RCC_GetSysClockFreq+0xfc>)
 800278e:	f7fd fcc3 	bl	8000118 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	e05d      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2238      	movs	r2, #56	@ 0x38
 800279e:	4013      	ands	r3, r2
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d102      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a4:	4b30      	ldr	r3, [pc, #192]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x100>)
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	e054      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2238      	movs	r2, #56	@ 0x38
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d138      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c0:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	3301      	adds	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d10d      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4824      	ldr	r0, [pc, #144]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x100>)
 80027d8:	f7fd fc9e 	bl	8000118 <__udivsi3>
 80027dc:	0003      	movs	r3, r0
 80027de:	0019      	movs	r1, r3
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	227f      	movs	r2, #127	@ 0x7f
 80027e8:	4013      	ands	r3, r2
 80027ea:	434b      	muls	r3, r1
 80027ec:	617b      	str	r3, [r7, #20]
        break;
 80027ee:	e00d      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	481c      	ldr	r0, [pc, #112]	@ (8002864 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027f4:	f7fd fc90 	bl	8000118 <__udivsi3>
 80027f8:	0003      	movs	r3, r0
 80027fa:	0019      	movs	r1, r3
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	227f      	movs	r2, #127	@ 0x7f
 8002804:	4013      	ands	r3, r2
 8002806:	434b      	muls	r3, r1
 8002808:	617b      	str	r3, [r7, #20]
        break;
 800280a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0f5b      	lsrs	r3, r3, #29
 8002812:	2207      	movs	r2, #7
 8002814:	4013      	ands	r3, r2
 8002816:	3301      	adds	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7fd fc7b 	bl	8000118 <__udivsi3>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e015      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2238      	movs	r2, #56	@ 0x38
 800282e:	4013      	ands	r3, r2
 8002830:	2b20      	cmp	r3, #32
 8002832:	d103      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2238      	movs	r2, #56	@ 0x38
 8002842:	4013      	ands	r3, r2
 8002844:	2b18      	cmp	r3, #24
 8002846:	d103      	bne.n	8002850 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002848:	23fa      	movs	r3, #250	@ 0xfa
 800284a:	01db      	lsls	r3, r3, #7
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e001      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002854:	693b      	ldr	r3, [r7, #16]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b006      	add	sp, #24
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	40021000 	.word	0x40021000
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200

0800286c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <HAL_RCC_GetHCLKFreq+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002884:	f7ff fff2 	bl	800286c <HAL_RCC_GetHCLKFreq>
 8002888:	0004      	movs	r4, r0
 800288a:	f7ff fb3f 	bl	8001f0c <LL_RCC_GetAPB1Prescaler>
 800288e:	0003      	movs	r3, r0
 8002890:	0b1a      	lsrs	r2, r3, #12
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	58d3      	ldr	r3, [r2, r3]
 8002898:	221f      	movs	r2, #31
 800289a:	4013      	ands	r3, r2
 800289c:	40dc      	lsrs	r4, r3
 800289e:	0023      	movs	r3, r4
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdb0      	pop	{r4, r5, r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	080071ac 	.word	0x080071ac

080028ac <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028bc:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_RCC_GetClockConfig+0x4c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2207      	movs	r2, #7
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_GetClockConfig+0x4c>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	23f0      	movs	r3, #240	@ 0xf0
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	401a      	ands	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_RCC_GetClockConfig+0x4c>)
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	23e0      	movs	r3, #224	@ 0xe0
 80028dc:	01db      	lsls	r3, r3, #7
 80028de:	401a      	ands	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetClockConfig+0x50>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2207      	movs	r2, #7
 80028ea:	401a      	ands	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40022000 	.word	0x40022000

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002908:	2313      	movs	r3, #19
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002910:	2312      	movs	r3, #18
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	029b      	lsls	r3, r3, #10
 8002920:	4013      	ands	r3, r2
 8002922:	d100      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002924:	e0a3      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2011      	movs	r0, #17
 8002928:	183b      	adds	r3, r7, r0
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4bc3      	ldr	r3, [pc, #780]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002932:	2380      	movs	r3, #128	@ 0x80
 8002934:	055b      	lsls	r3, r3, #21
 8002936:	4013      	ands	r3, r2
 8002938:	d110      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4bc0      	ldr	r3, [pc, #768]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293e:	4bbf      	ldr	r3, [pc, #764]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002940:	2180      	movs	r1, #128	@ 0x80
 8002942:	0549      	lsls	r1, r1, #21
 8002944:	430a      	orrs	r2, r1
 8002946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002948:	4bbc      	ldr	r3, [pc, #752]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	055b      	lsls	r3, r3, #21
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	183b      	adds	r3, r7, r0
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4bb7      	ldr	r3, [pc, #732]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002962:	2180      	movs	r1, #128	@ 0x80
 8002964:	0049      	lsls	r1, r1, #1
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296a:	f7fe fe85 	bl	8001678 <HAL_GetTick>
 800296e:	0003      	movs	r3, r0
 8002970:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002972:	e00b      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fe80 	bl	8001678 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d904      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002982:	2313      	movs	r3, #19
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
        break;
 800298a:	e005      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298c:	4bac      	ldr	r3, [pc, #688]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d0ed      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002998:	2313      	movs	r3, #19
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d154      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a2:	4ba6      	ldr	r3, [pc, #664]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029a6:	23c0      	movs	r3, #192	@ 0xc0
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d019      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d014      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029be:	4b9f      	ldr	r3, [pc, #636]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	4aa0      	ldr	r2, [pc, #640]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029cc:	4b9b      	ldr	r3, [pc, #620]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ce:	2180      	movs	r1, #128	@ 0x80
 80029d0:	0249      	lsls	r1, r1, #9
 80029d2:	430a      	orrs	r2, r1
 80029d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d6:	4b99      	ldr	r3, [pc, #612]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029da:	4b98      	ldr	r3, [pc, #608]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029dc:	499a      	ldr	r1, [pc, #616]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80029de:	400a      	ands	r2, r1
 80029e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e2:	4b96      	ldr	r3, [pc, #600]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d016      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fe42 	bl	8001678 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f8:	e00c      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fe3d 	bl	8001678 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a91      	ldr	r2, [pc, #580]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d904      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a0a:	2313      	movs	r3, #19
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2203      	movs	r2, #3
 8002a10:	701a      	strb	r2, [r3, #0]
            break;
 8002a12:	e004      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a14:	4b89      	ldr	r3, [pc, #548]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d0ed      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a1e:	2313      	movs	r3, #19
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a28:	4b84      	ldr	r3, [pc, #528]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	4a85      	ldr	r2, [pc, #532]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a36:	4b81      	ldr	r3, [pc, #516]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2213      	movs	r2, #19
 8002a44:	18ba      	adds	r2, r7, r2
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	2312      	movs	r3, #18
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2213      	movs	r2, #19
 8002a52:	18ba      	adds	r2, r7, r2
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a58:	2311      	movs	r3, #17
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a66:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a68:	4979      	ldr	r1, [pc, #484]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a78:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b6d      	ldr	r3, [pc, #436]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a96:	4b69      	ldr	r3, [pc, #420]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b65      	ldr	r3, [pc, #404]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab4:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	4a66      	ldr	r2, [pc, #408]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	4b56      	ldr	r3, [pc, #344]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af4:	4b51      	ldr	r3, [pc, #324]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	4a58      	ldr	r2, [pc, #352]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	4b4e      	ldr	r3, [pc, #312]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b12:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	4a52      	ldr	r2, [pc, #328]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	4b46      	ldr	r3, [pc, #280]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	01db      	lsls	r3, r3, #7
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d015      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b32:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	0899      	lsrs	r1, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b40:	430a      	orrs	r2, r1
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b50:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4b39      	ldr	r3, [pc, #228]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b56:	2180      	movs	r1, #128	@ 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	4013      	ands	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b6a:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b78:	4b30      	ldr	r3, [pc, #192]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	039b      	lsls	r3, r3, #14
 8002b86:	4013      	ands	r3, r2
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	03db      	lsls	r3, r3, #15
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4b23      	ldr	r3, [pc, #140]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb0:	2180      	movs	r1, #128	@ 0x80
 8002bb2:	0449      	lsls	r1, r1, #17
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	03db      	lsls	r3, r3, #15
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	045b      	lsls	r3, r3, #17
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002be4:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	0449      	lsls	r1, r1, #17
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	01db      	lsls	r3, r3, #7
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c24:	2180      	movs	r1, #128	@ 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c2c:	2312      	movs	r3, #18
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b006      	add	sp, #24
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	fffffcff 	.word	0xfffffcff
 8002c48:	fffeffff 	.word	0xfffeffff
 8002c4c:	00001388 	.word	0x00001388
 8002c50:	efffffff 	.word	0xefffffff
 8002c54:	fffff3ff 	.word	0xfffff3ff
 8002c58:	fff3ffff 	.word	0xfff3ffff
 8002c5c:	ffcfffff 	.word	0xffcfffff
 8002c60:	ffffcfff 	.word	0xffffcfff
 8002c64:	ffbfffff 	.word	0xffbfffff
 8002c68:	feffffff 	.word	0xfeffffff
 8002c6c:	ffff3fff 	.word	0xffff3fff

08002c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0a8      	b.n	8002dd4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	2382      	movs	r3, #130	@ 0x82
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d009      	beq.n	8002caa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	e005      	b.n	8002caa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	225d      	movs	r2, #93	@ 0x5d
 8002cb4:	5c9b      	ldrb	r3, [r3, r2]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225c      	movs	r2, #92	@ 0x5c
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fe f9d0 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	225d      	movs	r2, #93	@ 0x5d
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2140      	movs	r1, #64	@ 0x40
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	23e0      	movs	r3, #224	@ 0xe0
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e002      	b.n	8002cfc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	015b      	lsls	r3, r3, #5
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	23f0      	movs	r3, #240	@ 0xf0
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d008      	beq.n	8002d1a <HAL_SPI_Init+0xaa>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	23e0      	movs	r3, #224	@ 0xe0
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	2382      	movs	r3, #130	@ 0x82
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6899      	ldr	r1, [r3, #8]
 8002d28:	2384      	movs	r3, #132	@ 0x84
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2102      	movs	r1, #2
 8002d36:	400b      	ands	r3, r1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	400b      	ands	r3, r1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6999      	ldr	r1, [r3, #24]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2138      	movs	r1, #56	@ 0x38
 8002d56:	400b      	ands	r3, r1
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	2180      	movs	r1, #128	@ 0x80
 8002d60:	400b      	ands	r3, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	0011      	movs	r1, r2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	401a      	ands	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	2204      	movs	r2, #4
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2110      	movs	r1, #16
 8002d88:	400b      	ands	r3, r1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d90:	2108      	movs	r1, #8
 8002d92:	400b      	ands	r3, r1
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	23f0      	movs	r3, #240	@ 0xf0
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	400b      	ands	r3, r1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	0011      	movs	r1, r2
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	015b      	lsls	r3, r3, #5
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4907      	ldr	r1, [pc, #28]	@ (8002ddc <HAL_SPI_Init+0x16c>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	225d      	movs	r2, #93	@ 0x5d
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffff7ff 	.word	0xfffff7ff

08002de0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b089      	sub	sp, #36	@ 0x24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df0:	2117      	movs	r1, #23
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	225d      	movs	r2, #93	@ 0x5d
 8002dfc:	5c9b      	ldrb	r3, [r3, r2]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d003      	beq.n	8002e0c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e0a:	e12b      	b.n	8003064 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	2382      	movs	r3, #130	@ 0x82
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d113      	bne.n	8002e40 <HAL_SPI_Receive+0x60>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	225d      	movs	r2, #93	@ 0x5d
 8002e24:	2104      	movs	r1, #4
 8002e26:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	881c      	ldrh	r4, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	0023      	movs	r3, r4
 8002e38:	f000 f924 	bl	8003084 <HAL_SPI_TransmitReceive>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	e118      	b.n	8003072 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	225c      	movs	r2, #92	@ 0x5c
 8002e44:	5c9b      	ldrb	r3, [r3, r2]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Receive+0x6e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e111      	b.n	8003072 <HAL_SPI_Receive+0x292>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	225c      	movs	r2, #92	@ 0x5c
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e56:	f7fe fc0f 	bl	8001678 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_SPI_Receive+0x8c>
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002e6c:	2317      	movs	r3, #23
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e74:	e0f6      	b.n	8003064 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	225d      	movs	r2, #93	@ 0x5d
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1dba      	adds	r2, r7, #6
 8002e8e:	2144      	movs	r1, #68	@ 0x44
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1dba      	adds	r2, r7, #6
 8002e98:	2146      	movs	r1, #70	@ 0x46
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	23e0      	movs	r3, #224	@ 0xe0
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d908      	bls.n	8002eda <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	496a      	ldr	r1, [pc, #424]	@ (800307c <HAL_SPI_Receive+0x29c>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e008      	b.n	8002eec <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	0149      	lsls	r1, r1, #5
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10f      	bne.n	8002f18 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2140      	movs	r1, #64	@ 0x40
 8002f04:	438a      	bics	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	495b      	ldr	r1, [pc, #364]	@ (8003080 <HAL_SPI_Receive+0x2a0>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2240      	movs	r2, #64	@ 0x40
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d007      	beq.n	8002f36 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2140      	movs	r1, #64	@ 0x40
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	23e0      	movs	r3, #224	@ 0xe0
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d900      	bls.n	8002f44 <HAL_SPI_Receive+0x164>
 8002f42:	e071      	b.n	8003028 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f44:	e035      	b.n	8002fb2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d117      	bne.n	8002f84 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2246      	movs	r2, #70	@ 0x46
 8002f74:	5a9b      	ldrh	r3, [r3, r2]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2246      	movs	r2, #70	@ 0x46
 8002f80:	5299      	strh	r1, [r3, r2]
 8002f82:	e016      	b.n	8002fb2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f84:	f7fe fb78 	bl	8001678 <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d802      	bhi.n	8002f9a <HAL_SPI_Receive+0x1ba>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_SPI_Receive+0x1c0>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002fa0:	2317      	movs	r3, #23
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	225d      	movs	r2, #93	@ 0x5d
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]
          goto error;
 8002fb0:	e058      	b.n	8003064 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2246      	movs	r2, #70	@ 0x46
 8002fb6:	5a9b      	ldrh	r3, [r3, r2]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1c3      	bne.n	8002f46 <HAL_SPI_Receive+0x166>
 8002fbe:	e039      	b.n	8003034 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2246      	movs	r2, #70	@ 0x46
 8002fea:	5a9b      	ldrh	r3, [r3, r2]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b299      	uxth	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2246      	movs	r2, #70	@ 0x46
 8002ff6:	5299      	strh	r1, [r3, r2]
 8002ff8:	e016      	b.n	8003028 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffa:	f7fe fb3d 	bl	8001678 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d802      	bhi.n	8003010 <HAL_SPI_Receive+0x230>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	d102      	bne.n	8003016 <HAL_SPI_Receive+0x236>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d108      	bne.n	8003028 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003016:	2317      	movs	r3, #23
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2203      	movs	r2, #3
 800301c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	225d      	movs	r2, #93	@ 0x5d
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]
          goto error;
 8003026:	e01d      	b.n	8003064 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2246      	movs	r2, #70	@ 0x46
 800302c:	5a9b      	ldrh	r3, [r3, r2]
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1c5      	bne.n	8002fc0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fb34 	bl	80036a8 <SPI_EndRxTransaction>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d002      	beq.n	800304a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003052:	2317      	movs	r3, #23
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e003      	b.n	8003064 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	225d      	movs	r2, #93	@ 0x5d
 8003060:	2101      	movs	r1, #1
 8003062:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	225c      	movs	r2, #92	@ 0x5c
 8003068:	2100      	movs	r1, #0
 800306a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800306c:	2317      	movs	r3, #23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781b      	ldrb	r3, [r3, #0]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b007      	add	sp, #28
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	ffffefff 	.word	0xffffefff
 8003080:	ffffbfff 	.word	0xffffbfff

08003084 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	001a      	movs	r2, r3
 8003092:	1cbb      	adds	r3, r7, #2
 8003094:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800309a:	2323      	movs	r3, #35	@ 0x23
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	225c      	movs	r2, #92	@ 0x5c
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x2c>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e1c4      	b.n	800343a <HAL_SPI_TransmitReceive+0x3b6>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	225c      	movs	r2, #92	@ 0x5c
 80030b4:	2101      	movs	r1, #1
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030b8:	f7fe fade 	bl	8001678 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c0:	201b      	movs	r0, #27
 80030c2:	183b      	adds	r3, r7, r0
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	215d      	movs	r1, #93	@ 0x5d
 80030c8:	5c52      	ldrb	r2, [r2, r1]
 80030ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030d2:	2312      	movs	r3, #18
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	1cba      	adds	r2, r7, #2
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d011      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x84>
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	2382      	movs	r3, #130	@ 0x82
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d107      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x7a>
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d004      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80030fe:	2323      	movs	r3, #35	@ 0x23
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
    goto error;
 8003106:	e191      	b.n	800342c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <HAL_SPI_TransmitReceive+0x98>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_SPI_TransmitReceive+0x98>
 8003114:	1cbb      	adds	r3, r7, #2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800311c:	2323      	movs	r3, #35	@ 0x23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
    goto error;
 8003124:	e182      	b.n	800342c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	225d      	movs	r2, #93	@ 0x5d
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b04      	cmp	r3, #4
 8003130:	d003      	beq.n	800313a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	225d      	movs	r2, #93	@ 0x5d
 8003136:	2105      	movs	r1, #5
 8003138:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1cba      	adds	r2, r7, #2
 800314a:	2146      	movs	r1, #70	@ 0x46
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1cba      	adds	r2, r7, #2
 8003154:	2144      	movs	r1, #68	@ 0x44
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1cba      	adds	r2, r7, #2
 8003164:	8812      	ldrh	r2, [r2, #0]
 8003166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1cba      	adds	r2, r7, #2
 800316c:	8812      	ldrh	r2, [r2, #0]
 800316e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	23e0      	movs	r3, #224	@ 0xe0
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	429a      	cmp	r2, r3
 8003186:	d908      	bls.n	800319a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	49ac      	ldr	r1, [pc, #688]	@ (8003444 <HAL_SPI_TransmitReceive+0x3c0>)
 8003194:	400a      	ands	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	e008      	b.n	80031ac <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	0149      	lsls	r1, r1, #5
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d007      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2140      	movs	r1, #64	@ 0x40
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	23e0      	movs	r3, #224	@ 0xe0
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d800      	bhi.n	80031d8 <HAL_SPI_TransmitReceive+0x154>
 80031d6:	e083      	b.n	80032e0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x168>
 80031e0:	2312      	movs	r3, #18
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d000      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x168>
 80031ea:	e06d      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003210:	e05a      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d11b      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x1d4>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x1d4>
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d113      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	1c9a      	adds	r2, r3, #2
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	2b01      	cmp	r3, #1
 8003264:	d11c      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x21c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2246      	movs	r2, #70	@ 0x46
 800326a:	5a9b      	ldrh	r3, [r3, r2]
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	b292      	uxth	r2, r2
 800327e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2246      	movs	r2, #70	@ 0x46
 800328e:	5a9b      	ldrh	r3, [r3, r2]
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b299      	uxth	r1, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2246      	movs	r2, #70	@ 0x46
 800329a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800329c:	2301      	movs	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032a0:	f7fe f9ea 	bl	8001678 <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d80b      	bhi.n	80032c8 <HAL_SPI_TransmitReceive+0x244>
 80032b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b2:	3301      	adds	r3, #1
 80032b4:	d008      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80032b6:	2323      	movs	r3, #35	@ 0x23
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2203      	movs	r2, #3
 80032bc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	225d      	movs	r2, #93	@ 0x5d
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
        goto error;
 80032c6:	e0b1      	b.n	800342c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d19f      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x18e>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2246      	movs	r2, #70	@ 0x46
 80032d6:	5a9b      	ldrh	r3, [r3, r2]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d199      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x18e>
 80032de:	e089      	b.n	80033f4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x270>
 80032e8:	2312      	movs	r3, #18
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d000      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x270>
 80032f2:	e074      	b.n	80033de <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331a:	e060      	b.n	80033de <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d11c      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x2e0>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d017      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x2e0>
 8003334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003336:	2b01      	cmp	r3, #1
 8003338:	d114      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11e      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x32c>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2246      	movs	r2, #70	@ 0x46
 8003376:	5a9b      	ldrh	r3, [r3, r2]
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	001a      	movs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2246      	movs	r2, #70	@ 0x46
 800339e:	5a9b      	ldrh	r3, [r3, r2]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b299      	uxth	r1, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2246      	movs	r2, #70	@ 0x46
 80033aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b0:	f7fe f962 	bl	8001678 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033bc:	429a      	cmp	r2, r3
 80033be:	d802      	bhi.n	80033c6 <HAL_SPI_TransmitReceive+0x342>
 80033c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c2:	3301      	adds	r3, #1
 80033c4:	d102      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x348>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d108      	bne.n	80033de <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80033cc:	2323      	movs	r3, #35	@ 0x23
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2203      	movs	r2, #3
 80033d2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	225d      	movs	r2, #93	@ 0x5d
 80033d8:	2101      	movs	r1, #1
 80033da:	5499      	strb	r1, [r3, r2]
        goto error;
 80033dc:	e026      	b.n	800342c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d199      	bne.n	800331c <HAL_SPI_TransmitReceive+0x298>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2246      	movs	r2, #70	@ 0x46
 80033ec:	5a9b      	ldrh	r3, [r3, r2]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d193      	bne.n	800331c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f9b2 	bl	8003764 <SPI_EndRxTxTransaction>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d006      	beq.n	8003412 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003404:	2323      	movs	r3, #35	@ 0x23
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800341a:	2323      	movs	r3, #35	@ 0x23
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e003      	b.n	800342c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	225d      	movs	r2, #93	@ 0x5d
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	225c      	movs	r2, #92	@ 0x5c
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003434:	2323      	movs	r3, #35	@ 0x23
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	781b      	ldrb	r3, [r3, #0]
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b00a      	add	sp, #40	@ 0x28
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	ffffefff 	.word	0xffffefff

08003448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003458:	f7fe f90e 	bl	8001678 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003468:	f7fe f906 	bl	8001678 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	015b      	lsls	r3, r3, #5
 8003476:	0d1b      	lsrs	r3, r3, #20
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	4353      	muls	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	e058      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	d055      	beq.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003486:	f7fe f8f7 	bl	8001678 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d902      	bls.n	800349c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d142      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	21e0      	movs	r1, #224	@ 0xe0
 80034a8:	438a      	bics	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	2382      	movs	r3, #130	@ 0x82
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d113      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d005      	beq.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d107      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2140      	movs	r1, #64	@ 0x40
 80034dc:	438a      	bics	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	019b      	lsls	r3, r3, #6
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d110      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	491a      	ldr	r1, [pc, #104]	@ (8003560 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	0189      	lsls	r1, r1, #6
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	225d      	movs	r2, #93	@ 0x5d
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	225c      	movs	r2, #92	@ 0x5c
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e017      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	425a      	negs	r2, r3
 8003542:	4153      	adcs	r3, r2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	001a      	movs	r2, r3
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d197      	bne.n	8003480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b008      	add	sp, #32
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	20000000 	.word	0x20000000
 8003560:	ffffdfff 	.word	0xffffdfff

08003564 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800357a:	f7fe f87d 	bl	8001678 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	18d3      	adds	r3, r2, r3
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800358a:	f7fe f875 	bl	8001678 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800359a:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	0013      	movs	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	00da      	lsls	r2, r3, #3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	0d1b      	lsrs	r3, r3, #20
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	4353      	muls	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035b0:	e068      	b.n	8003684 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	23c0      	movs	r3, #192	@ 0xc0
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10a      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d107      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	2117      	movs	r1, #23
 80035ca:	187b      	adds	r3, r7, r1
 80035cc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	d055      	beq.n	8003684 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d8:	f7fe f84e 	bl	8001678 <HAL_GetTick>
 80035dc:	0002      	movs	r2, r0
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d902      	bls.n	80035ee <SPI_WaitFifoStateUntilTimeout+0x8a>
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d142      	bne.n	8003674 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	21e0      	movs	r1, #224	@ 0xe0
 80035fa:	438a      	bics	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	2382      	movs	r3, #130	@ 0x82
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	429a      	cmp	r2, r3
 8003608:	d113      	bne.n	8003632 <SPI_WaitFifoStateUntilTimeout+0xce>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	429a      	cmp	r2, r3
 8003614:	d005      	beq.n	8003622 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	429a      	cmp	r2, r3
 8003620:	d107      	bne.n	8003632 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2140      	movs	r1, #64	@ 0x40
 800362e:	438a      	bics	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	429a      	cmp	r2, r3
 800363c:	d110      	bne.n	8003660 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4916      	ldr	r1, [pc, #88]	@ (80036a4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800364a:	400a      	ands	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0189      	lsls	r1, r1, #6
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	225d      	movs	r2, #93	@ 0x5d
 8003664:	2101      	movs	r1, #1
 8003666:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	225c      	movs	r2, #92	@ 0x5c
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e010      	b.n	8003696 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	3b01      	subs	r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d18e      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b00a      	add	sp, #40	@ 0x28
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	20000000 	.word	0x20000000
 80036a4:	ffffdfff 	.word	0xffffdfff

080036a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	2382      	movs	r3, #130	@ 0x82
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	429a      	cmp	r2, r3
 80036be:	d113      	bne.n	80036e8 <SPI_EndRxTransaction+0x40>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d005      	beq.n	80036d8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2140      	movs	r1, #64	@ 0x40
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	0013      	movs	r3, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	2180      	movs	r1, #128	@ 0x80
 80036f6:	f7ff fea7 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	2220      	movs	r2, #32
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e026      	b.n	800375c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	2382      	movs	r3, #130	@ 0x82
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	429a      	cmp	r2, r3
 8003718:	d11f      	bne.n	800375a <SPI_EndRxTransaction+0xb2>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	429a      	cmp	r2, r3
 8003724:	d005      	beq.n	8003732 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	429a      	cmp	r2, r3
 8003730:	d113      	bne.n	800375a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	23c0      	movs	r3, #192	@ 0xc0
 8003736:	00d9      	lsls	r1, r3, #3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	0013      	movs	r3, r2
 8003740:	2200      	movs	r2, #0
 8003742:	f7ff ff0f 	bl	8003564 <SPI_WaitFifoStateUntilTimeout>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d007      	beq.n	800375a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	2220      	movs	r2, #32
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e000      	b.n	800375c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b004      	add	sp, #16
 8003762:	bd80      	pop	{r7, pc}

08003764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	23c0      	movs	r3, #192	@ 0xc0
 8003774:	0159      	lsls	r1, r3, #5
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	0013      	movs	r3, r2
 800377e:	2200      	movs	r2, #0
 8003780:	f7ff fef0 	bl	8003564 <SPI_WaitFifoStateUntilTimeout>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d007      	beq.n	8003798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	2220      	movs	r2, #32
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e027      	b.n	80037e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	0013      	movs	r3, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	f7ff fe4f 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d007      	beq.n	80037be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b2:	2220      	movs	r2, #32
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e014      	b.n	80037e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	23c0      	movs	r3, #192	@ 0xc0
 80037c2:	00d9      	lsls	r1, r3, #3
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	0013      	movs	r3, r2
 80037cc:	2200      	movs	r2, #0
 80037ce:	f7ff fec9 	bl	8003564 <SPI_WaitFifoStateUntilTimeout>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d007      	beq.n	80037e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	2220      	movs	r2, #32
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e000      	b.n	80037e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e04a      	b.n	8003898 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	223d      	movs	r2, #61	@ 0x3d
 8003806:	5c9b      	ldrb	r3, [r3, r2]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223c      	movs	r2, #60	@ 0x3c
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f841 	bl	80038a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223d      	movs	r2, #61	@ 0x3d
 8003822:	2102      	movs	r1, #2
 8003824:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f000 f9c1 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2248      	movs	r2, #72	@ 0x48
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223e      	movs	r2, #62	@ 0x3e
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223f      	movs	r2, #63	@ 0x3f
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2240      	movs	r2, #64	@ 0x40
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2241      	movs	r2, #65	@ 0x41
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2242      	movs	r2, #66	@ 0x42
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2243      	movs	r2, #67	@ 0x43
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2244      	movs	r2, #68	@ 0x44
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2245      	movs	r2, #69	@ 0x45
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2246      	movs	r2, #70	@ 0x46
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2247      	movs	r2, #71	@ 0x47
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	223d      	movs	r2, #61	@ 0x3d
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	223d      	movs	r2, #61	@ 0x3d
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e042      	b.n	800394e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223d      	movs	r2, #61	@ 0x3d
 80038cc:	2102      	movs	r1, #2
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <HAL_TIM_Base_Start_IT+0xa8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <HAL_TIM_Base_Start_IT+0x5a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	05db      	lsls	r3, r3, #23
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d009      	beq.n	800390a <HAL_TIM_Base_Start_IT+0x5a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a18      	ldr	r2, [pc, #96]	@ (800395c <HAL_TIM_Base_Start_IT+0xac>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIM_Base_Start_IT+0x5a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <HAL_TIM_Base_Start_IT+0xb0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d116      	bne.n	8003938 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a14      	ldr	r2, [pc, #80]	@ (8003964 <HAL_TIM_Base_Start_IT+0xb4>)
 8003912:	4013      	ands	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b06      	cmp	r3, #6
 800391a:	d016      	beq.n	800394a <HAL_TIM_Base_Start_IT+0x9a>
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	429a      	cmp	r2, r3
 8003924:	d011      	beq.n	800394a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	e008      	b.n	800394a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e000      	b.n	800394c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b004      	add	sp, #16
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40000400 	.word	0x40000400
 8003960:	40014000 	.word	0x40014000
 8003964:	00010007 	.word	0x00010007

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	d021      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2202      	movs	r2, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2203      	movs	r2, #3
 8003996:	4252      	negs	r2, r2
 8003998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f8ea 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e007      	b.n	80039c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f8dd 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f8e9 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2204      	movs	r2, #4
 80039d0:	4013      	ands	r3, r2
 80039d2:	d022      	beq.n	8003a1a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2204      	movs	r2, #4
 80039d8:	4013      	ands	r3, r2
 80039da:	d01e      	beq.n	8003a1a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2205      	movs	r2, #5
 80039e2:	4252      	negs	r2, r2
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	23c0      	movs	r3, #192	@ 0xc0
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4013      	ands	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f8c3 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 8003a02:	e007      	b.n	8003a14 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 f8b6 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 f8c2 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d021      	beq.n	8003a66 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2208      	movs	r2, #8
 8003a26:	4013      	ands	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2209      	movs	r2, #9
 8003a30:	4252      	negs	r2, r2
 8003a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4013      	ands	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 f89d 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 8003a4e:	e007      	b.n	8003a60 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f890 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f89c 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2210      	movs	r2, #16
 8003a72:	4013      	ands	r3, r2
 8003a74:	d01e      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2211      	movs	r2, #17
 8003a7c:	4252      	negs	r2, r2
 8003a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2208      	movs	r2, #8
 8003a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	23c0      	movs	r3, #192	@ 0xc0
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4013      	ands	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f876 	bl	8003b88 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e007      	b.n	8003aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 f869 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f875 	bl	8003b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00c      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d008      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4252      	negs	r2, r2
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fd fa7b 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	4013      	ands	r3, r2
 8003adc:	d104      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	019b      	lsls	r3, r3, #6
 8003ae4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ae6:	d00b      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	4013      	ands	r3, r2
 8003aee:	d007      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b70 <HAL_TIM_IRQHandler+0x208>)
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 f8f2 	bl	8003ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <HAL_TIM_IRQHandler+0x20c>)
 8003b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f8e9 	bl	8003cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2240      	movs	r2, #64	@ 0x40
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00c      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2240      	movs	r2, #64	@ 0x40
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d008      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2241      	movs	r2, #65	@ 0x41
 8003b38:	4252      	negs	r2, r2
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 f832 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00c      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	4013      	ands	r3, r2
 8003b52:	d008      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2221      	movs	r2, #33	@ 0x21
 8003b5a:	4252      	negs	r2, r2
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f8b7 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b004      	add	sp, #16
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	ffffdf7f 	.word	0xffffdf7f
 8003b74:	fffffeff 	.word	0xfffffeff

08003b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb8 <TIM_Base_SetConfig+0x100>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d008      	beq.n	8003be2 <TIM_Base_SetConfig+0x2a>
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	2380      	movs	r3, #128	@ 0x80
 8003bd4:	05db      	lsls	r3, r3, #23
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0x2a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <TIM_Base_SetConfig+0x104>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2270      	movs	r2, #112	@ 0x70
 8003be6:	4393      	bics	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a30      	ldr	r2, [pc, #192]	@ (8003cb8 <TIM_Base_SetConfig+0x100>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	05db      	lsls	r3, r3, #23
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <TIM_Base_SetConfig+0x104>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <TIM_Base_SetConfig+0x108>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc4 <TIM_Base_SetConfig+0x10c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <TIM_Base_SetConfig+0x110>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x76>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <TIM_Base_SetConfig+0x114>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a27      	ldr	r2, [pc, #156]	@ (8003cd0 <TIM_Base_SetConfig+0x118>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2280      	movs	r2, #128	@ 0x80
 8003c44:	4393      	bics	r3, r2
 8003c46:	001a      	movs	r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <TIM_Base_SetConfig+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0xce>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a14      	ldr	r2, [pc, #80]	@ (8003cc4 <TIM_Base_SetConfig+0x10c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0xce>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	@ (8003cc8 <TIM_Base_SetConfig+0x110>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0xce>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a12      	ldr	r2, [pc, #72]	@ (8003ccc <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d103      	bne.n	8003c8e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	001a      	movs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]
  }
}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40002000 	.word	0x40002000
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800
 8003cd0:	fffffcff 	.word	0xfffffcff

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cec:	46c0      	nop			@ (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e046      	b.n	8003da4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2288      	movs	r2, #136	@ 0x88
 8003d1a:	589b      	ldr	r3, [r3, r2]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2284      	movs	r2, #132	@ 0x84
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fd f9ea 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2288      	movs	r2, #136	@ 0x88
 8003d34:	2124      	movs	r1, #36	@ 0x24
 8003d36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 ff2e 	bl	8004bb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fc6c 	bl	8004638 <UART_SetConfig>
 8003d60:	0003      	movs	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e01c      	b.n	8003da4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	490d      	ldr	r1, [pc, #52]	@ (8003dac <HAL_UART_Init+0xa8>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	212a      	movs	r1, #42	@ 0x2a
 8003d86:	438a      	bics	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 ffbd 	bl	8004d1c <UART_CheckIdleState>
 8003da2:	0003      	movs	r3, r0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	ffffb7ff 	.word	0xffffb7ff

08003db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	@ 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	1dbb      	adds	r3, r7, #6
 8003dbe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2288      	movs	r2, #136	@ 0x88
 8003dc4:	589b      	ldr	r3, [r3, r2]
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d000      	beq.n	8003dcc <HAL_UART_Transmit+0x1c>
 8003dca:	e090      	b.n	8003eee <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_Transmit+0x2a>
 8003dd2:	1dbb      	adds	r3, r7, #6
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e088      	b.n	8003ef0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	015b      	lsls	r3, r3, #5
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d109      	bne.n	8003dfe <HAL_UART_Transmit+0x4e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	d001      	beq.n	8003dfe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e078      	b.n	8003ef0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2290      	movs	r2, #144	@ 0x90
 8003e02:	2100      	movs	r1, #0
 8003e04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2288      	movs	r2, #136	@ 0x88
 8003e0a:	2121      	movs	r1, #33	@ 0x21
 8003e0c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0e:	f7fd fc33 	bl	8001678 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1dba      	adds	r2, r7, #6
 8003e1a:	2154      	movs	r1, #84	@ 0x54
 8003e1c:	8812      	ldrh	r2, [r2, #0]
 8003e1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1dba      	adds	r2, r7, #6
 8003e24:	2156      	movs	r1, #86	@ 0x56
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	015b      	lsls	r3, r3, #5
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d108      	bne.n	8003e48 <HAL_UART_Transmit+0x98>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e003      	b.n	8003e50 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e50:	e030      	b.n	8003eb4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2180      	movs	r1, #128	@ 0x80
 8003e60:	f001 f806 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2288      	movs	r2, #136	@ 0x88
 8003e6c:	2120      	movs	r1, #32
 8003e6e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e03d      	b.n	8003ef0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	05d2      	lsls	r2, r2, #23
 8003e86:	0dd2      	lsrs	r2, r2, #23
 8003e88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e007      	b.n	8003ea2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2256      	movs	r2, #86	@ 0x56
 8003ea6:	5a9b      	ldrh	r3, [r3, r2]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b299      	uxth	r1, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2256      	movs	r2, #86	@ 0x56
 8003eb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2256      	movs	r2, #86	@ 0x56
 8003eb8:	5a9b      	ldrh	r3, [r3, r2]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1c8      	bne.n	8003e52 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0013      	movs	r3, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2140      	movs	r1, #64	@ 0x40
 8003ece:	f000 ffcf 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2288      	movs	r2, #136	@ 0x88
 8003eda:	2120      	movs	r1, #32
 8003edc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e006      	b.n	8003ef0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2288      	movs	r2, #136	@ 0x88
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b008      	add	sp, #32
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	228c      	movs	r2, #140	@ 0x8c
 8003f0a:	589b      	ldr	r3, [r3, r2]
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d14a      	bne.n	8003fa6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_UART_Receive_IT+0x26>
 8003f16:	1dbb      	adds	r3, r7, #6
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e042      	b.n	8003fa8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	015b      	lsls	r3, r3, #5
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d109      	bne.n	8003f42 <HAL_UART_Receive_IT+0x4a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d001      	beq.n	8003f42 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e032      	b.n	8003fa8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <HAL_UART_Receive_IT+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d020      	beq.n	8003f94 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d019      	beq.n	8003f94 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	613b      	str	r3, [r7, #16]
  return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2180      	movs	r1, #128	@ 0x80
 8003f82:	04c9      	lsls	r1, r1, #19
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f94:	1dbb      	adds	r3, r7, #6
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 ffd7 	bl	8004f50 <UART_Start_Receive_IT>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	e000      	b.n	8003fa8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b008      	add	sp, #32
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40008000 	.word	0x40008000

08003fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b0aa      	sub	sp, #168	@ 0xa8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	22a4      	movs	r2, #164	@ 0xa4
 8003fc4:	18b9      	adds	r1, r7, r2
 8003fc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	20a0      	movs	r0, #160	@ 0xa0
 8003fd0:	1839      	adds	r1, r7, r0
 8003fd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	249c      	movs	r4, #156	@ 0x9c
 8003fdc:	1939      	adds	r1, r7, r4
 8003fde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fe0:	0011      	movs	r1, r2
 8003fe2:	18bb      	adds	r3, r7, r2
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4aa2      	ldr	r2, [pc, #648]	@ (8004270 <HAL_UART_IRQHandler+0x2bc>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2298      	movs	r2, #152	@ 0x98
 8003fec:	18bd      	adds	r5, r7, r2
 8003fee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003ff0:	18bb      	adds	r3, r7, r2
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11a      	bne.n	800402e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	4013      	ands	r3, r2
 8004000:	d015      	beq.n	800402e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004002:	183b      	adds	r3, r7, r0
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2220      	movs	r2, #32
 8004008:	4013      	ands	r3, r2
 800400a:	d105      	bne.n	8004018 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800400c:	193b      	adds	r3, r7, r4
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4013      	ands	r3, r2
 8004016:	d00a      	beq.n	800402e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401c:	2b00      	cmp	r3, #0
 800401e:	d100      	bne.n	8004022 <HAL_UART_IRQHandler+0x6e>
 8004020:	e2dc      	b.n	80045dc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	0010      	movs	r0, r2
 800402a:	4798      	blx	r3
      }
      return;
 800402c:	e2d6      	b.n	80045dc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800402e:	2398      	movs	r3, #152	@ 0x98
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d100      	bne.n	800403a <HAL_UART_IRQHandler+0x86>
 8004038:	e122      	b.n	8004280 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800403a:	239c      	movs	r3, #156	@ 0x9c
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a8c      	ldr	r2, [pc, #560]	@ (8004274 <HAL_UART_IRQHandler+0x2c0>)
 8004042:	4013      	ands	r3, r2
 8004044:	d106      	bne.n	8004054 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004046:	23a0      	movs	r3, #160	@ 0xa0
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a8a      	ldr	r2, [pc, #552]	@ (8004278 <HAL_UART_IRQHandler+0x2c4>)
 800404e:	4013      	ands	r3, r2
 8004050:	d100      	bne.n	8004054 <HAL_UART_IRQHandler+0xa0>
 8004052:	e115      	b.n	8004280 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004054:	23a4      	movs	r3, #164	@ 0xa4
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	4013      	ands	r3, r2
 800405e:	d012      	beq.n	8004086 <HAL_UART_IRQHandler+0xd2>
 8004060:	23a0      	movs	r3, #160	@ 0xa0
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4013      	ands	r3, r2
 800406c:	d00b      	beq.n	8004086 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2290      	movs	r2, #144	@ 0x90
 800407a:	589b      	ldr	r3, [r3, r2]
 800407c:	2201      	movs	r2, #1
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2190      	movs	r1, #144	@ 0x90
 8004084:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004086:	23a4      	movs	r3, #164	@ 0xa4
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d011      	beq.n	80040b6 <HAL_UART_IRQHandler+0x102>
 8004092:	239c      	movs	r3, #156	@ 0x9c
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	4013      	ands	r3, r2
 800409c:	d00b      	beq.n	80040b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2202      	movs	r2, #2
 80040a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2290      	movs	r2, #144	@ 0x90
 80040aa:	589b      	ldr	r3, [r3, r2]
 80040ac:	2204      	movs	r2, #4
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2190      	movs	r1, #144	@ 0x90
 80040b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040b6:	23a4      	movs	r3, #164	@ 0xa4
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2204      	movs	r2, #4
 80040be:	4013      	ands	r3, r2
 80040c0:	d011      	beq.n	80040e6 <HAL_UART_IRQHandler+0x132>
 80040c2:	239c      	movs	r3, #156	@ 0x9c
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2201      	movs	r2, #1
 80040ca:	4013      	ands	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2204      	movs	r2, #4
 80040d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2290      	movs	r2, #144	@ 0x90
 80040da:	589b      	ldr	r3, [r3, r2]
 80040dc:	2202      	movs	r2, #2
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2190      	movs	r1, #144	@ 0x90
 80040e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040e6:	23a4      	movs	r3, #164	@ 0xa4
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	4013      	ands	r3, r2
 80040f0:	d017      	beq.n	8004122 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040f2:	23a0      	movs	r3, #160	@ 0xa0
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	4013      	ands	r3, r2
 80040fc:	d105      	bne.n	800410a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040fe:	239c      	movs	r3, #156	@ 0x9c
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5b      	ldr	r2, [pc, #364]	@ (8004274 <HAL_UART_IRQHandler+0x2c0>)
 8004106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2290      	movs	r2, #144	@ 0x90
 8004116:	589b      	ldr	r3, [r3, r2]
 8004118:	2208      	movs	r2, #8
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2190      	movs	r1, #144	@ 0x90
 8004120:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004122:	23a4      	movs	r3, #164	@ 0xa4
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4013      	ands	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_UART_IRQHandler+0x1a4>
 8004130:	23a0      	movs	r3, #160	@ 0xa0
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	04db      	lsls	r3, r3, #19
 800413a:	4013      	ands	r3, r2
 800413c:	d00c      	beq.n	8004158 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	0112      	lsls	r2, r2, #4
 8004146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2290      	movs	r2, #144	@ 0x90
 800414c:	589b      	ldr	r3, [r3, r2]
 800414e:	2220      	movs	r2, #32
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2190      	movs	r1, #144	@ 0x90
 8004156:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2290      	movs	r2, #144	@ 0x90
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d100      	bne.n	8004164 <HAL_UART_IRQHandler+0x1b0>
 8004162:	e23d      	b.n	80045e0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004164:	23a4      	movs	r3, #164	@ 0xa4
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2220      	movs	r2, #32
 800416c:	4013      	ands	r3, r2
 800416e:	d015      	beq.n	800419c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004170:	23a0      	movs	r3, #160	@ 0xa0
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2220      	movs	r2, #32
 8004178:	4013      	ands	r3, r2
 800417a:	d106      	bne.n	800418a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800417c:	239c      	movs	r3, #156	@ 0x9c
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	055b      	lsls	r3, r3, #21
 8004186:	4013      	ands	r3, r2
 8004188:	d008      	beq.n	800419c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	0010      	movs	r0, r2
 800419a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2290      	movs	r2, #144	@ 0x90
 80041a0:	589b      	ldr	r3, [r3, r2]
 80041a2:	2194      	movs	r1, #148	@ 0x94
 80041a4:	187a      	adds	r2, r7, r1
 80041a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2240      	movs	r2, #64	@ 0x40
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d004      	beq.n	80041c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2228      	movs	r2, #40	@ 0x28
 80041bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	d04c      	beq.n	800425a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 ffe8 	bl	8005198 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	d13c      	bne.n	8004250 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d6:	f3ef 8310 	mrs	r3, PRIMASK
 80041da:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80041dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041de:	2090      	movs	r0, #144	@ 0x90
 80041e0:	183a      	adds	r2, r7, r0
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	2301      	movs	r3, #1
 80041e6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ea:	f383 8810 	msr	PRIMASK, r3
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	438a      	bics	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	183b      	adds	r3, r7, r0
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	589b      	ldr	r3, [r3, r2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d016      	beq.n	8004246 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	589b      	ldr	r3, [r3, r2]
 800421e:	4a17      	ldr	r2, [pc, #92]	@ (800427c <HAL_UART_IRQHandler+0x2c8>)
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	589b      	ldr	r3, [r3, r2]
 8004228:	0018      	movs	r0, r3
 800422a:	f7fd fb79 	bl	8001920 <HAL_DMA_Abort_IT>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d01c      	beq.n	800426c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2280      	movs	r2, #128	@ 0x80
 8004236:	589b      	ldr	r3, [r3, r2]
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	2180      	movs	r1, #128	@ 0x80
 800423e:	5852      	ldr	r2, [r2, r1]
 8004240:	0010      	movs	r0, r2
 8004242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	e012      	b.n	800426c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f9e1 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424e:	e00d      	b.n	800426c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0018      	movs	r0, r3
 8004254:	f000 f9dc 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e008      	b.n	800426c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f000 f9d7 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2290      	movs	r2, #144	@ 0x90
 8004266:	2100      	movs	r1, #0
 8004268:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800426a:	e1b9      	b.n	80045e0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	46c0      	nop			@ (mov r8, r8)
    return;
 800426e:	e1b7      	b.n	80045e0 <HAL_UART_IRQHandler+0x62c>
 8004270:	0000080f 	.word	0x0000080f
 8004274:	10000001 	.word	0x10000001
 8004278:	04000120 	.word	0x04000120
 800427c:	08005265 	.word	0x08005265

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d000      	beq.n	800428a <HAL_UART_IRQHandler+0x2d6>
 8004288:	e13e      	b.n	8004508 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800428a:	23a4      	movs	r3, #164	@ 0xa4
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2210      	movs	r2, #16
 8004292:	4013      	ands	r3, r2
 8004294:	d100      	bne.n	8004298 <HAL_UART_IRQHandler+0x2e4>
 8004296:	e137      	b.n	8004508 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004298:	23a0      	movs	r3, #160	@ 0xa0
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2210      	movs	r2, #16
 80042a0:	4013      	ands	r3, r2
 80042a2:	d100      	bne.n	80042a6 <HAL_UART_IRQHandler+0x2f2>
 80042a4:	e130      	b.n	8004508 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2210      	movs	r2, #16
 80042ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2240      	movs	r2, #64	@ 0x40
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d000      	beq.n	80042be <HAL_UART_IRQHandler+0x30a>
 80042bc:	e0a4      	b.n	8004408 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2280      	movs	r2, #128	@ 0x80
 80042c2:	589b      	ldr	r3, [r3, r2]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	217e      	movs	r1, #126	@ 0x7e
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <HAL_UART_IRQHandler+0x324>
 80042d6:	e185      	b.n	80045e4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	225c      	movs	r2, #92	@ 0x5c
 80042dc:	5a9b      	ldrh	r3, [r3, r2]
 80042de:	187a      	adds	r2, r7, r1
 80042e0:	8812      	ldrh	r2, [r2, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d300      	bcc.n	80042e8 <HAL_UART_IRQHandler+0x334>
 80042e6:	e17d      	b.n	80045e4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	187a      	adds	r2, r7, r1
 80042ec:	215e      	movs	r1, #94	@ 0x5e
 80042ee:	8812      	ldrh	r2, [r2, #0]
 80042f0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2280      	movs	r2, #128	@ 0x80
 80042f6:	589b      	ldr	r3, [r3, r2]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2220      	movs	r2, #32
 80042fe:	4013      	ands	r3, r2
 8004300:	d170      	bne.n	80043e4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004302:	f3ef 8310 	mrs	r3, PRIMASK
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800430a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800430c:	2301      	movs	r3, #1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	49b4      	ldr	r1, [pc, #720]	@ (80045f4 <HAL_UART_IRQHandler+0x640>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004334:	f3ef 8310 	mrs	r3, PRIMASK
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	677b      	str	r3, [r7, #116]	@ 0x74
 800433e:	2301      	movs	r3, #1
 8004340:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004344:	f383 8810 	msr	PRIMASK, r3
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	438a      	bics	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
 800435a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800435c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004366:	f3ef 8310 	mrs	r3, PRIMASK
 800436a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004370:	2301      	movs	r3, #1
 8004372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004376:	f383 8810 	msr	PRIMASK, r3
}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2140      	movs	r1, #64	@ 0x40
 8004388:	438a      	bics	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	228c      	movs	r2, #140	@ 0x8c
 800439c:	2120      	movs	r1, #32
 800439e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043b0:	2301      	movs	r3, #1
 80043b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2110      	movs	r1, #16
 80043c8:	438a      	bics	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2280      	movs	r2, #128	@ 0x80
 80043dc:	589b      	ldr	r3, [r3, r2]
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fd fa3c 	bl	800185c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	225c      	movs	r2, #92	@ 0x5c
 80043ee:	5a9a      	ldrh	r2, [r3, r2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	215e      	movs	r1, #94	@ 0x5e
 80043f4:	5a5b      	ldrh	r3, [r3, r1]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f90d 	bl	8004620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004406:	e0ed      	b.n	80045e4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	225c      	movs	r2, #92	@ 0x5c
 800440c:	5a99      	ldrh	r1, [r3, r2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	225e      	movs	r2, #94	@ 0x5e
 8004412:	5a9b      	ldrh	r3, [r3, r2]
 8004414:	b29a      	uxth	r2, r3
 8004416:	208e      	movs	r0, #142	@ 0x8e
 8004418:	183b      	adds	r3, r7, r0
 800441a:	1a8a      	subs	r2, r1, r2
 800441c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	225e      	movs	r2, #94	@ 0x5e
 8004422:	5a9b      	ldrh	r3, [r3, r2]
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d100      	bne.n	800442c <HAL_UART_IRQHandler+0x478>
 800442a:	e0dd      	b.n	80045e8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800442c:	183b      	adds	r3, r7, r0
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d100      	bne.n	8004436 <HAL_UART_IRQHandler+0x482>
 8004434:	e0d8      	b.n	80045e8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004436:	f3ef 8310 	mrs	r3, PRIMASK
 800443a:	60fb      	str	r3, [r7, #12]
  return(result);
 800443c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800443e:	2488      	movs	r4, #136	@ 0x88
 8004440:	193a      	adds	r2, r7, r4
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4967      	ldr	r1, [pc, #412]	@ (80045f8 <HAL_UART_IRQHandler+0x644>)
 800445c:	400a      	ands	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	193b      	adds	r3, r7, r4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446e:	f3ef 8310 	mrs	r3, PRIMASK
 8004472:	61bb      	str	r3, [r7, #24]
  return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004476:	2484      	movs	r4, #132	@ 0x84
 8004478:	193a      	adds	r2, r7, r4
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	2301      	movs	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	495a      	ldr	r1, [pc, #360]	@ (80045fc <HAL_UART_IRQHandler+0x648>)
 8004494:	400a      	ands	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	193b      	adds	r3, r7, r4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	228c      	movs	r2, #140	@ 0x8c
 80044aa:	2120      	movs	r1, #32
 80044ac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ba:	f3ef 8310 	mrs	r3, PRIMASK
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c2:	2480      	movs	r4, #128	@ 0x80
 80044c4:	193a      	adds	r2, r7, r4
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	2301      	movs	r3, #1
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2110      	movs	r1, #16
 80044e0:	438a      	bics	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ec:	f383 8810 	msr	PRIMASK, r3
}
 80044f0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	881a      	ldrh	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f88d 	bl	8004620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004506:	e06f      	b.n	80045e8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004508:	23a4      	movs	r3, #164	@ 0xa4
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	035b      	lsls	r3, r3, #13
 8004512:	4013      	ands	r3, r2
 8004514:	d010      	beq.n	8004538 <HAL_UART_IRQHandler+0x584>
 8004516:	239c      	movs	r3, #156	@ 0x9c
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	03db      	lsls	r3, r3, #15
 8004520:	4013      	ands	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2280      	movs	r2, #128	@ 0x80
 800452a:	0352      	lsls	r2, r2, #13
 800452c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f001 fbeb 	bl	8005d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004536:	e05a      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004538:	23a4      	movs	r3, #164	@ 0xa4
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	4013      	ands	r3, r2
 8004542:	d016      	beq.n	8004572 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004544:	23a0      	movs	r3, #160	@ 0xa0
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2280      	movs	r2, #128	@ 0x80
 800454c:	4013      	ands	r3, r2
 800454e:	d106      	bne.n	800455e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004550:	239c      	movs	r3, #156	@ 0x9c
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	4013      	ands	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	d042      	beq.n	80045ec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	0010      	movs	r0, r2
 800456e:	4798      	blx	r3
    }
    return;
 8004570:	e03c      	b.n	80045ec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004572:	23a4      	movs	r3, #164	@ 0xa4
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2240      	movs	r2, #64	@ 0x40
 800457a:	4013      	ands	r3, r2
 800457c:	d00a      	beq.n	8004594 <HAL_UART_IRQHandler+0x5e0>
 800457e:	23a0      	movs	r3, #160	@ 0xa0
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2240      	movs	r2, #64	@ 0x40
 8004586:	4013      	ands	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 fe80 	bl	8005292 <UART_EndTransmit_IT>
    return;
 8004592:	e02c      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004594:	23a4      	movs	r3, #164	@ 0xa4
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	4013      	ands	r3, r2
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0x606>
 80045a2:	23a0      	movs	r3, #160	@ 0xa0
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	05db      	lsls	r3, r3, #23
 80045ac:	4013      	ands	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f001 fbba 	bl	8005d2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045b8:	e019      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045ba:	23a4      	movs	r3, #164	@ 0xa4
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	045b      	lsls	r3, r3, #17
 80045c4:	4013      	ands	r3, r2
 80045c6:	d012      	beq.n	80045ee <HAL_UART_IRQHandler+0x63a>
 80045c8:	23a0      	movs	r3, #160	@ 0xa0
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da0d      	bge.n	80045ee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f001 fba1 	bl	8005d1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045da:	e008      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
      return;
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	e006      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
    return;
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	e004      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
      return;
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	e002      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
      return;
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	e000      	b.n	80045ee <HAL_UART_IRQHandler+0x63a>
    return;
 80045ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b02a      	add	sp, #168	@ 0xa8
 80045f2:	bdb0      	pop	{r4, r5, r7, pc}
 80045f4:	fffffeff 	.word	0xfffffeff
 80045f8:	fffffedf 	.word	0xfffffedf
 80045fc:	effffffe 	.word	0xeffffffe

08004600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004618:	46c0      	nop			@ (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	000a      	movs	r2, r1
 800462a:	1cbb      	adds	r3, r7, #2
 800462c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004638:	b5b0      	push	{r4, r5, r7, lr}
 800463a:	b090      	sub	sp, #64	@ 0x40
 800463c:	af00      	add	r7, sp, #0
 800463e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004640:	231a      	movs	r3, #26
 8004642:	2220      	movs	r2, #32
 8004644:	189b      	adds	r3, r3, r2
 8004646:	19db      	adds	r3, r3, r7
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	431a      	orrs	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	431a      	orrs	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4313      	orrs	r3, r2
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4aaf      	ldr	r2, [pc, #700]	@ (8004928 <UART_SetConfig+0x2f0>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004676:	430b      	orrs	r3, r1
 8004678:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4aaa      	ldr	r2, [pc, #680]	@ (800492c <UART_SetConfig+0x2f4>)
 8004682:	4013      	ands	r3, r2
 8004684:	0018      	movs	r0, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	68d9      	ldr	r1, [r3, #12]
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	0003      	movs	r3, r0
 8004690:	430b      	orrs	r3, r1
 8004692:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4aa4      	ldr	r2, [pc, #656]	@ (8004930 <UART_SetConfig+0x2f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046aa:	4313      	orrs	r3, r2
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004934 <UART_SetConfig+0x2fc>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	220f      	movs	r2, #15
 80046cc:	4393      	bics	r3, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	0003      	movs	r3, r0
 80046da:	430b      	orrs	r3, r1
 80046dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a95      	ldr	r2, [pc, #596]	@ (8004938 <UART_SetConfig+0x300>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d131      	bne.n	800474c <UART_SetConfig+0x114>
 80046e8:	4b94      	ldr	r3, [pc, #592]	@ (800493c <UART_SetConfig+0x304>)
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	2203      	movs	r2, #3
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d01d      	beq.n	8004730 <UART_SetConfig+0xf8>
 80046f4:	d823      	bhi.n	800473e <UART_SetConfig+0x106>
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0xdc>
 80046fa:	d820      	bhi.n	800473e <UART_SetConfig+0x106>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <UART_SetConfig+0xce>
 8004700:	2b01      	cmp	r3, #1
 8004702:	d00e      	beq.n	8004722 <UART_SetConfig+0xea>
 8004704:	e01b      	b.n	800473e <UART_SetConfig+0x106>
 8004706:	231b      	movs	r3, #27
 8004708:	2220      	movs	r2, #32
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e0b4      	b.n	800487e <UART_SetConfig+0x246>
 8004714:	231b      	movs	r3, #27
 8004716:	2220      	movs	r2, #32
 8004718:	189b      	adds	r3, r3, r2
 800471a:	19db      	adds	r3, r3, r7
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e0ad      	b.n	800487e <UART_SetConfig+0x246>
 8004722:	231b      	movs	r3, #27
 8004724:	2220      	movs	r2, #32
 8004726:	189b      	adds	r3, r3, r2
 8004728:	19db      	adds	r3, r3, r7
 800472a:	2204      	movs	r2, #4
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e0a6      	b.n	800487e <UART_SetConfig+0x246>
 8004730:	231b      	movs	r3, #27
 8004732:	2220      	movs	r2, #32
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2208      	movs	r2, #8
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e09f      	b.n	800487e <UART_SetConfig+0x246>
 800473e:	231b      	movs	r3, #27
 8004740:	2220      	movs	r2, #32
 8004742:	189b      	adds	r3, r3, r2
 8004744:	19db      	adds	r3, r3, r7
 8004746:	2210      	movs	r2, #16
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e098      	b.n	800487e <UART_SetConfig+0x246>
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7b      	ldr	r2, [pc, #492]	@ (8004940 <UART_SetConfig+0x308>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d131      	bne.n	80047ba <UART_SetConfig+0x182>
 8004756:	4b79      	ldr	r3, [pc, #484]	@ (800493c <UART_SetConfig+0x304>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	220c      	movs	r2, #12
 800475c:	4013      	ands	r3, r2
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d01d      	beq.n	800479e <UART_SetConfig+0x166>
 8004762:	d823      	bhi.n	80047ac <UART_SetConfig+0x174>
 8004764:	2b08      	cmp	r3, #8
 8004766:	d00c      	beq.n	8004782 <UART_SetConfig+0x14a>
 8004768:	d820      	bhi.n	80047ac <UART_SetConfig+0x174>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0x13c>
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00e      	beq.n	8004790 <UART_SetConfig+0x158>
 8004772:	e01b      	b.n	80047ac <UART_SetConfig+0x174>
 8004774:	231b      	movs	r3, #27
 8004776:	2220      	movs	r2, #32
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e07d      	b.n	800487e <UART_SetConfig+0x246>
 8004782:	231b      	movs	r3, #27
 8004784:	2220      	movs	r2, #32
 8004786:	189b      	adds	r3, r3, r2
 8004788:	19db      	adds	r3, r3, r7
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e076      	b.n	800487e <UART_SetConfig+0x246>
 8004790:	231b      	movs	r3, #27
 8004792:	2220      	movs	r2, #32
 8004794:	189b      	adds	r3, r3, r2
 8004796:	19db      	adds	r3, r3, r7
 8004798:	2204      	movs	r2, #4
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e06f      	b.n	800487e <UART_SetConfig+0x246>
 800479e:	231b      	movs	r3, #27
 80047a0:	2220      	movs	r2, #32
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	19db      	adds	r3, r3, r7
 80047a6:	2208      	movs	r2, #8
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e068      	b.n	800487e <UART_SetConfig+0x246>
 80047ac:	231b      	movs	r3, #27
 80047ae:	2220      	movs	r2, #32
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	19db      	adds	r3, r3, r7
 80047b4:	2210      	movs	r2, #16
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e061      	b.n	800487e <UART_SetConfig+0x246>
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a61      	ldr	r2, [pc, #388]	@ (8004944 <UART_SetConfig+0x30c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d106      	bne.n	80047d2 <UART_SetConfig+0x19a>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2220      	movs	r2, #32
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e055      	b.n	800487e <UART_SetConfig+0x246>
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004948 <UART_SetConfig+0x310>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d106      	bne.n	80047ea <UART_SetConfig+0x1b2>
 80047dc:	231b      	movs	r3, #27
 80047de:	2220      	movs	r2, #32
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	19db      	adds	r3, r3, r7
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e049      	b.n	800487e <UART_SetConfig+0x246>
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a50      	ldr	r2, [pc, #320]	@ (8004930 <UART_SetConfig+0x2f8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d13e      	bne.n	8004872 <UART_SetConfig+0x23a>
 80047f4:	4b51      	ldr	r3, [pc, #324]	@ (800493c <UART_SetConfig+0x304>)
 80047f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047f8:	23c0      	movs	r3, #192	@ 0xc0
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4013      	ands	r3, r2
 80047fe:	22c0      	movs	r2, #192	@ 0xc0
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4293      	cmp	r3, r2
 8004804:	d027      	beq.n	8004856 <UART_SetConfig+0x21e>
 8004806:	22c0      	movs	r2, #192	@ 0xc0
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	4293      	cmp	r3, r2
 800480c:	d82a      	bhi.n	8004864 <UART_SetConfig+0x22c>
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	4293      	cmp	r3, r2
 8004814:	d011      	beq.n	800483a <UART_SetConfig+0x202>
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	4293      	cmp	r3, r2
 800481c:	d822      	bhi.n	8004864 <UART_SetConfig+0x22c>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <UART_SetConfig+0x1f4>
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	00d2      	lsls	r2, r2, #3
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <UART_SetConfig+0x210>
 800482a:	e01b      	b.n	8004864 <UART_SetConfig+0x22c>
 800482c:	231b      	movs	r3, #27
 800482e:	2220      	movs	r2, #32
 8004830:	189b      	adds	r3, r3, r2
 8004832:	19db      	adds	r3, r3, r7
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e021      	b.n	800487e <UART_SetConfig+0x246>
 800483a:	231b      	movs	r3, #27
 800483c:	2220      	movs	r2, #32
 800483e:	189b      	adds	r3, r3, r2
 8004840:	19db      	adds	r3, r3, r7
 8004842:	2202      	movs	r2, #2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e01a      	b.n	800487e <UART_SetConfig+0x246>
 8004848:	231b      	movs	r3, #27
 800484a:	2220      	movs	r2, #32
 800484c:	189b      	adds	r3, r3, r2
 800484e:	19db      	adds	r3, r3, r7
 8004850:	2204      	movs	r2, #4
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e013      	b.n	800487e <UART_SetConfig+0x246>
 8004856:	231b      	movs	r3, #27
 8004858:	2220      	movs	r2, #32
 800485a:	189b      	adds	r3, r3, r2
 800485c:	19db      	adds	r3, r3, r7
 800485e:	2208      	movs	r2, #8
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	e00c      	b.n	800487e <UART_SetConfig+0x246>
 8004864:	231b      	movs	r3, #27
 8004866:	2220      	movs	r2, #32
 8004868:	189b      	adds	r3, r3, r2
 800486a:	19db      	adds	r3, r3, r7
 800486c:	2210      	movs	r2, #16
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e005      	b.n	800487e <UART_SetConfig+0x246>
 8004872:	231b      	movs	r3, #27
 8004874:	2220      	movs	r2, #32
 8004876:	189b      	adds	r3, r3, r2
 8004878:	19db      	adds	r3, r3, r7
 800487a:	2210      	movs	r2, #16
 800487c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2b      	ldr	r2, [pc, #172]	@ (8004930 <UART_SetConfig+0x2f8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d000      	beq.n	800488a <UART_SetConfig+0x252>
 8004888:	e0a9      	b.n	80049de <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800488a:	231b      	movs	r3, #27
 800488c:	2220      	movs	r2, #32
 800488e:	189b      	adds	r3, r3, r2
 8004890:	19db      	adds	r3, r3, r7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d015      	beq.n	80048c4 <UART_SetConfig+0x28c>
 8004898:	dc18      	bgt.n	80048cc <UART_SetConfig+0x294>
 800489a:	2b04      	cmp	r3, #4
 800489c:	d00d      	beq.n	80048ba <UART_SetConfig+0x282>
 800489e:	dc15      	bgt.n	80048cc <UART_SetConfig+0x294>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <UART_SetConfig+0x272>
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d005      	beq.n	80048b4 <UART_SetConfig+0x27c>
 80048a8:	e010      	b.n	80048cc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048aa:	f7fd ffe9 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80048ae:	0003      	movs	r3, r0
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048b2:	e014      	b.n	80048de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <UART_SetConfig+0x314>)
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048b8:	e011      	b.n	80048de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fd ff55 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 80048be:	0003      	movs	r3, r0
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048c2:	e00c      	b.n	80048de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ca:	e008      	b.n	80048de <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80048d0:	231a      	movs	r3, #26
 80048d2:	2220      	movs	r2, #32
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	19db      	adds	r3, r3, r7
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
        break;
 80048dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d100      	bne.n	80048e6 <UART_SetConfig+0x2ae>
 80048e4:	e14b      	b.n	8004b7e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ea:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <UART_SetConfig+0x318>)
 80048ec:	0052      	lsls	r2, r2, #1
 80048ee:	5ad3      	ldrh	r3, [r2, r3]
 80048f0:	0019      	movs	r1, r3
 80048f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80048f4:	f7fb fc10 	bl	8000118 <__udivsi3>
 80048f8:	0003      	movs	r3, r0
 80048fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	0013      	movs	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	189b      	adds	r3, r3, r2
 8004906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004908:	429a      	cmp	r2, r3
 800490a:	d305      	bcc.n	8004918 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004914:	429a      	cmp	r2, r3
 8004916:	d91d      	bls.n	8004954 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004918:	231a      	movs	r3, #26
 800491a:	2220      	movs	r2, #32
 800491c:	189b      	adds	r3, r3, r2
 800491e:	19db      	adds	r3, r3, r7
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e12b      	b.n	8004b7e <UART_SetConfig+0x546>
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	cfff69f3 	.word	0xcfff69f3
 800492c:	ffffcfff 	.word	0xffffcfff
 8004930:	40008000 	.word	0x40008000
 8004934:	11fff4ff 	.word	0x11fff4ff
 8004938:	40013800 	.word	0x40013800
 800493c:	40021000 	.word	0x40021000
 8004940:	40004400 	.word	0x40004400
 8004944:	40004800 	.word	0x40004800
 8004948:	40004c00 	.word	0x40004c00
 800494c:	00f42400 	.word	0x00f42400
 8004950:	080071cc 	.word	0x080071cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004960:	4b92      	ldr	r3, [pc, #584]	@ (8004bac <UART_SetConfig+0x574>)
 8004962:	0052      	lsls	r2, r2, #1
 8004964:	5ad3      	ldrh	r3, [r2, r3]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	69b8      	ldr	r0, [r7, #24]
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	f7fb fd46 	bl	8000404 <__aeabi_uldivmod>
 8004978:	0002      	movs	r2, r0
 800497a:	000b      	movs	r3, r1
 800497c:	0e11      	lsrs	r1, r2, #24
 800497e:	021d      	lsls	r5, r3, #8
 8004980:	430d      	orrs	r5, r1
 8004982:	0214      	lsls	r4, r2, #8
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	1900      	adds	r0, r0, r4
 8004996:	4169      	adcs	r1, r5
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f7fb fd2d 	bl	8000404 <__aeabi_uldivmod>
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	0013      	movs	r3, r2
 80049b0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b4:	23c0      	movs	r3, #192	@ 0xc0
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d309      	bcc.n	80049d0 <UART_SetConfig+0x398>
 80049bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049be:	2380      	movs	r3, #128	@ 0x80
 80049c0:	035b      	lsls	r3, r3, #13
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d204      	bcs.n	80049d0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	e0d6      	b.n	8004b7e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80049d0:	231a      	movs	r3, #26
 80049d2:	2220      	movs	r2, #32
 80049d4:	189b      	adds	r3, r3, r2
 80049d6:	19db      	adds	r3, r3, r7
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e0cf      	b.n	8004b7e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	2380      	movs	r3, #128	@ 0x80
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d000      	beq.n	80049ec <UART_SetConfig+0x3b4>
 80049ea:	e070      	b.n	8004ace <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80049ec:	231b      	movs	r3, #27
 80049ee:	2220      	movs	r2, #32
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	19db      	adds	r3, r3, r7
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d015      	beq.n	8004a26 <UART_SetConfig+0x3ee>
 80049fa:	dc18      	bgt.n	8004a2e <UART_SetConfig+0x3f6>
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d00d      	beq.n	8004a1c <UART_SetConfig+0x3e4>
 8004a00:	dc15      	bgt.n	8004a2e <UART_SetConfig+0x3f6>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x3d4>
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d005      	beq.n	8004a16 <UART_SetConfig+0x3de>
 8004a0a:	e010      	b.n	8004a2e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a0c:	f7fd ff38 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8004a10:	0003      	movs	r3, r0
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a14:	e014      	b.n	8004a40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a16:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <UART_SetConfig+0x578>)
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a1a:	e011      	b.n	8004a40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a1c:	f7fd fea4 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8004a20:	0003      	movs	r3, r0
 8004a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a2c:	e008      	b.n	8004a40 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a32:	231a      	movs	r3, #26
 8004a34:	2220      	movs	r2, #32
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	19db      	adds	r3, r3, r7
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
        break;
 8004a3e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d100      	bne.n	8004a48 <UART_SetConfig+0x410>
 8004a46:	e09a      	b.n	8004b7e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a4c:	4b57      	ldr	r3, [pc, #348]	@ (8004bac <UART_SetConfig+0x574>)
 8004a4e:	0052      	lsls	r2, r2, #1
 8004a50:	5ad3      	ldrh	r3, [r2, r3]
 8004a52:	0019      	movs	r1, r3
 8004a54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a56:	f7fb fb5f 	bl	8000118 <__udivsi3>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	005a      	lsls	r2, r3, #1
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	18d2      	adds	r2, r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f7fb fb53 	bl	8000118 <__udivsi3>
 8004a72:	0003      	movs	r3, r0
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	2b0f      	cmp	r3, #15
 8004a7a:	d921      	bls.n	8004ac0 <UART_SetConfig+0x488>
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	025b      	lsls	r3, r3, #9
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d21c      	bcs.n	8004ac0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	200e      	movs	r0, #14
 8004a8c:	2420      	movs	r4, #32
 8004a8e:	1903      	adds	r3, r0, r4
 8004a90:	19db      	adds	r3, r3, r7
 8004a92:	210f      	movs	r1, #15
 8004a94:	438a      	bics	r2, r1
 8004a96:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2207      	movs	r2, #7
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b299      	uxth	r1, r3
 8004aa4:	1903      	adds	r3, r0, r4
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	1902      	adds	r2, r0, r4
 8004aaa:	19d2      	adds	r2, r2, r7
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1902      	adds	r2, r0, r4
 8004ab8:	19d2      	adds	r2, r2, r7
 8004aba:	8812      	ldrh	r2, [r2, #0]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	e05e      	b.n	8004b7e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac0:	231a      	movs	r3, #26
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	189b      	adds	r3, r3, r2
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e057      	b.n	8004b7e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ace:	231b      	movs	r3, #27
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	19db      	adds	r3, r3, r7
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d015      	beq.n	8004b08 <UART_SetConfig+0x4d0>
 8004adc:	dc18      	bgt.n	8004b10 <UART_SetConfig+0x4d8>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00d      	beq.n	8004afe <UART_SetConfig+0x4c6>
 8004ae2:	dc15      	bgt.n	8004b10 <UART_SetConfig+0x4d8>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <UART_SetConfig+0x4b6>
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d005      	beq.n	8004af8 <UART_SetConfig+0x4c0>
 8004aec:	e010      	b.n	8004b10 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aee:	f7fd fec7 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8004af2:	0003      	movs	r3, r0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004af6:	e014      	b.n	8004b22 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <UART_SetConfig+0x578>)
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004afc:	e011      	b.n	8004b22 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fd fe33 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8004b02:	0003      	movs	r3, r0
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b06:	e00c      	b.n	8004b22 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b0e:	e008      	b.n	8004b22 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004b14:	231a      	movs	r3, #26
 8004b16:	2220      	movs	r2, #32
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	19db      	adds	r3, r3, r7
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
        break;
 8004b20:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02a      	beq.n	8004b7e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bac <UART_SetConfig+0x574>)
 8004b2e:	0052      	lsls	r2, r2, #1
 8004b30:	5ad3      	ldrh	r3, [r2, r3]
 8004b32:	0019      	movs	r1, r3
 8004b34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b36:	f7fb faef 	bl	8000118 <__udivsi3>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	18d2      	adds	r2, r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	0010      	movs	r0, r2
 8004b4e:	f7fb fae3 	bl	8000118 <__udivsi3>
 8004b52:	0003      	movs	r3, r0
 8004b54:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d90a      	bls.n	8004b72 <UART_SetConfig+0x53a>
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	2380      	movs	r3, #128	@ 0x80
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d205      	bcs.n	8004b72 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e005      	b.n	8004b7e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004b72:	231a      	movs	r3, #26
 8004b74:	2220      	movs	r2, #32
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	19db      	adds	r3, r3, r7
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	226a      	movs	r2, #106	@ 0x6a
 8004b82:	2101      	movs	r1, #1
 8004b84:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	2268      	movs	r2, #104	@ 0x68
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	2200      	movs	r2, #0
 8004b92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	2200      	movs	r2, #0
 8004b98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004b9a:	231a      	movs	r3, #26
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	19db      	adds	r3, r3, r7
 8004ba2:	781b      	ldrb	r3, [r3, #0]
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b010      	add	sp, #64	@ 0x40
 8004baa:	bdb0      	pop	{r4, r5, r7, pc}
 8004bac:	080071cc 	.word	0x080071cc
 8004bb0:	00f42400 	.word	0x00f42400

08004bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf8 <UART_AdvFeatureConfig+0x144>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	2201      	movs	r2, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a43      	ldr	r2, [pc, #268]	@ (8004cfc <UART_AdvFeatureConfig+0x148>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a3b      	ldr	r2, [pc, #236]	@ (8004d00 <UART_AdvFeatureConfig+0x14c>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c26:	2204      	movs	r2, #4
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4a34      	ldr	r2, [pc, #208]	@ (8004d04 <UART_AdvFeatureConfig+0x150>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	2210      	movs	r2, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a2c      	ldr	r2, [pc, #176]	@ (8004d08 <UART_AdvFeatureConfig+0x154>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4a25      	ldr	r2, [pc, #148]	@ (8004d0c <UART_AdvFeatureConfig+0x158>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	2240      	movs	r2, #64	@ 0x40
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d01d      	beq.n	8004cce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a1d      	ldr	r2, [pc, #116]	@ (8004d10 <UART_AdvFeatureConfig+0x15c>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cae:	2380      	movs	r3, #128	@ 0x80
 8004cb0:	035b      	lsls	r3, r3, #13
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10b      	bne.n	8004cce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <UART_AdvFeatureConfig+0x160>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	2280      	movs	r2, #128	@ 0x80
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a0e      	ldr	r2, [pc, #56]	@ (8004d18 <UART_AdvFeatureConfig+0x164>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b002      	add	sp, #8
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	ffff7fff 	.word	0xffff7fff
 8004cfc:	fffdffff 	.word	0xfffdffff
 8004d00:	fffeffff 	.word	0xfffeffff
 8004d04:	fffbffff 	.word	0xfffbffff
 8004d08:	ffffefff 	.word	0xffffefff
 8004d0c:	ffffdfff 	.word	0xffffdfff
 8004d10:	ffefffff 	.word	0xffefffff
 8004d14:	ff9fffff 	.word	0xff9fffff
 8004d18:	fff7ffff 	.word	0xfff7ffff

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b092      	sub	sp, #72	@ 0x48
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2290      	movs	r2, #144	@ 0x90
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fca4 	bl	8001678 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d12d      	bne.n	8004d9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d44:	2280      	movs	r2, #128	@ 0x80
 8004d46:	0391      	lsls	r1, r2, #14
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4a47      	ldr	r2, [pc, #284]	@ (8004e68 <UART_CheckIdleState+0x14c>)
 8004d4c:	9200      	str	r2, [sp, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f000 f88e 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d022      	beq.n	8004d9e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d58:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d62:	2301      	movs	r3, #1
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	f383 8810 	msr	PRIMASK, r3
}
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2180      	movs	r1, #128	@ 0x80
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d84:	f383 8810 	msr	PRIMASK, r3
}
 8004d88:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2288      	movs	r2, #136	@ 0x88
 8004d8e:	2120      	movs	r1, #32
 8004d90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2284      	movs	r2, #132	@ 0x84
 8004d96:	2100      	movs	r1, #0
 8004d98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e060      	b.n	8004e60 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2204      	movs	r2, #4
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d146      	bne.n	8004e3a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	03d1      	lsls	r1, r2, #15
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e68 <UART_CheckIdleState+0x14c>)
 8004db6:	9200      	str	r2, [sp, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f000 f859 	bl	8004e70 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	1e03      	subs	r3, r0, #0
 8004dc0:	d03b      	beq.n	8004e3a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4922      	ldr	r1, [pc, #136]	@ (8004e6c <UART_CheckIdleState+0x150>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f383 8810 	msr	PRIMASK, r3
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df4:	f3ef 8310 	mrs	r3, PRIMASK
 8004df8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f383 8810 	msr	PRIMASK, r3
}
 8004e08:	46c0      	nop			@ (mov r8, r8)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	438a      	bics	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	228c      	movs	r2, #140	@ 0x8c
 8004e2a:	2120      	movs	r1, #32
 8004e2c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2284      	movs	r2, #132	@ 0x84
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e012      	b.n	8004e60 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2288      	movs	r2, #136	@ 0x88
 8004e3e:	2120      	movs	r1, #32
 8004e40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	228c      	movs	r2, #140	@ 0x8c
 8004e46:	2120      	movs	r1, #32
 8004e48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2284      	movs	r2, #132	@ 0x84
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b010      	add	sp, #64	@ 0x40
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	01ffffff 	.word	0x01ffffff
 8004e6c:	fffffedf 	.word	0xfffffedf

08004e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	e051      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3301      	adds	r3, #1
 8004e86:	d04e      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e88:	f7fc fbf6 	bl	8001678 <HAL_GetTick>
 8004e8c:	0002      	movs	r2, r0
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e051      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d03b      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b80      	cmp	r3, #128	@ 0x80
 8004eb2:	d038      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d035      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d111      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 f960 	bl	8005198 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2290      	movs	r2, #144	@ 0x90
 8004edc:	2108      	movs	r1, #8
 8004ede:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2284      	movs	r2, #132	@ 0x84
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e02c      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d112      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2280      	movs	r2, #128	@ 0x80
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 f943 	bl	8005198 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2290      	movs	r2, #144	@ 0x90
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2284      	movs	r2, #132	@ 0x84
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00f      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	425a      	negs	r2, r3
 8004f36:	4153      	adcs	r3, r2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	1dfb      	adds	r3, r7, #7
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d09e      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b098      	sub	sp, #96	@ 0x60
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	1dbb      	adds	r3, r7, #6
 8004f5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1dba      	adds	r2, r7, #6
 8004f68:	215c      	movs	r1, #92	@ 0x5c
 8004f6a:	8812      	ldrh	r2, [r2, #0]
 8004f6c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1dba      	adds	r2, r7, #6
 8004f72:	215e      	movs	r1, #94	@ 0x5e
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	2380      	movs	r3, #128	@ 0x80
 8004f84:	015b      	lsls	r3, r3, #5
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10d      	bne.n	8004fa6 <UART_Start_Receive_IT+0x56>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <UART_Start_Receive_IT+0x4c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2260      	movs	r2, #96	@ 0x60
 8004f96:	497b      	ldr	r1, [pc, #492]	@ (8005184 <UART_Start_Receive_IT+0x234>)
 8004f98:	5299      	strh	r1, [r3, r2]
 8004f9a:	e02e      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2260      	movs	r2, #96	@ 0x60
 8004fa0:	21ff      	movs	r1, #255	@ 0xff
 8004fa2:	5299      	strh	r1, [r3, r2]
 8004fa4:	e029      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <UART_Start_Receive_IT+0x7a>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <UART_Start_Receive_IT+0x70>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2260      	movs	r2, #96	@ 0x60
 8004fba:	21ff      	movs	r1, #255	@ 0xff
 8004fbc:	5299      	strh	r1, [r3, r2]
 8004fbe:	e01c      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2260      	movs	r2, #96	@ 0x60
 8004fc4:	217f      	movs	r1, #127	@ 0x7f
 8004fc6:	5299      	strh	r1, [r3, r2]
 8004fc8:	e017      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	055b      	lsls	r3, r3, #21
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d10d      	bne.n	8004ff2 <UART_Start_Receive_IT+0xa2>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <UART_Start_Receive_IT+0x98>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2260      	movs	r2, #96	@ 0x60
 8004fe2:	217f      	movs	r1, #127	@ 0x7f
 8004fe4:	5299      	strh	r1, [r3, r2]
 8004fe6:	e008      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2260      	movs	r2, #96	@ 0x60
 8004fec:	213f      	movs	r1, #63	@ 0x3f
 8004fee:	5299      	strh	r1, [r3, r2]
 8004ff0:	e003      	b.n	8004ffa <UART_Start_Receive_IT+0xaa>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2260      	movs	r2, #96	@ 0x60
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2290      	movs	r2, #144	@ 0x90
 8004ffe:	2100      	movs	r1, #0
 8005000:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	228c      	movs	r2, #140	@ 0x8c
 8005006:	2122      	movs	r1, #34	@ 0x22
 8005008:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005014:	2301      	movs	r3, #1
 8005016:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005040:	2380      	movs	r3, #128	@ 0x80
 8005042:	059b      	lsls	r3, r3, #22
 8005044:	429a      	cmp	r2, r3
 8005046:	d150      	bne.n	80050ea <UART_Start_Receive_IT+0x19a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2268      	movs	r2, #104	@ 0x68
 800504c:	5a9b      	ldrh	r3, [r3, r2]
 800504e:	1dba      	adds	r2, r7, #6
 8005050:	8812      	ldrh	r2, [r2, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d349      	bcc.n	80050ea <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	015b      	lsls	r3, r3, #5
 800505e:	429a      	cmp	r2, r3
 8005060:	d107      	bne.n	8005072 <UART_Start_Receive_IT+0x122>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a46      	ldr	r2, [pc, #280]	@ (8005188 <UART_Start_Receive_IT+0x238>)
 800506e:	675a      	str	r2, [r3, #116]	@ 0x74
 8005070:	e002      	b.n	8005078 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a45      	ldr	r2, [pc, #276]	@ (800518c <UART_Start_Receive_IT+0x23c>)
 8005076:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d019      	beq.n	80050b4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005088:	65bb      	str	r3, [r7, #88]	@ 0x58
 800508a:	2301      	movs	r3, #1
 800508c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			@ (mov r8, r8)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2180      	movs	r1, #128	@ 0x80
 80050a2:	0049      	lsls	r1, r1, #1
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ae:	f383 8810 	msr	PRIMASK, r3
}
 80050b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80050be:	2301      	movs	r3, #1
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2180      	movs	r1, #128	@ 0x80
 80050d6:	0549      	lsls	r1, r1, #21
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f383 8810 	msr	PRIMASK, r3
}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	e047      	b.n	800517a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	015b      	lsls	r3, r3, #5
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d107      	bne.n	8005106 <UART_Start_Receive_IT+0x1b6>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <UART_Start_Receive_IT+0x240>)
 8005102:	675a      	str	r2, [r3, #116]	@ 0x74
 8005104:	e002      	b.n	800510c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <UART_Start_Receive_IT+0x244>)
 800510a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	61fb      	str	r3, [r7, #28]
  return(result);
 800511a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800511c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511e:	2301      	movs	r3, #1
 8005120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2190      	movs	r1, #144	@ 0x90
 8005136:	0049      	lsls	r1, r1, #1
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	f383 8810 	msr	PRIMASK, r3
}
 8005146:	e018      	b.n	800517a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005148:	f3ef 8310 	mrs	r3, PRIMASK
 800514c:	613b      	str	r3, [r7, #16]
  return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005150:	653b      	str	r3, [r7, #80]	@ 0x50
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f383 8810 	msr	PRIMASK, r3
}
 800515c:	46c0      	nop			@ (mov r8, r8)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2120      	movs	r1, #32
 800516a:	430a      	orrs	r2, r1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005170:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f383 8810 	msr	PRIMASK, r3
}
 8005178:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b018      	add	sp, #96	@ 0x60
 8005182:	bd80      	pop	{r7, pc}
 8005184:	000001ff 	.word	0x000001ff
 8005188:	080059b5 	.word	0x080059b5
 800518c:	08005675 	.word	0x08005675
 8005190:	080054b1 	.word	0x080054b1
 8005194:	080052ed 	.word	0x080052ed

08005198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	@ 0x38
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a0:	f3ef 8310 	mrs	r3, PRIMASK
 80051a4:	617b      	str	r3, [r7, #20]
  return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4926      	ldr	r1, [pc, #152]	@ (800525c <UART_EndRxTransfer+0xc4>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f383 8810 	msr	PRIMASK, r3
}
 80051d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	623b      	str	r3, [r7, #32]
  return(result);
 80051d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30
 80051dc:	2301      	movs	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	491b      	ldr	r1, [pc, #108]	@ (8005260 <UART_EndRxTransfer+0xc8>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d118      	bne.n	800523e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520c:	f3ef 8310 	mrs	r3, PRIMASK
 8005210:	60bb      	str	r3, [r7, #8]
  return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005216:	2301      	movs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f383 8810 	msr	PRIMASK, r3
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2110      	movs	r1, #16
 800522e:	438a      	bics	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f383 8810 	msr	PRIMASK, r3
}
 800523c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	228c      	movs	r2, #140	@ 0x8c
 8005242:	2120      	movs	r1, #32
 8005244:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b00e      	add	sp, #56	@ 0x38
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	fffffedf 	.word	0xfffffedf
 8005260:	effffffe 	.word	0xeffffffe

08005264 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	225e      	movs	r2, #94	@ 0x5e
 8005276:	2100      	movs	r1, #0
 8005278:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2256      	movs	r2, #86	@ 0x56
 800527e:	2100      	movs	r1, #0
 8005280:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	0018      	movs	r0, r3
 8005286:	f7ff f9c3 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b004      	add	sp, #16
 8005290:	bd80      	pop	{r7, pc}

08005292 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	2301      	movs	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2140      	movs	r1, #64	@ 0x40
 80052bc:	438a      	bics	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2288      	movs	r2, #136	@ 0x88
 80052d0:	2120      	movs	r1, #32
 80052d2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff f98f 	bl	8004600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b006      	add	sp, #24
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b094      	sub	sp, #80	@ 0x50
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052f4:	204e      	movs	r0, #78	@ 0x4e
 80052f6:	183b      	adds	r3, r7, r0
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	2160      	movs	r1, #96	@ 0x60
 80052fc:	5a52      	ldrh	r2, [r2, r1]
 80052fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	228c      	movs	r2, #140	@ 0x8c
 8005304:	589b      	ldr	r3, [r3, r2]
 8005306:	2b22      	cmp	r3, #34	@ 0x22
 8005308:	d000      	beq.n	800530c <UART_RxISR_8BIT+0x20>
 800530a:	e0bf      	b.n	800548c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005312:	214c      	movs	r1, #76	@ 0x4c
 8005314:	187b      	adds	r3, r7, r1
 8005316:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005318:	187b      	adds	r3, r7, r1
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	183b      	adds	r3, r7, r0
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b2d9      	uxtb	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	400a      	ands	r2, r1
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	225e      	movs	r2, #94	@ 0x5e
 800533c:	5a9b      	ldrh	r3, [r3, r2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b299      	uxth	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	225e      	movs	r2, #94	@ 0x5e
 8005348:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	225e      	movs	r2, #94	@ 0x5e
 800534e:	5a9b      	ldrh	r3, [r3, r2]
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d000      	beq.n	8005358 <UART_RxISR_8BIT+0x6c>
 8005356:	e0a1      	b.n	800549c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005362:	2301      	movs	r3, #1
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	494a      	ldr	r1, [pc, #296]	@ (80054a4 <UART_RxISR_8BIT+0x1b8>)
 800537a:	400a      	ands	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538a:	f3ef 8310 	mrs	r3, PRIMASK
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	647b      	str	r3, [r7, #68]	@ 0x44
 8005394:	2301      	movs	r3, #1
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2101      	movs	r1, #1
 80053ac:	438a      	bics	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b6:	f383 8810 	msr	PRIMASK, r3
}
 80053ba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	228c      	movs	r2, #140	@ 0x8c
 80053c0:	2120      	movs	r1, #32
 80053c2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a34      	ldr	r2, [pc, #208]	@ (80054a8 <UART_RxISR_8BIT+0x1bc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01f      	beq.n	800541a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	4013      	ands	r3, r2
 80053e6:	d018      	beq.n	800541a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80053ee:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053f2:	2301      	movs	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f383 8810 	msr	PRIMASK, r3
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4928      	ldr	r1, [pc, #160]	@ (80054ac <UART_RxISR_8BIT+0x1c0>)
 800540a:	400a      	ands	r2, r1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f383 8810 	msr	PRIMASK, r3
}
 8005418:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d12f      	bne.n	8005482 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	60fb      	str	r3, [r7, #12]
  return(result);
 800542e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005432:	2301      	movs	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2110      	movs	r1, #16
 800544a:	438a      	bics	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2210      	movs	r2, #16
 8005462:	4013      	ands	r3, r2
 8005464:	2b10      	cmp	r3, #16
 8005466:	d103      	bne.n	8005470 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2210      	movs	r2, #16
 800546e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	225c      	movs	r2, #92	@ 0x5c
 8005474:	5a9a      	ldrh	r2, [r3, r2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f7ff f8d0 	bl	8004620 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005480:	e00c      	b.n	800549c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f7fb fc69 	bl	8000d5c <HAL_UART_RxCpltCallback>
}
 800548a:	e007      	b.n	800549c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2108      	movs	r1, #8
 8005498:	430a      	orrs	r2, r1
 800549a:	619a      	str	r2, [r3, #24]
}
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b014      	add	sp, #80	@ 0x50
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	fffffedf 	.word	0xfffffedf
 80054a8:	40008000 	.word	0x40008000
 80054ac:	fbffffff 	.word	0xfbffffff

080054b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b094      	sub	sp, #80	@ 0x50
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054b8:	204e      	movs	r0, #78	@ 0x4e
 80054ba:	183b      	adds	r3, r7, r0
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	2160      	movs	r1, #96	@ 0x60
 80054c0:	5a52      	ldrh	r2, [r2, r1]
 80054c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	228c      	movs	r2, #140	@ 0x8c
 80054c8:	589b      	ldr	r3, [r3, r2]
 80054ca:	2b22      	cmp	r3, #34	@ 0x22
 80054cc:	d000      	beq.n	80054d0 <UART_RxISR_16BIT+0x20>
 80054ce:	e0bf      	b.n	8005650 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054d6:	214c      	movs	r1, #76	@ 0x4c
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	183a      	adds	r2, r7, r0
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	4013      	ands	r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f6:	1c9a      	adds	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	225e      	movs	r2, #94	@ 0x5e
 8005500:	5a9b      	ldrh	r3, [r3, r2]
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b299      	uxth	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	225e      	movs	r2, #94	@ 0x5e
 800550c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	225e      	movs	r2, #94	@ 0x5e
 8005512:	5a9b      	ldrh	r3, [r3, r2]
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d000      	beq.n	800551c <UART_RxISR_16BIT+0x6c>
 800551a:	e0a1      	b.n	8005660 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551c:	f3ef 8310 	mrs	r3, PRIMASK
 8005520:	623b      	str	r3, [r7, #32]
  return(result);
 8005522:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005524:	647b      	str	r3, [r7, #68]	@ 0x44
 8005526:	2301      	movs	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	f383 8810 	msr	PRIMASK, r3
}
 8005530:	46c0      	nop			@ (mov r8, r8)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	494a      	ldr	r1, [pc, #296]	@ (8005668 <UART_RxISR_16BIT+0x1b8>)
 800553e:	400a      	ands	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554e:	f3ef 8310 	mrs	r3, PRIMASK
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005556:	643b      	str	r3, [r7, #64]	@ 0x40
 8005558:	2301      	movs	r3, #1
 800555a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	f383 8810 	msr	PRIMASK, r3
}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	438a      	bics	r2, r1
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	228c      	movs	r2, #140	@ 0x8c
 8005584:	2120      	movs	r1, #32
 8005586:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a34      	ldr	r2, [pc, #208]	@ (800566c <UART_RxISR_16BIT+0x1bc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01f      	beq.n	80055de <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	4013      	ands	r3, r2
 80055aa:	d018      	beq.n	80055de <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	617b      	str	r3, [r7, #20]
  return(result);
 80055b2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b6:	2301      	movs	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f383 8810 	msr	PRIMASK, r3
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4928      	ldr	r1, [pc, #160]	@ (8005670 <UART_RxISR_16BIT+0x1c0>)
 80055ce:	400a      	ands	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f383 8810 	msr	PRIMASK, r3
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d12f      	bne.n	8005646 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055f2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f6:	2301      	movs	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2110      	movs	r1, #16
 800560e:	438a      	bics	r2, r1
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2210      	movs	r2, #16
 8005626:	4013      	ands	r3, r2
 8005628:	2b10      	cmp	r3, #16
 800562a:	d103      	bne.n	8005634 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2210      	movs	r2, #16
 8005632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	225c      	movs	r2, #92	@ 0x5c
 8005638:	5a9a      	ldrh	r2, [r3, r2]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f7fe ffee 	bl	8004620 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005644:	e00c      	b.n	8005660 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f7fb fb87 	bl	8000d5c <HAL_UART_RxCpltCallback>
}
 800564e:	e007      	b.n	8005660 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2108      	movs	r1, #8
 800565c:	430a      	orrs	r2, r1
 800565e:	619a      	str	r2, [r3, #24]
}
 8005660:	46c0      	nop			@ (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b014      	add	sp, #80	@ 0x50
 8005666:	bd80      	pop	{r7, pc}
 8005668:	fffffedf 	.word	0xfffffedf
 800566c:	40008000 	.word	0x40008000
 8005670:	fbffffff 	.word	0xfbffffff

08005674 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b0a0      	sub	sp, #128	@ 0x80
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800567c:	237a      	movs	r3, #122	@ 0x7a
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	2160      	movs	r1, #96	@ 0x60
 8005684:	5a52      	ldrh	r2, [r2, r1]
 8005686:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	228c      	movs	r2, #140	@ 0x8c
 80056a4:	589b      	ldr	r3, [r3, r2]
 80056a6:	2b22      	cmp	r3, #34	@ 0x22
 80056a8:	d000      	beq.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x38>
 80056aa:	e16a      	b.n	8005982 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056ac:	236e      	movs	r3, #110	@ 0x6e
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	2168      	movs	r1, #104	@ 0x68
 80056b4:	5a52      	ldrh	r2, [r2, r1]
 80056b6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056b8:	e111      	b.n	80058de <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056c0:	216c      	movs	r1, #108	@ 0x6c
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	237a      	movs	r3, #122	@ 0x7a
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b2d9      	uxtb	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d8:	400a      	ands	r2, r1
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	225e      	movs	r2, #94	@ 0x5e
 80056ec:	5a9b      	ldrh	r3, [r3, r2]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b299      	uxth	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	225e      	movs	r2, #94	@ 0x5e
 80056f8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005704:	2207      	movs	r2, #7
 8005706:	4013      	ands	r3, r2
 8005708:	d049      	beq.n	800579e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800570a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800570c:	2201      	movs	r2, #1
 800570e:	4013      	ands	r3, r2
 8005710:	d010      	beq.n	8005734 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005712:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d00b      	beq.n	8005734 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2290      	movs	r2, #144	@ 0x90
 8005728:	589b      	ldr	r3, [r3, r2]
 800572a:	2201      	movs	r2, #1
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2190      	movs	r1, #144	@ 0x90
 8005732:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005736:	2202      	movs	r2, #2
 8005738:	4013      	ands	r3, r2
 800573a:	d00f      	beq.n	800575c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800573c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573e:	2201      	movs	r2, #1
 8005740:	4013      	ands	r3, r2
 8005742:	d00b      	beq.n	800575c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2290      	movs	r2, #144	@ 0x90
 8005750:	589b      	ldr	r3, [r3, r2]
 8005752:	2204      	movs	r2, #4
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2190      	movs	r1, #144	@ 0x90
 800575a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800575e:	2204      	movs	r2, #4
 8005760:	4013      	ands	r3, r2
 8005762:	d00f      	beq.n	8005784 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005766:	2201      	movs	r2, #1
 8005768:	4013      	ands	r3, r2
 800576a:	d00b      	beq.n	8005784 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2204      	movs	r2, #4
 8005772:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2290      	movs	r2, #144	@ 0x90
 8005778:	589b      	ldr	r3, [r3, r2]
 800577a:	2202      	movs	r2, #2
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2190      	movs	r1, #144	@ 0x90
 8005782:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2290      	movs	r2, #144	@ 0x90
 8005788:	589b      	ldr	r3, [r3, r2]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f7fe ff3d 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2290      	movs	r2, #144	@ 0x90
 800579a:	2100      	movs	r1, #0
 800579c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	225e      	movs	r2, #94	@ 0x5e
 80057a2:	5a9b      	ldrh	r3, [r3, r2]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d000      	beq.n	80057ac <UART_RxISR_8BIT_FIFOEN+0x138>
 80057aa:	e098      	b.n	80058de <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ac:	f3ef 8310 	mrs	r3, PRIMASK
 80057b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b6:	2301      	movs	r3, #1
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4973      	ldr	r1, [pc, #460]	@ (800599c <UART_RxISR_8BIT_FIFOEN+0x328>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80057e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80057e8:	2301      	movs	r3, #1
 80057ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4968      	ldr	r1, [pc, #416]	@ (80059a0 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005800:	400a      	ands	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	228c      	movs	r2, #140	@ 0x8c
 8005814:	2120      	movs	r1, #32
 8005816:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5e      	ldr	r2, [pc, #376]	@ (80059a4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01f      	beq.n	800586e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	4013      	ands	r3, r2
 800583a:	d018      	beq.n	800586e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583c:	f3ef 8310 	mrs	r3, PRIMASK
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005844:	663b      	str	r3, [r7, #96]	@ 0x60
 8005846:	2301      	movs	r3, #1
 8005848:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	f383 8810 	msr	PRIMASK, r3
}
 8005850:	46c0      	nop			@ (mov r8, r8)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4952      	ldr	r1, [pc, #328]	@ (80059a8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005868:	f383 8810 	msr	PRIMASK, r3
}
 800586c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d12f      	bne.n	80058d6 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587c:	f3ef 8310 	mrs	r3, PRIMASK
 8005880:	623b      	str	r3, [r7, #32]
  return(result);
 8005882:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005886:	2301      	movs	r3, #1
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	f383 8810 	msr	PRIMASK, r3
}
 8005890:	46c0      	nop			@ (mov r8, r8)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2110      	movs	r1, #16
 800589e:	438a      	bics	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	f383 8810 	msr	PRIMASK, r3
}
 80058ac:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2210      	movs	r2, #16
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d103      	bne.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2210      	movs	r2, #16
 80058c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	225c      	movs	r2, #92	@ 0x5c
 80058c8:	5a9a      	ldrh	r2, [r3, r2]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0011      	movs	r1, r2
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7fe fea6 	bl	8004620 <HAL_UARTEx_RxEventCallback>
 80058d4:	e003      	b.n	80058de <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f7fb fa3f 	bl	8000d5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058de:	236e      	movs	r3, #110	@ 0x6e
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058ea:	2220      	movs	r2, #32
 80058ec:	4013      	ands	r3, r2
 80058ee:	d000      	beq.n	80058f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058f0:	e6e3      	b.n	80056ba <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058f2:	205a      	movs	r0, #90	@ 0x5a
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	215e      	movs	r1, #94	@ 0x5e
 80058fa:	5a52      	ldrh	r2, [r2, r1]
 80058fc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058fe:	0001      	movs	r1, r0
 8005900:	187b      	adds	r3, r7, r1
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d044      	beq.n	8005992 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2268      	movs	r2, #104	@ 0x68
 800590c:	5a9b      	ldrh	r3, [r3, r2]
 800590e:	187a      	adds	r2, r7, r1
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d23d      	bcs.n	8005992 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	60bb      	str	r3, [r7, #8]
  return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800591e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f383 8810 	msr	PRIMASK, r3
}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	491d      	ldr	r1, [pc, #116]	@ (80059ac <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005938:	400a      	ands	r2, r1
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800593e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f383 8810 	msr	PRIMASK, r3
}
 8005946:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a19      	ldr	r2, [pc, #100]	@ (80059b0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800594c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	617b      	str	r3, [r7, #20]
  return(result);
 8005954:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005956:	653b      	str	r3, [r7, #80]	@ 0x50
 8005958:	2301      	movs	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f383 8810 	msr	PRIMASK, r3
}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2120      	movs	r1, #32
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005980:	e007      	b.n	8005992 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2108      	movs	r1, #8
 800598e:	430a      	orrs	r2, r1
 8005990:	619a      	str	r2, [r3, #24]
}
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	46bd      	mov	sp, r7
 8005996:	b020      	add	sp, #128	@ 0x80
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	fffffeff 	.word	0xfffffeff
 80059a0:	effffffe 	.word	0xeffffffe
 80059a4:	40008000 	.word	0x40008000
 80059a8:	fbffffff 	.word	0xfbffffff
 80059ac:	efffffff 	.word	0xefffffff
 80059b0:	080052ed 	.word	0x080052ed

080059b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b0a2      	sub	sp, #136	@ 0x88
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059bc:	2382      	movs	r3, #130	@ 0x82
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	2160      	movs	r1, #96	@ 0x60
 80059c4:	5a52      	ldrh	r2, [r2, r1]
 80059c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2284      	movs	r2, #132	@ 0x84
 80059d0:	18ba      	adds	r2, r7, r2
 80059d2:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	228c      	movs	r2, #140	@ 0x8c
 80059e8:	589b      	ldr	r3, [r3, r2]
 80059ea:	2b22      	cmp	r3, #34	@ 0x22
 80059ec:	d000      	beq.n	80059f0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80059ee:	e174      	b.n	8005cda <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059f0:	2376      	movs	r3, #118	@ 0x76
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	2168      	movs	r1, #104	@ 0x68
 80059f8:	5a52      	ldrh	r2, [r2, r1]
 80059fa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059fc:	e119      	b.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a04:	2174      	movs	r1, #116	@ 0x74
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	2282      	movs	r2, #130	@ 0x82
 8005a14:	18ba      	adds	r2, r7, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	8812      	ldrh	r2, [r2, #0]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	225e      	movs	r2, #94	@ 0x5e
 8005a30:	5a9b      	ldrh	r3, [r3, r2]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b299      	uxth	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	225e      	movs	r2, #94	@ 0x5e
 8005a3c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2184      	movs	r1, #132	@ 0x84
 8005a46:	187a      	adds	r2, r7, r1
 8005a48:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2207      	movs	r2, #7
 8005a50:	4013      	ands	r3, r2
 8005a52:	d04e      	beq.n	8005af2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a54:	187b      	adds	r3, r7, r1
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d010      	beq.n	8005a80 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005a5e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a60:	2380      	movs	r3, #128	@ 0x80
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2290      	movs	r2, #144	@ 0x90
 8005a74:	589b      	ldr	r3, [r3, r2]
 8005a76:	2201      	movs	r2, #1
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2190      	movs	r1, #144	@ 0x90
 8005a7e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a80:	2384      	movs	r3, #132	@ 0x84
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2202      	movs	r2, #2
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4013      	ands	r3, r2
 8005a92:	d00b      	beq.n	8005aac <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2290      	movs	r2, #144	@ 0x90
 8005aa0:	589b      	ldr	r3, [r3, r2]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2190      	movs	r1, #144	@ 0x90
 8005aaa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aac:	2384      	movs	r3, #132	@ 0x84
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2290      	movs	r2, #144	@ 0x90
 8005acc:	589b      	ldr	r3, [r3, r2]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2190      	movs	r1, #144	@ 0x90
 8005ad6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2290      	movs	r2, #144	@ 0x90
 8005adc:	589b      	ldr	r3, [r3, r2]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fe fd93 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2290      	movs	r2, #144	@ 0x90
 8005aee:	2100      	movs	r1, #0
 8005af0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	225e      	movs	r2, #94	@ 0x5e
 8005af6:	5a9b      	ldrh	r3, [r3, r2]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d000      	beq.n	8005b00 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005afe:	e098      	b.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b00:	f3ef 8310 	mrs	r3, PRIMASK
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b10:	f383 8810 	msr	PRIMASK, r3
}
 8005b14:	46c0      	nop			@ (mov r8, r8)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4974      	ldr	r1, [pc, #464]	@ (8005cf4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005b22:	400a      	ands	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b28:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b32:	f3ef 8310 	mrs	r3, PRIMASK
 8005b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b42:	f383 8810 	msr	PRIMASK, r3
}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4969      	ldr	r1, [pc, #420]	@ (8005cf8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005b54:	400a      	ands	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b5a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b5e:	f383 8810 	msr	PRIMASK, r3
}
 8005b62:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	228c      	movs	r2, #140	@ 0x8c
 8005b68:	2120      	movs	r1, #32
 8005b6a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8005cfc <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01f      	beq.n	8005bc2 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b90:	f3ef 8310 	mrs	r3, PRIMASK
 8005b94:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b98:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba0:	f383 8810 	msr	PRIMASK, r3
}
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4953      	ldr	r1, [pc, #332]	@ (8005d00 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d12f      	bne.n	8005c2a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bda:	2301      	movs	r3, #1
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d103      	bne.n	8005c18 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2210      	movs	r2, #16
 8005c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	225c      	movs	r2, #92	@ 0x5c
 8005c1c:	5a9a      	ldrh	r2, [r3, r2]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0011      	movs	r1, r2
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fe fcfc 	bl	8004620 <HAL_UARTEx_RxEventCallback>
 8005c28:	e003      	b.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7fb f895 	bl	8000d5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c32:	2376      	movs	r3, #118	@ 0x76
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c3c:	2384      	movs	r3, #132	@ 0x84
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2220      	movs	r2, #32
 8005c44:	4013      	ands	r3, r2
 8005c46:	d000      	beq.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c48:	e6d9      	b.n	80059fe <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c4a:	205e      	movs	r0, #94	@ 0x5e
 8005c4c:	183b      	adds	r3, r7, r0
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	215e      	movs	r1, #94	@ 0x5e
 8005c52:	5a52      	ldrh	r2, [r2, r1]
 8005c54:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c56:	0001      	movs	r1, r0
 8005c58:	187b      	adds	r3, r7, r1
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d044      	beq.n	8005cea <UART_RxISR_16BIT_FIFOEN+0x336>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2268      	movs	r2, #104	@ 0x68
 8005c64:	5a9b      	ldrh	r3, [r3, r2]
 8005c66:	187a      	adds	r2, r7, r1
 8005c68:	8812      	ldrh	r2, [r2, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d23d      	bcs.n	8005cea <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c74:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c78:	2301      	movs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f383 8810 	msr	PRIMASK, r3
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	491d      	ldr	r1, [pc, #116]	@ (8005d04 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005c90:	400a      	ands	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005ca4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8005caa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cac:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2120      	movs	r1, #32
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f383 8810 	msr	PRIMASK, r3
}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cd8:	e007      	b.n	8005cea <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2108      	movs	r1, #8
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	619a      	str	r2, [r3, #24]
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b022      	add	sp, #136	@ 0x88
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	fffffeff 	.word	0xfffffeff
 8005cf8:	effffffe 	.word	0xeffffffe
 8005cfc:	40008000 	.word	0x40008000
 8005d00:	fbffffff 	.word	0xfbffffff
 8005d04:	efffffff 	.word	0xefffffff
 8005d08:	080054b1 	.word	0x080054b1

08005d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2284      	movs	r2, #132	@ 0x84
 8005d48:	5c9b      	ldrb	r3, [r3, r2]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e027      	b.n	8005da2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2284      	movs	r2, #132	@ 0x84
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2288      	movs	r2, #136	@ 0x88
 8005d5e:	2124      	movs	r1, #36	@ 0x24
 8005d60:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	438a      	bics	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005dac <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2288      	movs	r2, #136	@ 0x88
 8005d94:	2120      	movs	r1, #32
 8005d96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2284      	movs	r2, #132	@ 0x84
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	dfffffff 	.word	0xdfffffff

08005db0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2284      	movs	r2, #132	@ 0x84
 8005dbe:	5c9b      	ldrb	r3, [r3, r2]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e02e      	b.n	8005e26 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2284      	movs	r2, #132	@ 0x84
 8005dcc:	2101      	movs	r1, #1
 8005dce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2288      	movs	r2, #136	@ 0x88
 8005dd4:	2124      	movs	r1, #36	@ 0x24
 8005dd6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2101      	movs	r1, #1
 8005dec:	438a      	bics	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	08d9      	lsrs	r1, r3, #3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 f854 	bl	8005eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2288      	movs	r2, #136	@ 0x88
 8005e18:	2120      	movs	r1, #32
 8005e1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2284      	movs	r2, #132	@ 0x84
 8005e20:	2100      	movs	r1, #0
 8005e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	0018      	movs	r0, r3
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b004      	add	sp, #16
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2284      	movs	r2, #132	@ 0x84
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e02f      	b.n	8005ea8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2284      	movs	r2, #132	@ 0x84
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2288      	movs	r2, #136	@ 0x88
 8005e54:	2124      	movs	r1, #36	@ 0x24
 8005e56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	438a      	bics	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 f813 	bl	8005eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2288      	movs	r2, #136	@ 0x88
 8005e9a:	2120      	movs	r1, #32
 8005e9c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2284      	movs	r2, #132	@ 0x84
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b004      	add	sp, #16
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	f1ffffff 	.word	0xf1ffffff

08005eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d108      	bne.n	8005ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	226a      	movs	r2, #106	@ 0x6a
 8005ec8:	2101      	movs	r1, #1
 8005eca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2268      	movs	r2, #104	@ 0x68
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ed4:	e043      	b.n	8005f5e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ed6:	260f      	movs	r6, #15
 8005ed8:	19bb      	adds	r3, r7, r6
 8005eda:	2208      	movs	r2, #8
 8005edc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ede:	200e      	movs	r0, #14
 8005ee0:	183b      	adds	r3, r7, r0
 8005ee2:	2208      	movs	r2, #8
 8005ee4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	0e5b      	lsrs	r3, r3, #25
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	240d      	movs	r4, #13
 8005ef2:	193b      	adds	r3, r7, r4
 8005ef4:	2107      	movs	r1, #7
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	0f5b      	lsrs	r3, r3, #29
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	250c      	movs	r5, #12
 8005f06:	197b      	adds	r3, r7, r5
 8005f08:	2107      	movs	r1, #7
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f0e:	183b      	adds	r3, r7, r0
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	197a      	adds	r2, r7, r5
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	4914      	ldr	r1, [pc, #80]	@ (8005f68 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f18:	5c8a      	ldrb	r2, [r1, r2]
 8005f1a:	435a      	muls	r2, r3
 8005f1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f1e:	197b      	adds	r3, r7, r5
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	4a12      	ldr	r2, [pc, #72]	@ (8005f6c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f26:	0019      	movs	r1, r3
 8005f28:	f7fa f980 	bl	800022c <__divsi3>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	b299      	uxth	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	226a      	movs	r2, #106	@ 0x6a
 8005f34:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f36:	19bb      	adds	r3, r7, r6
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	193a      	adds	r2, r7, r4
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	490a      	ldr	r1, [pc, #40]	@ (8005f68 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f40:	5c8a      	ldrb	r2, [r1, r2]
 8005f42:	435a      	muls	r2, r3
 8005f44:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f46:	193b      	adds	r3, r7, r4
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f4e:	0019      	movs	r1, r3
 8005f50:	f7fa f96c 	bl	800022c <__divsi3>
 8005f54:	0003      	movs	r3, r0
 8005f56:	b299      	uxth	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2268      	movs	r2, #104	@ 0x68
 8005f5c:	5299      	strh	r1, [r3, r2]
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b005      	add	sp, #20
 8005f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	080071e4 	.word	0x080071e4
 8005f6c:	080071ec 	.word	0x080071ec

08005f70 <setbuf>:
 8005f70:	b510      	push	{r4, lr}
 8005f72:	2380      	movs	r3, #128	@ 0x80
 8005f74:	424a      	negs	r2, r1
 8005f76:	414a      	adcs	r2, r1
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	0052      	lsls	r2, r2, #1
 8005f7c:	f000 f802 	bl	8005f84 <setvbuf>
 8005f80:	bd10      	pop	{r4, pc}
	...

08005f84 <setvbuf>:
 8005f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f86:	001d      	movs	r5, r3
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <setvbuf+0x164>)
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	681e      	ldr	r6, [r3, #0]
 8005f8e:	0004      	movs	r4, r0
 8005f90:	000f      	movs	r7, r1
 8005f92:	9200      	str	r2, [sp, #0]
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	d005      	beq.n	8005fa4 <setvbuf+0x20>
 8005f98:	6a33      	ldr	r3, [r6, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <setvbuf+0x20>
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	f000 f936 	bl	8006210 <__sinit>
 8005fa4:	9b00      	ldr	r3, [sp, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d005      	beq.n	8005fb6 <setvbuf+0x32>
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d900      	bls.n	8005fb0 <setvbuf+0x2c>
 8005fae:	e097      	b.n	80060e0 <setvbuf+0x15c>
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	da00      	bge.n	8005fb6 <setvbuf+0x32>
 8005fb4:	e094      	b.n	80060e0 <setvbuf+0x15c>
 8005fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fb8:	07db      	lsls	r3, r3, #31
 8005fba:	d405      	bmi.n	8005fc8 <setvbuf+0x44>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	059b      	lsls	r3, r3, #22
 8005fc0:	d402      	bmi.n	8005fc8 <setvbuf+0x44>
 8005fc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc4:	f000 fa8b 	bl	80064de <__retarget_lock_acquire_recursive>
 8005fc8:	0021      	movs	r1, r4
 8005fca:	0030      	movs	r0, r6
 8005fcc:	f000 fec8 	bl	8006d60 <_fflush_r>
 8005fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	d008      	beq.n	8005fe8 <setvbuf+0x64>
 8005fd6:	0023      	movs	r3, r4
 8005fd8:	3344      	adds	r3, #68	@ 0x44
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	d002      	beq.n	8005fe4 <setvbuf+0x60>
 8005fde:	0030      	movs	r0, r6
 8005fe0:	f000 fa80 	bl	80064e4 <_free_r>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61a3      	str	r3, [r4, #24]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	061b      	lsls	r3, r3, #24
 8005ff2:	d503      	bpl.n	8005ffc <setvbuf+0x78>
 8005ff4:	0030      	movs	r0, r6
 8005ff6:	6921      	ldr	r1, [r4, #16]
 8005ff8:	f000 fa74 	bl	80064e4 <_free_r>
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80060ec <setvbuf+0x168>)
 8006000:	4013      	ands	r3, r2
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d060      	beq.n	80060cc <setvbuf+0x148>
 800600a:	ab03      	add	r3, sp, #12
 800600c:	0021      	movs	r1, r4
 800600e:	0030      	movs	r0, r6
 8006010:	aa02      	add	r2, sp, #8
 8006012:	f000 f931 	bl	8006278 <__swhatbuf_r>
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	4303      	orrs	r3, r0
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	2d00      	cmp	r5, #0
 800601e:	d124      	bne.n	800606a <setvbuf+0xe6>
 8006020:	9d02      	ldr	r5, [sp, #8]
 8006022:	0028      	movs	r0, r5
 8006024:	f000 fbec 	bl	8006800 <malloc>
 8006028:	9501      	str	r5, [sp, #4]
 800602a:	1e07      	subs	r7, r0, #0
 800602c:	d148      	bne.n	80060c0 <setvbuf+0x13c>
 800602e:	9b02      	ldr	r3, [sp, #8]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	42ab      	cmp	r3, r5
 8006034:	d13f      	bne.n	80060b6 <setvbuf+0x132>
 8006036:	2501      	movs	r5, #1
 8006038:	426d      	negs	r5, r5
 800603a:	220c      	movs	r2, #12
 800603c:	5ea3      	ldrsh	r3, [r4, r2]
 800603e:	2202      	movs	r2, #2
 8006040:	431a      	orrs	r2, r3
 8006042:	81a2      	strh	r2, [r4, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	60a2      	str	r2, [r4, #8]
 8006048:	0022      	movs	r2, r4
 800604a:	3247      	adds	r2, #71	@ 0x47
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	6122      	str	r2, [r4, #16]
 8006050:	2201      	movs	r2, #1
 8006052:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006054:	6162      	str	r2, [r4, #20]
 8006056:	4211      	tst	r1, r2
 8006058:	d104      	bne.n	8006064 <setvbuf+0xe0>
 800605a:	059b      	lsls	r3, r3, #22
 800605c:	d402      	bmi.n	8006064 <setvbuf+0xe0>
 800605e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006060:	f000 fa3e 	bl	80064e0 <__retarget_lock_release_recursive>
 8006064:	0028      	movs	r0, r5
 8006066:	b005      	add	sp, #20
 8006068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606a:	2f00      	cmp	r7, #0
 800606c:	d0d9      	beq.n	8006022 <setvbuf+0x9e>
 800606e:	6a33      	ldr	r3, [r6, #32]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <setvbuf+0xf6>
 8006074:	0030      	movs	r0, r6
 8006076:	f000 f8cb 	bl	8006210 <__sinit>
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d103      	bne.n	8006088 <setvbuf+0x104>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	9a00      	ldr	r2, [sp, #0]
 8006084:	431a      	orrs	r2, r3
 8006086:	81a2      	strh	r2, [r4, #12]
 8006088:	220c      	movs	r2, #12
 800608a:	5ea3      	ldrsh	r3, [r4, r2]
 800608c:	2208      	movs	r2, #8
 800608e:	0019      	movs	r1, r3
 8006090:	6027      	str	r7, [r4, #0]
 8006092:	6127      	str	r7, [r4, #16]
 8006094:	6165      	str	r5, [r4, #20]
 8006096:	4011      	ands	r1, r2
 8006098:	4213      	tst	r3, r2
 800609a:	d01b      	beq.n	80060d4 <setvbuf+0x150>
 800609c:	07da      	lsls	r2, r3, #31
 800609e:	d517      	bpl.n	80060d0 <setvbuf+0x14c>
 80060a0:	2200      	movs	r2, #0
 80060a2:	426d      	negs	r5, r5
 80060a4:	60a2      	str	r2, [r4, #8]
 80060a6:	61a5      	str	r5, [r4, #24]
 80060a8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060aa:	07d2      	lsls	r2, r2, #31
 80060ac:	d401      	bmi.n	80060b2 <setvbuf+0x12e>
 80060ae:	059b      	lsls	r3, r3, #22
 80060b0:	d512      	bpl.n	80060d8 <setvbuf+0x154>
 80060b2:	2500      	movs	r5, #0
 80060b4:	e7d6      	b.n	8006064 <setvbuf+0xe0>
 80060b6:	9801      	ldr	r0, [sp, #4]
 80060b8:	f000 fba2 	bl	8006800 <malloc>
 80060bc:	1e07      	subs	r7, r0, #0
 80060be:	d0ba      	beq.n	8006036 <setvbuf+0xb2>
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	89a2      	ldrh	r2, [r4, #12]
 80060c4:	9d01      	ldr	r5, [sp, #4]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	81a3      	strh	r3, [r4, #12]
 80060ca:	e7d0      	b.n	800606e <setvbuf+0xea>
 80060cc:	2500      	movs	r5, #0
 80060ce:	e7b4      	b.n	800603a <setvbuf+0xb6>
 80060d0:	60a5      	str	r5, [r4, #8]
 80060d2:	e7e9      	b.n	80060a8 <setvbuf+0x124>
 80060d4:	60a1      	str	r1, [r4, #8]
 80060d6:	e7e7      	b.n	80060a8 <setvbuf+0x124>
 80060d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060da:	f000 fa01 	bl	80064e0 <__retarget_lock_release_recursive>
 80060de:	e7e8      	b.n	80060b2 <setvbuf+0x12e>
 80060e0:	2501      	movs	r5, #1
 80060e2:	426d      	negs	r5, r5
 80060e4:	e7be      	b.n	8006064 <setvbuf+0xe0>
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	20000018 	.word	0x20000018
 80060ec:	fffff35c 	.word	0xfffff35c

080060f0 <std>:
 80060f0:	2300      	movs	r3, #0
 80060f2:	b510      	push	{r4, lr}
 80060f4:	0004      	movs	r4, r0
 80060f6:	6003      	str	r3, [r0, #0]
 80060f8:	6043      	str	r3, [r0, #4]
 80060fa:	6083      	str	r3, [r0, #8]
 80060fc:	8181      	strh	r1, [r0, #12]
 80060fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006100:	81c2      	strh	r2, [r0, #14]
 8006102:	6103      	str	r3, [r0, #16]
 8006104:	6143      	str	r3, [r0, #20]
 8006106:	6183      	str	r3, [r0, #24]
 8006108:	0019      	movs	r1, r3
 800610a:	2208      	movs	r2, #8
 800610c:	305c      	adds	r0, #92	@ 0x5c
 800610e:	f000 f98f 	bl	8006430 <memset>
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <std+0x50>)
 8006114:	6224      	str	r4, [r4, #32]
 8006116:	6263      	str	r3, [r4, #36]	@ 0x24
 8006118:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <std+0x54>)
 800611a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <std+0x58>)
 800611e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <std+0x5c>)
 8006122:	6323      	str	r3, [r4, #48]	@ 0x30
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <std+0x60>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d005      	beq.n	8006136 <std+0x46>
 800612a:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <std+0x64>)
 800612c:	429c      	cmp	r4, r3
 800612e:	d002      	beq.n	8006136 <std+0x46>
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <std+0x68>)
 8006132:	429c      	cmp	r4, r3
 8006134:	d103      	bne.n	800613e <std+0x4e>
 8006136:	0020      	movs	r0, r4
 8006138:	3058      	adds	r0, #88	@ 0x58
 800613a:	f000 f9cf 	bl	80064dc <__retarget_lock_init_recursive>
 800613e:	bd10      	pop	{r4, pc}
 8006140:	08006dd9 	.word	0x08006dd9
 8006144:	08006e01 	.word	0x08006e01
 8006148:	08006e39 	.word	0x08006e39
 800614c:	08006e65 	.word	0x08006e65
 8006150:	20000374 	.word	0x20000374
 8006154:	200003dc 	.word	0x200003dc
 8006158:	20000444 	.word	0x20000444

0800615c <stdio_exit_handler>:
 800615c:	b510      	push	{r4, lr}
 800615e:	4a03      	ldr	r2, [pc, #12]	@ (800616c <stdio_exit_handler+0x10>)
 8006160:	4903      	ldr	r1, [pc, #12]	@ (8006170 <stdio_exit_handler+0x14>)
 8006162:	4804      	ldr	r0, [pc, #16]	@ (8006174 <stdio_exit_handler+0x18>)
 8006164:	f000 f86c 	bl	8006240 <_fwalk_sglue>
 8006168:	bd10      	pop	{r4, pc}
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	2000000c 	.word	0x2000000c
 8006170:	08006d61 	.word	0x08006d61
 8006174:	2000001c 	.word	0x2000001c

08006178 <cleanup_stdio>:
 8006178:	6841      	ldr	r1, [r0, #4]
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <cleanup_stdio+0x30>)
 800617c:	b510      	push	{r4, lr}
 800617e:	0004      	movs	r4, r0
 8006180:	4299      	cmp	r1, r3
 8006182:	d001      	beq.n	8006188 <cleanup_stdio+0x10>
 8006184:	f000 fdec 	bl	8006d60 <_fflush_r>
 8006188:	68a1      	ldr	r1, [r4, #8]
 800618a:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <cleanup_stdio+0x34>)
 800618c:	4299      	cmp	r1, r3
 800618e:	d002      	beq.n	8006196 <cleanup_stdio+0x1e>
 8006190:	0020      	movs	r0, r4
 8006192:	f000 fde5 	bl	8006d60 <_fflush_r>
 8006196:	68e1      	ldr	r1, [r4, #12]
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <cleanup_stdio+0x38>)
 800619a:	4299      	cmp	r1, r3
 800619c:	d002      	beq.n	80061a4 <cleanup_stdio+0x2c>
 800619e:	0020      	movs	r0, r4
 80061a0:	f000 fdde 	bl	8006d60 <_fflush_r>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	20000374 	.word	0x20000374
 80061ac:	200003dc 	.word	0x200003dc
 80061b0:	20000444 	.word	0x20000444

080061b4 <global_stdio_init.part.0>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <global_stdio_init.part.0+0x28>)
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <global_stdio_init.part.0+0x2c>)
 80061ba:	2104      	movs	r1, #4
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	4809      	ldr	r0, [pc, #36]	@ (80061e4 <global_stdio_init.part.0+0x30>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	f7ff ff95 	bl	80060f0 <std>
 80061c6:	2201      	movs	r2, #1
 80061c8:	2109      	movs	r1, #9
 80061ca:	4807      	ldr	r0, [pc, #28]	@ (80061e8 <global_stdio_init.part.0+0x34>)
 80061cc:	f7ff ff90 	bl	80060f0 <std>
 80061d0:	2202      	movs	r2, #2
 80061d2:	2112      	movs	r1, #18
 80061d4:	4805      	ldr	r0, [pc, #20]	@ (80061ec <global_stdio_init.part.0+0x38>)
 80061d6:	f7ff ff8b 	bl	80060f0 <std>
 80061da:	bd10      	pop	{r4, pc}
 80061dc:	200004ac 	.word	0x200004ac
 80061e0:	0800615d 	.word	0x0800615d
 80061e4:	20000374 	.word	0x20000374
 80061e8:	200003dc 	.word	0x200003dc
 80061ec:	20000444 	.word	0x20000444

080061f0 <__sfp_lock_acquire>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4802      	ldr	r0, [pc, #8]	@ (80061fc <__sfp_lock_acquire+0xc>)
 80061f4:	f000 f973 	bl	80064de <__retarget_lock_acquire_recursive>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	200004b1 	.word	0x200004b1

08006200 <__sfp_lock_release>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4802      	ldr	r0, [pc, #8]	@ (800620c <__sfp_lock_release+0xc>)
 8006204:	f000 f96c 	bl	80064e0 <__retarget_lock_release_recursive>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	200004b1 	.word	0x200004b1

08006210 <__sinit>:
 8006210:	b510      	push	{r4, lr}
 8006212:	0004      	movs	r4, r0
 8006214:	f7ff ffec 	bl	80061f0 <__sfp_lock_acquire>
 8006218:	6a23      	ldr	r3, [r4, #32]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <__sinit+0x14>
 800621e:	f7ff ffef 	bl	8006200 <__sfp_lock_release>
 8006222:	bd10      	pop	{r4, pc}
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <__sinit+0x28>)
 8006226:	6223      	str	r3, [r4, #32]
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <__sinit+0x2c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f6      	bne.n	800621e <__sinit+0xe>
 8006230:	f7ff ffc0 	bl	80061b4 <global_stdio_init.part.0>
 8006234:	e7f3      	b.n	800621e <__sinit+0xe>
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	08006179 	.word	0x08006179
 800623c:	200004ac 	.word	0x200004ac

08006240 <_fwalk_sglue>:
 8006240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006242:	0014      	movs	r4, r2
 8006244:	2600      	movs	r6, #0
 8006246:	9000      	str	r0, [sp, #0]
 8006248:	9101      	str	r1, [sp, #4]
 800624a:	68a5      	ldr	r5, [r4, #8]
 800624c:	6867      	ldr	r7, [r4, #4]
 800624e:	3f01      	subs	r7, #1
 8006250:	d504      	bpl.n	800625c <_fwalk_sglue+0x1c>
 8006252:	6824      	ldr	r4, [r4, #0]
 8006254:	2c00      	cmp	r4, #0
 8006256:	d1f8      	bne.n	800624a <_fwalk_sglue+0xa>
 8006258:	0030      	movs	r0, r6
 800625a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d908      	bls.n	8006274 <_fwalk_sglue+0x34>
 8006262:	220e      	movs	r2, #14
 8006264:	5eab      	ldrsh	r3, [r5, r2]
 8006266:	3301      	adds	r3, #1
 8006268:	d004      	beq.n	8006274 <_fwalk_sglue+0x34>
 800626a:	0029      	movs	r1, r5
 800626c:	9800      	ldr	r0, [sp, #0]
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	4798      	blx	r3
 8006272:	4306      	orrs	r6, r0
 8006274:	3568      	adds	r5, #104	@ 0x68
 8006276:	e7ea      	b.n	800624e <_fwalk_sglue+0xe>

08006278 <__swhatbuf_r>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	000e      	movs	r6, r1
 800627c:	001d      	movs	r5, r3
 800627e:	230e      	movs	r3, #14
 8006280:	5ec9      	ldrsh	r1, [r1, r3]
 8006282:	0014      	movs	r4, r2
 8006284:	b096      	sub	sp, #88	@ 0x58
 8006286:	2900      	cmp	r1, #0
 8006288:	da0c      	bge.n	80062a4 <__swhatbuf_r+0x2c>
 800628a:	89b2      	ldrh	r2, [r6, #12]
 800628c:	2380      	movs	r3, #128	@ 0x80
 800628e:	0011      	movs	r1, r2
 8006290:	4019      	ands	r1, r3
 8006292:	421a      	tst	r2, r3
 8006294:	d114      	bne.n	80062c0 <__swhatbuf_r+0x48>
 8006296:	2380      	movs	r3, #128	@ 0x80
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	2000      	movs	r0, #0
 800629c:	6029      	str	r1, [r5, #0]
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	b016      	add	sp, #88	@ 0x58
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	466a      	mov	r2, sp
 80062a6:	f000 f8cb 	bl	8006440 <_fstat_r>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	dbed      	blt.n	800628a <__swhatbuf_r+0x12>
 80062ae:	23f0      	movs	r3, #240	@ 0xf0
 80062b0:	9901      	ldr	r1, [sp, #4]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	4019      	ands	r1, r3
 80062b6:	4b04      	ldr	r3, [pc, #16]	@ (80062c8 <__swhatbuf_r+0x50>)
 80062b8:	18c9      	adds	r1, r1, r3
 80062ba:	424b      	negs	r3, r1
 80062bc:	4159      	adcs	r1, r3
 80062be:	e7ea      	b.n	8006296 <__swhatbuf_r+0x1e>
 80062c0:	2100      	movs	r1, #0
 80062c2:	2340      	movs	r3, #64	@ 0x40
 80062c4:	e7e9      	b.n	800629a <__swhatbuf_r+0x22>
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	ffffe000 	.word	0xffffe000

080062cc <__smakebuf_r>:
 80062cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ce:	2602      	movs	r6, #2
 80062d0:	898b      	ldrh	r3, [r1, #12]
 80062d2:	0005      	movs	r5, r0
 80062d4:	000c      	movs	r4, r1
 80062d6:	b085      	sub	sp, #20
 80062d8:	4233      	tst	r3, r6
 80062da:	d007      	beq.n	80062ec <__smakebuf_r+0x20>
 80062dc:	0023      	movs	r3, r4
 80062de:	3347      	adds	r3, #71	@ 0x47
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	2301      	movs	r3, #1
 80062e6:	6163      	str	r3, [r4, #20]
 80062e8:	b005      	add	sp, #20
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	aa02      	add	r2, sp, #8
 80062f0:	f7ff ffc2 	bl	8006278 <__swhatbuf_r>
 80062f4:	9f02      	ldr	r7, [sp, #8]
 80062f6:	9001      	str	r0, [sp, #4]
 80062f8:	0039      	movs	r1, r7
 80062fa:	0028      	movs	r0, r5
 80062fc:	f000 faac 	bl	8006858 <_malloc_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	d108      	bne.n	8006316 <__smakebuf_r+0x4a>
 8006304:	220c      	movs	r2, #12
 8006306:	5ea3      	ldrsh	r3, [r4, r2]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d4ed      	bmi.n	80062e8 <__smakebuf_r+0x1c>
 800630c:	2203      	movs	r2, #3
 800630e:	4393      	bics	r3, r2
 8006310:	431e      	orrs	r6, r3
 8006312:	81a6      	strh	r6, [r4, #12]
 8006314:	e7e2      	b.n	80062dc <__smakebuf_r+0x10>
 8006316:	2380      	movs	r3, #128	@ 0x80
 8006318:	89a2      	ldrh	r2, [r4, #12]
 800631a:	6020      	str	r0, [r4, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	6120      	str	r0, [r4, #16]
 8006324:	6167      	str	r7, [r4, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <__smakebuf_r+0x78>
 800632a:	0028      	movs	r0, r5
 800632c:	230e      	movs	r3, #14
 800632e:	5ee1      	ldrsh	r1, [r4, r3]
 8006330:	f000 f898 	bl	8006464 <_isatty_r>
 8006334:	2800      	cmp	r0, #0
 8006336:	d005      	beq.n	8006344 <__smakebuf_r+0x78>
 8006338:	2303      	movs	r3, #3
 800633a:	89a2      	ldrh	r2, [r4, #12]
 800633c:	439a      	bics	r2, r3
 800633e:	3b02      	subs	r3, #2
 8006340:	4313      	orrs	r3, r2
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	9a01      	ldr	r2, [sp, #4]
 8006348:	4313      	orrs	r3, r2
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	e7cc      	b.n	80062e8 <__smakebuf_r+0x1c>
	...

08006350 <iprintf>:
 8006350:	b40f      	push	{r0, r1, r2, r3}
 8006352:	b507      	push	{r0, r1, r2, lr}
 8006354:	4905      	ldr	r1, [pc, #20]	@ (800636c <iprintf+0x1c>)
 8006356:	ab04      	add	r3, sp, #16
 8006358:	6808      	ldr	r0, [r1, #0]
 800635a:	cb04      	ldmia	r3!, {r2}
 800635c:	6881      	ldr	r1, [r0, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	f000 f932 	bl	80065c8 <_vfiprintf_r>
 8006364:	b003      	add	sp, #12
 8006366:	bc08      	pop	{r3}
 8006368:	b004      	add	sp, #16
 800636a:	4718      	bx	r3
 800636c:	20000018 	.word	0x20000018

08006370 <_puts_r>:
 8006370:	6a03      	ldr	r3, [r0, #32]
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	0005      	movs	r5, r0
 8006376:	000e      	movs	r6, r1
 8006378:	6884      	ldr	r4, [r0, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <_puts_r+0x12>
 800637e:	f7ff ff47 	bl	8006210 <__sinit>
 8006382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006384:	07db      	lsls	r3, r3, #31
 8006386:	d405      	bmi.n	8006394 <_puts_r+0x24>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	059b      	lsls	r3, r3, #22
 800638c:	d402      	bmi.n	8006394 <_puts_r+0x24>
 800638e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006390:	f000 f8a5 	bl	80064de <__retarget_lock_acquire_recursive>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	071b      	lsls	r3, r3, #28
 8006398:	d502      	bpl.n	80063a0 <_puts_r+0x30>
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11f      	bne.n	80063e0 <_puts_r+0x70>
 80063a0:	0021      	movs	r1, r4
 80063a2:	0028      	movs	r0, r5
 80063a4:	f000 fda6 	bl	8006ef4 <__swsetup_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d019      	beq.n	80063e0 <_puts_r+0x70>
 80063ac:	2501      	movs	r5, #1
 80063ae:	426d      	negs	r5, r5
 80063b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b2:	07db      	lsls	r3, r3, #31
 80063b4:	d405      	bmi.n	80063c2 <_puts_r+0x52>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	d402      	bmi.n	80063c2 <_puts_r+0x52>
 80063bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063be:	f000 f88f 	bl	80064e0 <__retarget_lock_release_recursive>
 80063c2:	0028      	movs	r0, r5
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	3601      	adds	r6, #1
 80063c8:	60a3      	str	r3, [r4, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da04      	bge.n	80063d8 <_puts_r+0x68>
 80063ce:	69a2      	ldr	r2, [r4, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	dc16      	bgt.n	8006402 <_puts_r+0x92>
 80063d4:	290a      	cmp	r1, #10
 80063d6:	d014      	beq.n	8006402 <_puts_r+0x92>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	7019      	strb	r1, [r3, #0]
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	7831      	ldrb	r1, [r6, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d1ed      	bne.n	80063c6 <_puts_r+0x56>
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da0f      	bge.n	8006410 <_puts_r+0xa0>
 80063f0:	0022      	movs	r2, r4
 80063f2:	0028      	movs	r0, r5
 80063f4:	310a      	adds	r1, #10
 80063f6:	f000 fd3b 	bl	8006e70 <__swbuf_r>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d0d6      	beq.n	80063ac <_puts_r+0x3c>
 80063fe:	250a      	movs	r5, #10
 8006400:	e7d6      	b.n	80063b0 <_puts_r+0x40>
 8006402:	0022      	movs	r2, r4
 8006404:	0028      	movs	r0, r5
 8006406:	f000 fd33 	bl	8006e70 <__swbuf_r>
 800640a:	3001      	adds	r0, #1
 800640c:	d1e8      	bne.n	80063e0 <_puts_r+0x70>
 800640e:	e7cd      	b.n	80063ac <_puts_r+0x3c>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	220a      	movs	r2, #10
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e7f0      	b.n	80063fe <_puts_r+0x8e>

0800641c <puts>:
 800641c:	b510      	push	{r4, lr}
 800641e:	4b03      	ldr	r3, [pc, #12]	@ (800642c <puts+0x10>)
 8006420:	0001      	movs	r1, r0
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	f7ff ffa4 	bl	8006370 <_puts_r>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	20000018 	.word	0x20000018

08006430 <memset>:
 8006430:	0003      	movs	r3, r0
 8006432:	1882      	adds	r2, r0, r2
 8006434:	4293      	cmp	r3, r2
 8006436:	d100      	bne.n	800643a <memset+0xa>
 8006438:	4770      	bx	lr
 800643a:	7019      	strb	r1, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	e7f9      	b.n	8006434 <memset+0x4>

08006440 <_fstat_r>:
 8006440:	2300      	movs	r3, #0
 8006442:	b570      	push	{r4, r5, r6, lr}
 8006444:	4d06      	ldr	r5, [pc, #24]	@ (8006460 <_fstat_r+0x20>)
 8006446:	0004      	movs	r4, r0
 8006448:	0008      	movs	r0, r1
 800644a:	0011      	movs	r1, r2
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f7fb f852 	bl	80014f6 <_fstat>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d103      	bne.n	800645e <_fstat_r+0x1e>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d000      	beq.n	800645e <_fstat_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	200004bc 	.word	0x200004bc

08006464 <_isatty_r>:
 8006464:	2300      	movs	r3, #0
 8006466:	b570      	push	{r4, r5, r6, lr}
 8006468:	4d06      	ldr	r5, [pc, #24]	@ (8006484 <_isatty_r+0x20>)
 800646a:	0004      	movs	r4, r0
 800646c:	0008      	movs	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fb f84f 	bl	8001512 <_isatty>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d103      	bne.n	8006480 <_isatty_r+0x1c>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d000      	beq.n	8006480 <_isatty_r+0x1c>
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	200004bc 	.word	0x200004bc

08006488 <__errno>:
 8006488:	4b01      	ldr	r3, [pc, #4]	@ (8006490 <__errno+0x8>)
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	4770      	bx	lr
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	20000018 	.word	0x20000018

08006494 <__libc_init_array>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	2600      	movs	r6, #0
 8006498:	4c0c      	ldr	r4, [pc, #48]	@ (80064cc <__libc_init_array+0x38>)
 800649a:	4d0d      	ldr	r5, [pc, #52]	@ (80064d0 <__libc_init_array+0x3c>)
 800649c:	1b64      	subs	r4, r4, r5
 800649e:	10a4      	asrs	r4, r4, #2
 80064a0:	42a6      	cmp	r6, r4
 80064a2:	d109      	bne.n	80064b8 <__libc_init_array+0x24>
 80064a4:	2600      	movs	r6, #0
 80064a6:	f000 fdef 	bl	8007088 <_init>
 80064aa:	4c0a      	ldr	r4, [pc, #40]	@ (80064d4 <__libc_init_array+0x40>)
 80064ac:	4d0a      	ldr	r5, [pc, #40]	@ (80064d8 <__libc_init_array+0x44>)
 80064ae:	1b64      	subs	r4, r4, r5
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	42a6      	cmp	r6, r4
 80064b4:	d105      	bne.n	80064c2 <__libc_init_array+0x2e>
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	00b3      	lsls	r3, r6, #2
 80064ba:	58eb      	ldr	r3, [r5, r3]
 80064bc:	4798      	blx	r3
 80064be:	3601      	adds	r6, #1
 80064c0:	e7ee      	b.n	80064a0 <__libc_init_array+0xc>
 80064c2:	00b3      	lsls	r3, r6, #2
 80064c4:	58eb      	ldr	r3, [r5, r3]
 80064c6:	4798      	blx	r3
 80064c8:	3601      	adds	r6, #1
 80064ca:	e7f2      	b.n	80064b2 <__libc_init_array+0x1e>
 80064cc:	08007230 	.word	0x08007230
 80064d0:	08007230 	.word	0x08007230
 80064d4:	08007234 	.word	0x08007234
 80064d8:	08007230 	.word	0x08007230

080064dc <__retarget_lock_init_recursive>:
 80064dc:	4770      	bx	lr

080064de <__retarget_lock_acquire_recursive>:
 80064de:	4770      	bx	lr

080064e0 <__retarget_lock_release_recursive>:
 80064e0:	4770      	bx	lr
	...

080064e4 <_free_r>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	0005      	movs	r5, r0
 80064e8:	1e0c      	subs	r4, r1, #0
 80064ea:	d010      	beq.n	800650e <_free_r+0x2a>
 80064ec:	3c04      	subs	r4, #4
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da00      	bge.n	80064f6 <_free_r+0x12>
 80064f4:	18e4      	adds	r4, r4, r3
 80064f6:	0028      	movs	r0, r5
 80064f8:	f000 fc5e 	bl	8006db8 <__malloc_lock>
 80064fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <_free_r+0x90>)
 80064fe:	6813      	ldr	r3, [r2, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <_free_r+0x2c>
 8006504:	6063      	str	r3, [r4, #4]
 8006506:	6014      	str	r4, [r2, #0]
 8006508:	0028      	movs	r0, r5
 800650a:	f000 fc5d 	bl	8006dc8 <__malloc_unlock>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	42a3      	cmp	r3, r4
 8006512:	d908      	bls.n	8006526 <_free_r+0x42>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	1821      	adds	r1, r4, r0
 8006518:	428b      	cmp	r3, r1
 800651a:	d1f3      	bne.n	8006504 <_free_r+0x20>
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	1809      	adds	r1, r1, r0
 8006522:	6021      	str	r1, [r4, #0]
 8006524:	e7ee      	b.n	8006504 <_free_r+0x20>
 8006526:	001a      	movs	r2, r3
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <_free_r+0x4e>
 800652e:	42a3      	cmp	r3, r4
 8006530:	d9f9      	bls.n	8006526 <_free_r+0x42>
 8006532:	6811      	ldr	r1, [r2, #0]
 8006534:	1850      	adds	r0, r2, r1
 8006536:	42a0      	cmp	r0, r4
 8006538:	d10b      	bne.n	8006552 <_free_r+0x6e>
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1809      	adds	r1, r1, r0
 800653e:	1850      	adds	r0, r2, r1
 8006540:	6011      	str	r1, [r2, #0]
 8006542:	4283      	cmp	r3, r0
 8006544:	d1e0      	bne.n	8006508 <_free_r+0x24>
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	1841      	adds	r1, r0, r1
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	6053      	str	r3, [r2, #4]
 8006550:	e7da      	b.n	8006508 <_free_r+0x24>
 8006552:	42a0      	cmp	r0, r4
 8006554:	d902      	bls.n	800655c <_free_r+0x78>
 8006556:	230c      	movs	r3, #12
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	e7d5      	b.n	8006508 <_free_r+0x24>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	d103      	bne.n	800656c <_free_r+0x88>
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	1809      	adds	r1, r1, r0
 800656a:	6021      	str	r1, [r4, #0]
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	6054      	str	r4, [r2, #4]
 8006570:	e7ca      	b.n	8006508 <_free_r+0x24>
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	200004b8 	.word	0x200004b8

08006578 <__sfputc_r>:
 8006578:	6893      	ldr	r3, [r2, #8]
 800657a:	b510      	push	{r4, lr}
 800657c:	3b01      	subs	r3, #1
 800657e:	6093      	str	r3, [r2, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	da04      	bge.n	800658e <__sfputc_r+0x16>
 8006584:	6994      	ldr	r4, [r2, #24]
 8006586:	42a3      	cmp	r3, r4
 8006588:	db07      	blt.n	800659a <__sfputc_r+0x22>
 800658a:	290a      	cmp	r1, #10
 800658c:	d005      	beq.n	800659a <__sfputc_r+0x22>
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	1c58      	adds	r0, r3, #1
 8006592:	6010      	str	r0, [r2, #0]
 8006594:	7019      	strb	r1, [r3, #0]
 8006596:	0008      	movs	r0, r1
 8006598:	bd10      	pop	{r4, pc}
 800659a:	f000 fc69 	bl	8006e70 <__swbuf_r>
 800659e:	0001      	movs	r1, r0
 80065a0:	e7f9      	b.n	8006596 <__sfputc_r+0x1e>

080065a2 <__sfputs_r>:
 80065a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a4:	0006      	movs	r6, r0
 80065a6:	000f      	movs	r7, r1
 80065a8:	0014      	movs	r4, r2
 80065aa:	18d5      	adds	r5, r2, r3
 80065ac:	42ac      	cmp	r4, r5
 80065ae:	d101      	bne.n	80065b4 <__sfputs_r+0x12>
 80065b0:	2000      	movs	r0, #0
 80065b2:	e007      	b.n	80065c4 <__sfputs_r+0x22>
 80065b4:	7821      	ldrb	r1, [r4, #0]
 80065b6:	003a      	movs	r2, r7
 80065b8:	0030      	movs	r0, r6
 80065ba:	f7ff ffdd 	bl	8006578 <__sfputc_r>
 80065be:	3401      	adds	r4, #1
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d1f3      	bne.n	80065ac <__sfputs_r+0xa>
 80065c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065c8 <_vfiprintf_r>:
 80065c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ca:	b0a1      	sub	sp, #132	@ 0x84
 80065cc:	000f      	movs	r7, r1
 80065ce:	0015      	movs	r5, r2
 80065d0:	001e      	movs	r6, r3
 80065d2:	9003      	str	r0, [sp, #12]
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d004      	beq.n	80065e2 <_vfiprintf_r+0x1a>
 80065d8:	6a03      	ldr	r3, [r0, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <_vfiprintf_r+0x1a>
 80065de:	f7ff fe17 	bl	8006210 <__sinit>
 80065e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065e4:	07db      	lsls	r3, r3, #31
 80065e6:	d405      	bmi.n	80065f4 <_vfiprintf_r+0x2c>
 80065e8:	89bb      	ldrh	r3, [r7, #12]
 80065ea:	059b      	lsls	r3, r3, #22
 80065ec:	d402      	bmi.n	80065f4 <_vfiprintf_r+0x2c>
 80065ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80065f0:	f7ff ff75 	bl	80064de <__retarget_lock_acquire_recursive>
 80065f4:	89bb      	ldrh	r3, [r7, #12]
 80065f6:	071b      	lsls	r3, r3, #28
 80065f8:	d502      	bpl.n	8006600 <_vfiprintf_r+0x38>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d113      	bne.n	8006628 <_vfiprintf_r+0x60>
 8006600:	0039      	movs	r1, r7
 8006602:	9803      	ldr	r0, [sp, #12]
 8006604:	f000 fc76 	bl	8006ef4 <__swsetup_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	d00d      	beq.n	8006628 <_vfiprintf_r+0x60>
 800660c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660e:	07db      	lsls	r3, r3, #31
 8006610:	d503      	bpl.n	800661a <_vfiprintf_r+0x52>
 8006612:	2001      	movs	r0, #1
 8006614:	4240      	negs	r0, r0
 8006616:	b021      	add	sp, #132	@ 0x84
 8006618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800661a:	89bb      	ldrh	r3, [r7, #12]
 800661c:	059b      	lsls	r3, r3, #22
 800661e:	d4f8      	bmi.n	8006612 <_vfiprintf_r+0x4a>
 8006620:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006622:	f7ff ff5d 	bl	80064e0 <__retarget_lock_release_recursive>
 8006626:	e7f4      	b.n	8006612 <_vfiprintf_r+0x4a>
 8006628:	2300      	movs	r3, #0
 800662a:	ac08      	add	r4, sp, #32
 800662c:	6163      	str	r3, [r4, #20]
 800662e:	3320      	adds	r3, #32
 8006630:	7663      	strb	r3, [r4, #25]
 8006632:	3310      	adds	r3, #16
 8006634:	76a3      	strb	r3, [r4, #26]
 8006636:	9607      	str	r6, [sp, #28]
 8006638:	002e      	movs	r6, r5
 800663a:	7833      	ldrb	r3, [r6, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <_vfiprintf_r+0x7c>
 8006640:	2b25      	cmp	r3, #37	@ 0x25
 8006642:	d148      	bne.n	80066d6 <_vfiprintf_r+0x10e>
 8006644:	1b73      	subs	r3, r6, r5
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	42ae      	cmp	r6, r5
 800664a:	d00b      	beq.n	8006664 <_vfiprintf_r+0x9c>
 800664c:	002a      	movs	r2, r5
 800664e:	0039      	movs	r1, r7
 8006650:	9803      	ldr	r0, [sp, #12]
 8006652:	f7ff ffa6 	bl	80065a2 <__sfputs_r>
 8006656:	3001      	adds	r0, #1
 8006658:	d100      	bne.n	800665c <_vfiprintf_r+0x94>
 800665a:	e0ae      	b.n	80067ba <_vfiprintf_r+0x1f2>
 800665c:	6963      	ldr	r3, [r4, #20]
 800665e:	9a05      	ldr	r2, [sp, #20]
 8006660:	189b      	adds	r3, r3, r2
 8006662:	6163      	str	r3, [r4, #20]
 8006664:	7833      	ldrb	r3, [r6, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d100      	bne.n	800666c <_vfiprintf_r+0xa4>
 800666a:	e0a6      	b.n	80067ba <_vfiprintf_r+0x1f2>
 800666c:	2201      	movs	r2, #1
 800666e:	2300      	movs	r3, #0
 8006670:	4252      	negs	r2, r2
 8006672:	6062      	str	r2, [r4, #4]
 8006674:	a904      	add	r1, sp, #16
 8006676:	3254      	adds	r2, #84	@ 0x54
 8006678:	1852      	adds	r2, r2, r1
 800667a:	1c75      	adds	r5, r6, #1
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	60e3      	str	r3, [r4, #12]
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006686:	4b59      	ldr	r3, [pc, #356]	@ (80067ec <_vfiprintf_r+0x224>)
 8006688:	2205      	movs	r2, #5
 800668a:	0018      	movs	r0, r3
 800668c:	7829      	ldrb	r1, [r5, #0]
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	f000 fcee 	bl	8007070 <memchr>
 8006694:	1c6e      	adds	r6, r5, #1
 8006696:	2800      	cmp	r0, #0
 8006698:	d11f      	bne.n	80066da <_vfiprintf_r+0x112>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	06d3      	lsls	r3, r2, #27
 800669e:	d504      	bpl.n	80066aa <_vfiprintf_r+0xe2>
 80066a0:	2353      	movs	r3, #83	@ 0x53
 80066a2:	a904      	add	r1, sp, #16
 80066a4:	185b      	adds	r3, r3, r1
 80066a6:	2120      	movs	r1, #32
 80066a8:	7019      	strb	r1, [r3, #0]
 80066aa:	0713      	lsls	r3, r2, #28
 80066ac:	d504      	bpl.n	80066b8 <_vfiprintf_r+0xf0>
 80066ae:	2353      	movs	r3, #83	@ 0x53
 80066b0:	a904      	add	r1, sp, #16
 80066b2:	185b      	adds	r3, r3, r1
 80066b4:	212b      	movs	r1, #43	@ 0x2b
 80066b6:	7019      	strb	r1, [r3, #0]
 80066b8:	782b      	ldrb	r3, [r5, #0]
 80066ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80066bc:	d016      	beq.n	80066ec <_vfiprintf_r+0x124>
 80066be:	002e      	movs	r6, r5
 80066c0:	2100      	movs	r1, #0
 80066c2:	200a      	movs	r0, #10
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	7832      	ldrb	r2, [r6, #0]
 80066c8:	1c75      	adds	r5, r6, #1
 80066ca:	3a30      	subs	r2, #48	@ 0x30
 80066cc:	2a09      	cmp	r2, #9
 80066ce:	d950      	bls.n	8006772 <_vfiprintf_r+0x1aa>
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d111      	bne.n	80066f8 <_vfiprintf_r+0x130>
 80066d4:	e017      	b.n	8006706 <_vfiprintf_r+0x13e>
 80066d6:	3601      	adds	r6, #1
 80066d8:	e7af      	b.n	800663a <_vfiprintf_r+0x72>
 80066da:	9b05      	ldr	r3, [sp, #20]
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	1ac0      	subs	r0, r0, r3
 80066e0:	2301      	movs	r3, #1
 80066e2:	4083      	lsls	r3, r0
 80066e4:	4313      	orrs	r3, r2
 80066e6:	0035      	movs	r5, r6
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	e7cc      	b.n	8006686 <_vfiprintf_r+0xbe>
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	1d19      	adds	r1, r3, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	9107      	str	r1, [sp, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db01      	blt.n	80066fc <_vfiprintf_r+0x134>
 80066f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fa:	e004      	b.n	8006706 <_vfiprintf_r+0x13e>
 80066fc:	425b      	negs	r3, r3
 80066fe:	60e3      	str	r3, [r4, #12]
 8006700:	2302      	movs	r3, #2
 8006702:	4313      	orrs	r3, r2
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	7833      	ldrb	r3, [r6, #0]
 8006708:	2b2e      	cmp	r3, #46	@ 0x2e
 800670a:	d10c      	bne.n	8006726 <_vfiprintf_r+0x15e>
 800670c:	7873      	ldrb	r3, [r6, #1]
 800670e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006710:	d134      	bne.n	800677c <_vfiprintf_r+0x1b4>
 8006712:	9b07      	ldr	r3, [sp, #28]
 8006714:	3602      	adds	r6, #2
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	9207      	str	r2, [sp, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	da01      	bge.n	8006724 <_vfiprintf_r+0x15c>
 8006720:	2301      	movs	r3, #1
 8006722:	425b      	negs	r3, r3
 8006724:	9309      	str	r3, [sp, #36]	@ 0x24
 8006726:	4d32      	ldr	r5, [pc, #200]	@ (80067f0 <_vfiprintf_r+0x228>)
 8006728:	2203      	movs	r2, #3
 800672a:	0028      	movs	r0, r5
 800672c:	7831      	ldrb	r1, [r6, #0]
 800672e:	f000 fc9f 	bl	8007070 <memchr>
 8006732:	2800      	cmp	r0, #0
 8006734:	d006      	beq.n	8006744 <_vfiprintf_r+0x17c>
 8006736:	2340      	movs	r3, #64	@ 0x40
 8006738:	1b40      	subs	r0, r0, r5
 800673a:	4083      	lsls	r3, r0
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	3601      	adds	r6, #1
 8006740:	4313      	orrs	r3, r2
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	7831      	ldrb	r1, [r6, #0]
 8006746:	2206      	movs	r2, #6
 8006748:	482a      	ldr	r0, [pc, #168]	@ (80067f4 <_vfiprintf_r+0x22c>)
 800674a:	1c75      	adds	r5, r6, #1
 800674c:	7621      	strb	r1, [r4, #24]
 800674e:	f000 fc8f 	bl	8007070 <memchr>
 8006752:	2800      	cmp	r0, #0
 8006754:	d040      	beq.n	80067d8 <_vfiprintf_r+0x210>
 8006756:	4b28      	ldr	r3, [pc, #160]	@ (80067f8 <_vfiprintf_r+0x230>)
 8006758:	2b00      	cmp	r3, #0
 800675a:	d122      	bne.n	80067a2 <_vfiprintf_r+0x1da>
 800675c:	2207      	movs	r2, #7
 800675e:	9b07      	ldr	r3, [sp, #28]
 8006760:	3307      	adds	r3, #7
 8006762:	4393      	bics	r3, r2
 8006764:	3308      	adds	r3, #8
 8006766:	9307      	str	r3, [sp, #28]
 8006768:	6963      	ldr	r3, [r4, #20]
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	189b      	adds	r3, r3, r2
 800676e:	6163      	str	r3, [r4, #20]
 8006770:	e762      	b.n	8006638 <_vfiprintf_r+0x70>
 8006772:	4343      	muls	r3, r0
 8006774:	002e      	movs	r6, r5
 8006776:	2101      	movs	r1, #1
 8006778:	189b      	adds	r3, r3, r2
 800677a:	e7a4      	b.n	80066c6 <_vfiprintf_r+0xfe>
 800677c:	2300      	movs	r3, #0
 800677e:	200a      	movs	r0, #10
 8006780:	0019      	movs	r1, r3
 8006782:	3601      	adds	r6, #1
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	7832      	ldrb	r2, [r6, #0]
 8006788:	1c75      	adds	r5, r6, #1
 800678a:	3a30      	subs	r2, #48	@ 0x30
 800678c:	2a09      	cmp	r2, #9
 800678e:	d903      	bls.n	8006798 <_vfiprintf_r+0x1d0>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0c8      	beq.n	8006726 <_vfiprintf_r+0x15e>
 8006794:	9109      	str	r1, [sp, #36]	@ 0x24
 8006796:	e7c6      	b.n	8006726 <_vfiprintf_r+0x15e>
 8006798:	4341      	muls	r1, r0
 800679a:	002e      	movs	r6, r5
 800679c:	2301      	movs	r3, #1
 800679e:	1889      	adds	r1, r1, r2
 80067a0:	e7f1      	b.n	8006786 <_vfiprintf_r+0x1be>
 80067a2:	aa07      	add	r2, sp, #28
 80067a4:	9200      	str	r2, [sp, #0]
 80067a6:	0021      	movs	r1, r4
 80067a8:	003a      	movs	r2, r7
 80067aa:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <_vfiprintf_r+0x234>)
 80067ac:	9803      	ldr	r0, [sp, #12]
 80067ae:	e000      	b.n	80067b2 <_vfiprintf_r+0x1ea>
 80067b0:	bf00      	nop
 80067b2:	9004      	str	r0, [sp, #16]
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	3301      	adds	r3, #1
 80067b8:	d1d6      	bne.n	8006768 <_vfiprintf_r+0x1a0>
 80067ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067bc:	07db      	lsls	r3, r3, #31
 80067be:	d405      	bmi.n	80067cc <_vfiprintf_r+0x204>
 80067c0:	89bb      	ldrh	r3, [r7, #12]
 80067c2:	059b      	lsls	r3, r3, #22
 80067c4:	d402      	bmi.n	80067cc <_vfiprintf_r+0x204>
 80067c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80067c8:	f7ff fe8a 	bl	80064e0 <__retarget_lock_release_recursive>
 80067cc:	89bb      	ldrh	r3, [r7, #12]
 80067ce:	065b      	lsls	r3, r3, #25
 80067d0:	d500      	bpl.n	80067d4 <_vfiprintf_r+0x20c>
 80067d2:	e71e      	b.n	8006612 <_vfiprintf_r+0x4a>
 80067d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80067d6:	e71e      	b.n	8006616 <_vfiprintf_r+0x4e>
 80067d8:	aa07      	add	r2, sp, #28
 80067da:	9200      	str	r2, [sp, #0]
 80067dc:	0021      	movs	r1, r4
 80067de:	003a      	movs	r2, r7
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <_vfiprintf_r+0x234>)
 80067e2:	9803      	ldr	r0, [sp, #12]
 80067e4:	f000 f928 	bl	8006a38 <_printf_i>
 80067e8:	e7e3      	b.n	80067b2 <_vfiprintf_r+0x1ea>
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	080071f4 	.word	0x080071f4
 80067f0:	080071fa 	.word	0x080071fa
 80067f4:	080071fe 	.word	0x080071fe
 80067f8:	00000000 	.word	0x00000000
 80067fc:	080065a3 	.word	0x080065a3

08006800 <malloc>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4b03      	ldr	r3, [pc, #12]	@ (8006810 <malloc+0x10>)
 8006804:	0001      	movs	r1, r0
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	f000 f826 	bl	8006858 <_malloc_r>
 800680c:	bd10      	pop	{r4, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	20000018 	.word	0x20000018

08006814 <sbrk_aligned>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4e0f      	ldr	r6, [pc, #60]	@ (8006854 <sbrk_aligned+0x40>)
 8006818:	000d      	movs	r5, r1
 800681a:	6831      	ldr	r1, [r6, #0]
 800681c:	0004      	movs	r4, r0
 800681e:	2900      	cmp	r1, #0
 8006820:	d102      	bne.n	8006828 <sbrk_aligned+0x14>
 8006822:	f000 fbff 	bl	8007024 <_sbrk_r>
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	0029      	movs	r1, r5
 800682a:	0020      	movs	r0, r4
 800682c:	f000 fbfa 	bl	8007024 <_sbrk_r>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d103      	bne.n	800683c <sbrk_aligned+0x28>
 8006834:	2501      	movs	r5, #1
 8006836:	426d      	negs	r5, r5
 8006838:	0028      	movs	r0, r5
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	2303      	movs	r3, #3
 800683e:	1cc5      	adds	r5, r0, #3
 8006840:	439d      	bics	r5, r3
 8006842:	42a8      	cmp	r0, r5
 8006844:	d0f8      	beq.n	8006838 <sbrk_aligned+0x24>
 8006846:	1a29      	subs	r1, r5, r0
 8006848:	0020      	movs	r0, r4
 800684a:	f000 fbeb 	bl	8007024 <_sbrk_r>
 800684e:	3001      	adds	r0, #1
 8006850:	d1f2      	bne.n	8006838 <sbrk_aligned+0x24>
 8006852:	e7ef      	b.n	8006834 <sbrk_aligned+0x20>
 8006854:	200004b4 	.word	0x200004b4

08006858 <_malloc_r>:
 8006858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800685a:	2203      	movs	r2, #3
 800685c:	1ccb      	adds	r3, r1, #3
 800685e:	4393      	bics	r3, r2
 8006860:	3308      	adds	r3, #8
 8006862:	0005      	movs	r5, r0
 8006864:	001f      	movs	r7, r3
 8006866:	2b0c      	cmp	r3, #12
 8006868:	d234      	bcs.n	80068d4 <_malloc_r+0x7c>
 800686a:	270c      	movs	r7, #12
 800686c:	42b9      	cmp	r1, r7
 800686e:	d833      	bhi.n	80068d8 <_malloc_r+0x80>
 8006870:	0028      	movs	r0, r5
 8006872:	f000 faa1 	bl	8006db8 <__malloc_lock>
 8006876:	4e37      	ldr	r6, [pc, #220]	@ (8006954 <_malloc_r+0xfc>)
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	001c      	movs	r4, r3
 800687c:	2c00      	cmp	r4, #0
 800687e:	d12f      	bne.n	80068e0 <_malloc_r+0x88>
 8006880:	0039      	movs	r1, r7
 8006882:	0028      	movs	r0, r5
 8006884:	f7ff ffc6 	bl	8006814 <sbrk_aligned>
 8006888:	0004      	movs	r4, r0
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	d15f      	bne.n	800694e <_malloc_r+0xf6>
 800688e:	6834      	ldr	r4, [r6, #0]
 8006890:	9400      	str	r4, [sp, #0]
 8006892:	9b00      	ldr	r3, [sp, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d14a      	bne.n	800692e <_malloc_r+0xd6>
 8006898:	2c00      	cmp	r4, #0
 800689a:	d052      	beq.n	8006942 <_malloc_r+0xea>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	0028      	movs	r0, r5
 80068a0:	18e3      	adds	r3, r4, r3
 80068a2:	9900      	ldr	r1, [sp, #0]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	f000 fbbd 	bl	8007024 <_sbrk_r>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	4283      	cmp	r3, r0
 80068ae:	d148      	bne.n	8006942 <_malloc_r+0xea>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	0028      	movs	r0, r5
 80068b4:	1aff      	subs	r7, r7, r3
 80068b6:	0039      	movs	r1, r7
 80068b8:	f7ff ffac 	bl	8006814 <sbrk_aligned>
 80068bc:	3001      	adds	r0, #1
 80068be:	d040      	beq.n	8006942 <_malloc_r+0xea>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	19db      	adds	r3, r3, r7
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	d133      	bne.n	8006936 <_malloc_r+0xde>
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	e019      	b.n	8006908 <_malloc_r+0xb0>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dac9      	bge.n	800686c <_malloc_r+0x14>
 80068d8:	230c      	movs	r3, #12
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	2000      	movs	r0, #0
 80068de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068e0:	6821      	ldr	r1, [r4, #0]
 80068e2:	1bc9      	subs	r1, r1, r7
 80068e4:	d420      	bmi.n	8006928 <_malloc_r+0xd0>
 80068e6:	290b      	cmp	r1, #11
 80068e8:	d90a      	bls.n	8006900 <_malloc_r+0xa8>
 80068ea:	19e2      	adds	r2, r4, r7
 80068ec:	6027      	str	r7, [r4, #0]
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	d104      	bne.n	80068fc <_malloc_r+0xa4>
 80068f2:	6032      	str	r2, [r6, #0]
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	6011      	str	r1, [r2, #0]
 80068f8:	6053      	str	r3, [r2, #4]
 80068fa:	e005      	b.n	8006908 <_malloc_r+0xb0>
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	e7f9      	b.n	80068f4 <_malloc_r+0x9c>
 8006900:	6862      	ldr	r2, [r4, #4]
 8006902:	42a3      	cmp	r3, r4
 8006904:	d10e      	bne.n	8006924 <_malloc_r+0xcc>
 8006906:	6032      	str	r2, [r6, #0]
 8006908:	0028      	movs	r0, r5
 800690a:	f000 fa5d 	bl	8006dc8 <__malloc_unlock>
 800690e:	0020      	movs	r0, r4
 8006910:	2207      	movs	r2, #7
 8006912:	300b      	adds	r0, #11
 8006914:	1d23      	adds	r3, r4, #4
 8006916:	4390      	bics	r0, r2
 8006918:	1ac2      	subs	r2, r0, r3
 800691a:	4298      	cmp	r0, r3
 800691c:	d0df      	beq.n	80068de <_malloc_r+0x86>
 800691e:	1a1b      	subs	r3, r3, r0
 8006920:	50a3      	str	r3, [r4, r2]
 8006922:	e7dc      	b.n	80068de <_malloc_r+0x86>
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e7ef      	b.n	8006908 <_malloc_r+0xb0>
 8006928:	0023      	movs	r3, r4
 800692a:	6864      	ldr	r4, [r4, #4]
 800692c:	e7a6      	b.n	800687c <_malloc_r+0x24>
 800692e:	9c00      	ldr	r4, [sp, #0]
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	e7ad      	b.n	8006892 <_malloc_r+0x3a>
 8006936:	001a      	movs	r2, r3
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	42a3      	cmp	r3, r4
 800693c:	d1fb      	bne.n	8006936 <_malloc_r+0xde>
 800693e:	2300      	movs	r3, #0
 8006940:	e7da      	b.n	80068f8 <_malloc_r+0xa0>
 8006942:	230c      	movs	r3, #12
 8006944:	0028      	movs	r0, r5
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	f000 fa3e 	bl	8006dc8 <__malloc_unlock>
 800694c:	e7c6      	b.n	80068dc <_malloc_r+0x84>
 800694e:	6007      	str	r7, [r0, #0]
 8006950:	e7da      	b.n	8006908 <_malloc_r+0xb0>
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	200004b8 	.word	0x200004b8

08006958 <_printf_common>:
 8006958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695a:	0016      	movs	r6, r2
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	688a      	ldr	r2, [r1, #8]
 8006960:	690b      	ldr	r3, [r1, #16]
 8006962:	000c      	movs	r4, r1
 8006964:	9000      	str	r0, [sp, #0]
 8006966:	4293      	cmp	r3, r2
 8006968:	da00      	bge.n	800696c <_printf_common+0x14>
 800696a:	0013      	movs	r3, r2
 800696c:	0022      	movs	r2, r4
 800696e:	6033      	str	r3, [r6, #0]
 8006970:	3243      	adds	r2, #67	@ 0x43
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	2a00      	cmp	r2, #0
 8006976:	d001      	beq.n	800697c <_printf_common+0x24>
 8006978:	3301      	adds	r3, #1
 800697a:	6033      	str	r3, [r6, #0]
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	069b      	lsls	r3, r3, #26
 8006980:	d502      	bpl.n	8006988 <_printf_common+0x30>
 8006982:	6833      	ldr	r3, [r6, #0]
 8006984:	3302      	adds	r3, #2
 8006986:	6033      	str	r3, [r6, #0]
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	2306      	movs	r3, #6
 800698c:	0015      	movs	r5, r2
 800698e:	401d      	ands	r5, r3
 8006990:	421a      	tst	r2, r3
 8006992:	d027      	beq.n	80069e4 <_printf_common+0x8c>
 8006994:	0023      	movs	r3, r4
 8006996:	3343      	adds	r3, #67	@ 0x43
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	1e5a      	subs	r2, r3, #1
 800699c:	4193      	sbcs	r3, r2
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d430      	bmi.n	8006a06 <_printf_common+0xae>
 80069a4:	0022      	movs	r2, r4
 80069a6:	9901      	ldr	r1, [sp, #4]
 80069a8:	9800      	ldr	r0, [sp, #0]
 80069aa:	9d08      	ldr	r5, [sp, #32]
 80069ac:	3243      	adds	r2, #67	@ 0x43
 80069ae:	47a8      	blx	r5
 80069b0:	3001      	adds	r0, #1
 80069b2:	d025      	beq.n	8006a00 <_printf_common+0xa8>
 80069b4:	2206      	movs	r2, #6
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	2500      	movs	r5, #0
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d105      	bne.n	80069cc <_printf_common+0x74>
 80069c0:	6833      	ldr	r3, [r6, #0]
 80069c2:	68e5      	ldr	r5, [r4, #12]
 80069c4:	1aed      	subs	r5, r5, r3
 80069c6:	43eb      	mvns	r3, r5
 80069c8:	17db      	asrs	r3, r3, #31
 80069ca:	401d      	ands	r5, r3
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	6922      	ldr	r2, [r4, #16]
 80069d0:	4293      	cmp	r3, r2
 80069d2:	dd01      	ble.n	80069d8 <_printf_common+0x80>
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	18ed      	adds	r5, r5, r3
 80069d8:	2600      	movs	r6, #0
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d120      	bne.n	8006a20 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e010      	b.n	8006a04 <_printf_common+0xac>
 80069e2:	3501      	adds	r5, #1
 80069e4:	68e3      	ldr	r3, [r4, #12]
 80069e6:	6832      	ldr	r2, [r6, #0]
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	42ab      	cmp	r3, r5
 80069ec:	ddd2      	ble.n	8006994 <_printf_common+0x3c>
 80069ee:	0022      	movs	r2, r4
 80069f0:	2301      	movs	r3, #1
 80069f2:	9901      	ldr	r1, [sp, #4]
 80069f4:	9800      	ldr	r0, [sp, #0]
 80069f6:	9f08      	ldr	r7, [sp, #32]
 80069f8:	3219      	adds	r2, #25
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	d1f0      	bne.n	80069e2 <_printf_common+0x8a>
 8006a00:	2001      	movs	r0, #1
 8006a02:	4240      	negs	r0, r0
 8006a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a06:	2030      	movs	r0, #48	@ 0x30
 8006a08:	18e1      	adds	r1, r4, r3
 8006a0a:	3143      	adds	r1, #67	@ 0x43
 8006a0c:	7008      	strb	r0, [r1, #0]
 8006a0e:	0021      	movs	r1, r4
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	3145      	adds	r1, #69	@ 0x45
 8006a14:	7809      	ldrb	r1, [r1, #0]
 8006a16:	18a2      	adds	r2, r4, r2
 8006a18:	3243      	adds	r2, #67	@ 0x43
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	7011      	strb	r1, [r2, #0]
 8006a1e:	e7c1      	b.n	80069a4 <_printf_common+0x4c>
 8006a20:	0022      	movs	r2, r4
 8006a22:	2301      	movs	r3, #1
 8006a24:	9901      	ldr	r1, [sp, #4]
 8006a26:	9800      	ldr	r0, [sp, #0]
 8006a28:	9f08      	ldr	r7, [sp, #32]
 8006a2a:	321a      	adds	r2, #26
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0e6      	beq.n	8006a00 <_printf_common+0xa8>
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7d1      	b.n	80069da <_printf_common+0x82>
	...

08006a38 <_printf_i>:
 8006a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3a:	b08b      	sub	sp, #44	@ 0x2c
 8006a3c:	9206      	str	r2, [sp, #24]
 8006a3e:	000a      	movs	r2, r1
 8006a40:	3243      	adds	r2, #67	@ 0x43
 8006a42:	9307      	str	r3, [sp, #28]
 8006a44:	9005      	str	r0, [sp, #20]
 8006a46:	9203      	str	r2, [sp, #12]
 8006a48:	7e0a      	ldrb	r2, [r1, #24]
 8006a4a:	000c      	movs	r4, r1
 8006a4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a4e:	2a78      	cmp	r2, #120	@ 0x78
 8006a50:	d809      	bhi.n	8006a66 <_printf_i+0x2e>
 8006a52:	2a62      	cmp	r2, #98	@ 0x62
 8006a54:	d80b      	bhi.n	8006a6e <_printf_i+0x36>
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	d100      	bne.n	8006a5c <_printf_i+0x24>
 8006a5a:	e0bc      	b.n	8006bd6 <_printf_i+0x19e>
 8006a5c:	497b      	ldr	r1, [pc, #492]	@ (8006c4c <_printf_i+0x214>)
 8006a5e:	9104      	str	r1, [sp, #16]
 8006a60:	2a58      	cmp	r2, #88	@ 0x58
 8006a62:	d100      	bne.n	8006a66 <_printf_i+0x2e>
 8006a64:	e090      	b.n	8006b88 <_printf_i+0x150>
 8006a66:	0025      	movs	r5, r4
 8006a68:	3542      	adds	r5, #66	@ 0x42
 8006a6a:	702a      	strb	r2, [r5, #0]
 8006a6c:	e022      	b.n	8006ab4 <_printf_i+0x7c>
 8006a6e:	0010      	movs	r0, r2
 8006a70:	3863      	subs	r0, #99	@ 0x63
 8006a72:	2815      	cmp	r0, #21
 8006a74:	d8f7      	bhi.n	8006a66 <_printf_i+0x2e>
 8006a76:	f7f9 fb45 	bl	8000104 <__gnu_thumb1_case_shi>
 8006a7a:	0016      	.short	0x0016
 8006a7c:	fff6001f 	.word	0xfff6001f
 8006a80:	fff6fff6 	.word	0xfff6fff6
 8006a84:	001ffff6 	.word	0x001ffff6
 8006a88:	fff6fff6 	.word	0xfff6fff6
 8006a8c:	fff6fff6 	.word	0xfff6fff6
 8006a90:	003600a1 	.word	0x003600a1
 8006a94:	fff60080 	.word	0xfff60080
 8006a98:	00b2fff6 	.word	0x00b2fff6
 8006a9c:	0036fff6 	.word	0x0036fff6
 8006aa0:	fff6fff6 	.word	0xfff6fff6
 8006aa4:	0084      	.short	0x0084
 8006aa6:	0025      	movs	r5, r4
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	3542      	adds	r5, #66	@ 0x42
 8006aac:	1d11      	adds	r1, r2, #4
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	6813      	ldr	r3, [r2, #0]
 8006ab2:	702b      	strb	r3, [r5, #0]
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0a0      	b.n	8006bfa <_printf_i+0x1c2>
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	6809      	ldr	r1, [r1, #0]
 8006abc:	1d02      	adds	r2, r0, #4
 8006abe:	060d      	lsls	r5, r1, #24
 8006ac0:	d50b      	bpl.n	8006ada <_printf_i+0xa2>
 8006ac2:	6806      	ldr	r6, [r0, #0]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	da03      	bge.n	8006ad2 <_printf_i+0x9a>
 8006aca:	232d      	movs	r3, #45	@ 0x2d
 8006acc:	9a03      	ldr	r2, [sp, #12]
 8006ace:	4276      	negs	r6, r6
 8006ad0:	7013      	strb	r3, [r2, #0]
 8006ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c4c <_printf_i+0x214>)
 8006ad4:	270a      	movs	r7, #10
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	e018      	b.n	8006b0c <_printf_i+0xd4>
 8006ada:	6806      	ldr	r6, [r0, #0]
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	0649      	lsls	r1, r1, #25
 8006ae0:	d5f1      	bpl.n	8006ac6 <_printf_i+0x8e>
 8006ae2:	b236      	sxth	r6, r6
 8006ae4:	e7ef      	b.n	8006ac6 <_printf_i+0x8e>
 8006ae6:	6808      	ldr	r0, [r1, #0]
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	c940      	ldmia	r1!, {r6}
 8006aec:	0605      	lsls	r5, r0, #24
 8006aee:	d402      	bmi.n	8006af6 <_printf_i+0xbe>
 8006af0:	0640      	lsls	r0, r0, #25
 8006af2:	d500      	bpl.n	8006af6 <_printf_i+0xbe>
 8006af4:	b2b6      	uxth	r6, r6
 8006af6:	6019      	str	r1, [r3, #0]
 8006af8:	4b54      	ldr	r3, [pc, #336]	@ (8006c4c <_printf_i+0x214>)
 8006afa:	270a      	movs	r7, #10
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	2a6f      	cmp	r2, #111	@ 0x6f
 8006b00:	d100      	bne.n	8006b04 <_printf_i+0xcc>
 8006b02:	3f02      	subs	r7, #2
 8006b04:	0023      	movs	r3, r4
 8006b06:	2200      	movs	r2, #0
 8006b08:	3343      	adds	r3, #67	@ 0x43
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6863      	ldr	r3, [r4, #4]
 8006b0e:	60a3      	str	r3, [r4, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db03      	blt.n	8006b1c <_printf_i+0xe4>
 8006b14:	2104      	movs	r1, #4
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	438a      	bics	r2, r1
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	d102      	bne.n	8006b26 <_printf_i+0xee>
 8006b20:	9d03      	ldr	r5, [sp, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <_printf_i+0x108>
 8006b26:	9d03      	ldr	r5, [sp, #12]
 8006b28:	0030      	movs	r0, r6
 8006b2a:	0039      	movs	r1, r7
 8006b2c:	f7f9 fb7a 	bl	8000224 <__aeabi_uidivmod>
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	3d01      	subs	r5, #1
 8006b34:	5c5b      	ldrb	r3, [r3, r1]
 8006b36:	702b      	strb	r3, [r5, #0]
 8006b38:	0033      	movs	r3, r6
 8006b3a:	0006      	movs	r6, r0
 8006b3c:	429f      	cmp	r7, r3
 8006b3e:	d9f3      	bls.n	8006b28 <_printf_i+0xf0>
 8006b40:	2f08      	cmp	r7, #8
 8006b42:	d109      	bne.n	8006b58 <_printf_i+0x120>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	07db      	lsls	r3, r3, #31
 8006b48:	d506      	bpl.n	8006b58 <_printf_i+0x120>
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	dc02      	bgt.n	8006b58 <_printf_i+0x120>
 8006b52:	2330      	movs	r3, #48	@ 0x30
 8006b54:	3d01      	subs	r5, #1
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	1b5b      	subs	r3, r3, r5
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	9b07      	ldr	r3, [sp, #28]
 8006b60:	0021      	movs	r1, r4
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	9805      	ldr	r0, [sp, #20]
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	aa09      	add	r2, sp, #36	@ 0x24
 8006b6a:	f7ff fef5 	bl	8006958 <_printf_common>
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d148      	bne.n	8006c04 <_printf_i+0x1cc>
 8006b72:	2001      	movs	r0, #1
 8006b74:	4240      	negs	r0, r0
 8006b76:	b00b      	add	sp, #44	@ 0x2c
 8006b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	6809      	ldr	r1, [r1, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	2278      	movs	r2, #120	@ 0x78
 8006b84:	4932      	ldr	r1, [pc, #200]	@ (8006c50 <_printf_i+0x218>)
 8006b86:	9104      	str	r1, [sp, #16]
 8006b88:	0021      	movs	r1, r4
 8006b8a:	3145      	adds	r1, #69	@ 0x45
 8006b8c:	700a      	strb	r2, [r1, #0]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	c940      	ldmia	r1!, {r6}
 8006b94:	0610      	lsls	r0, r2, #24
 8006b96:	d402      	bmi.n	8006b9e <_printf_i+0x166>
 8006b98:	0650      	lsls	r0, r2, #25
 8006b9a:	d500      	bpl.n	8006b9e <_printf_i+0x166>
 8006b9c:	b2b6      	uxth	r6, r6
 8006b9e:	6019      	str	r1, [r3, #0]
 8006ba0:	07d3      	lsls	r3, r2, #31
 8006ba2:	d502      	bpl.n	8006baa <_printf_i+0x172>
 8006ba4:	2320      	movs	r3, #32
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	d001      	beq.n	8006bb2 <_printf_i+0x17a>
 8006bae:	2710      	movs	r7, #16
 8006bb0:	e7a8      	b.n	8006b04 <_printf_i+0xcc>
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	e7f8      	b.n	8006bae <_printf_i+0x176>
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	680d      	ldr	r5, [r1, #0]
 8006bc0:	1d10      	adds	r0, r2, #4
 8006bc2:	6949      	ldr	r1, [r1, #20]
 8006bc4:	6018      	str	r0, [r3, #0]
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	062e      	lsls	r6, r5, #24
 8006bca:	d501      	bpl.n	8006bd0 <_printf_i+0x198>
 8006bcc:	6019      	str	r1, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <_printf_i+0x19e>
 8006bd0:	066d      	lsls	r5, r5, #25
 8006bd2:	d5fb      	bpl.n	8006bcc <_printf_i+0x194>
 8006bd4:	8019      	strh	r1, [r3, #0]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9d03      	ldr	r5, [sp, #12]
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	e7bf      	b.n	8006b5e <_printf_i+0x126>
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	1d11      	adds	r1, r2, #4
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	6815      	ldr	r5, [r2, #0]
 8006be6:	2100      	movs	r1, #0
 8006be8:	0028      	movs	r0, r5
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	f000 fa40 	bl	8007070 <memchr>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d001      	beq.n	8006bf8 <_printf_i+0x1c0>
 8006bf4:	1b40      	subs	r0, r0, r5
 8006bf6:	6060      	str	r0, [r4, #4]
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	7013      	strb	r3, [r2, #0]
 8006c02:	e7ac      	b.n	8006b5e <_printf_i+0x126>
 8006c04:	002a      	movs	r2, r5
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	9906      	ldr	r1, [sp, #24]
 8006c0a:	9805      	ldr	r0, [sp, #20]
 8006c0c:	9d07      	ldr	r5, [sp, #28]
 8006c0e:	47a8      	blx	r5
 8006c10:	3001      	adds	r0, #1
 8006c12:	d0ae      	beq.n	8006b72 <_printf_i+0x13a>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	079b      	lsls	r3, r3, #30
 8006c18:	d415      	bmi.n	8006c46 <_printf_i+0x20e>
 8006c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1c:	68e0      	ldr	r0, [r4, #12]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	daa9      	bge.n	8006b76 <_printf_i+0x13e>
 8006c22:	0018      	movs	r0, r3
 8006c24:	e7a7      	b.n	8006b76 <_printf_i+0x13e>
 8006c26:	0022      	movs	r2, r4
 8006c28:	2301      	movs	r3, #1
 8006c2a:	9906      	ldr	r1, [sp, #24]
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	9e07      	ldr	r6, [sp, #28]
 8006c30:	3219      	adds	r2, #25
 8006c32:	47b0      	blx	r6
 8006c34:	3001      	adds	r0, #1
 8006c36:	d09c      	beq.n	8006b72 <_printf_i+0x13a>
 8006c38:	3501      	adds	r5, #1
 8006c3a:	68e3      	ldr	r3, [r4, #12]
 8006c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	42ab      	cmp	r3, r5
 8006c42:	dcf0      	bgt.n	8006c26 <_printf_i+0x1ee>
 8006c44:	e7e9      	b.n	8006c1a <_printf_i+0x1e2>
 8006c46:	2500      	movs	r5, #0
 8006c48:	e7f7      	b.n	8006c3a <_printf_i+0x202>
 8006c4a:	46c0      	nop			@ (mov r8, r8)
 8006c4c:	08007205 	.word	0x08007205
 8006c50:	08007216 	.word	0x08007216

08006c54 <__sflush_r>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	220c      	movs	r2, #12
 8006c58:	5e8b      	ldrsh	r3, [r1, r2]
 8006c5a:	0005      	movs	r5, r0
 8006c5c:	000c      	movs	r4, r1
 8006c5e:	071a      	lsls	r2, r3, #28
 8006c60:	d456      	bmi.n	8006d10 <__sflush_r+0xbc>
 8006c62:	684a      	ldr	r2, [r1, #4]
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	dc02      	bgt.n	8006c6e <__sflush_r+0x1a>
 8006c68:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	dd4e      	ble.n	8006d0c <__sflush_r+0xb8>
 8006c6e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006c70:	2f00      	cmp	r7, #0
 8006c72:	d04b      	beq.n	8006d0c <__sflush_r+0xb8>
 8006c74:	2200      	movs	r2, #0
 8006c76:	2080      	movs	r0, #128	@ 0x80
 8006c78:	682e      	ldr	r6, [r5, #0]
 8006c7a:	602a      	str	r2, [r5, #0]
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	0140      	lsls	r0, r0, #5
 8006c80:	6a21      	ldr	r1, [r4, #32]
 8006c82:	4002      	ands	r2, r0
 8006c84:	4203      	tst	r3, r0
 8006c86:	d033      	beq.n	8006cf0 <__sflush_r+0x9c>
 8006c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	075b      	lsls	r3, r3, #29
 8006c8e:	d506      	bpl.n	8006c9e <__sflush_r+0x4a>
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <__sflush_r+0x4a>
 8006c9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c9c:	1ad2      	subs	r2, r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	0028      	movs	r0, r5
 8006ca2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006ca4:	6a21      	ldr	r1, [r4, #32]
 8006ca6:	47b8      	blx	r7
 8006ca8:	89a2      	ldrh	r2, [r4, #12]
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	d106      	bne.n	8006cbc <__sflush_r+0x68>
 8006cae:	6829      	ldr	r1, [r5, #0]
 8006cb0:	291d      	cmp	r1, #29
 8006cb2:	d846      	bhi.n	8006d42 <__sflush_r+0xee>
 8006cb4:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <__sflush_r+0x108>)
 8006cb6:	410b      	asrs	r3, r1
 8006cb8:	07db      	lsls	r3, r3, #31
 8006cba:	d442      	bmi.n	8006d42 <__sflush_r+0xee>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	04d2      	lsls	r2, r2, #19
 8006cc6:	d505      	bpl.n	8006cd4 <__sflush_r+0x80>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <__sflush_r+0x7e>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d100      	bne.n	8006cd4 <__sflush_r+0x80>
 8006cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cd6:	602e      	str	r6, [r5, #0]
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	d017      	beq.n	8006d0c <__sflush_r+0xb8>
 8006cdc:	0023      	movs	r3, r4
 8006cde:	3344      	adds	r3, #68	@ 0x44
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	d002      	beq.n	8006cea <__sflush_r+0x96>
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f7ff fbfd 	bl	80064e4 <_free_r>
 8006cea:	2300      	movs	r3, #0
 8006cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cee:	e00d      	b.n	8006d0c <__sflush_r+0xb8>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	0028      	movs	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d1c6      	bne.n	8006c8a <__sflush_r+0x36>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0c3      	beq.n	8006c8a <__sflush_r+0x36>
 8006d02:	2b1d      	cmp	r3, #29
 8006d04:	d001      	beq.n	8006d0a <__sflush_r+0xb6>
 8006d06:	2b16      	cmp	r3, #22
 8006d08:	d11a      	bne.n	8006d40 <__sflush_r+0xec>
 8006d0a:	602e      	str	r6, [r5, #0]
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e01e      	b.n	8006d4e <__sflush_r+0xfa>
 8006d10:	690e      	ldr	r6, [r1, #16]
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d0fa      	beq.n	8006d0c <__sflush_r+0xb8>
 8006d16:	680f      	ldr	r7, [r1, #0]
 8006d18:	600e      	str	r6, [r1, #0]
 8006d1a:	1bba      	subs	r2, r7, r6
 8006d1c:	9201      	str	r2, [sp, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	079b      	lsls	r3, r3, #30
 8006d22:	d100      	bne.n	8006d26 <__sflush_r+0xd2>
 8006d24:	694a      	ldr	r2, [r1, #20]
 8006d26:	60a2      	str	r2, [r4, #8]
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	ddee      	ble.n	8006d0c <__sflush_r+0xb8>
 8006d2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d30:	0032      	movs	r2, r6
 8006d32:	001f      	movs	r7, r3
 8006d34:	0028      	movs	r0, r5
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	6a21      	ldr	r1, [r4, #32]
 8006d3a:	47b8      	blx	r7
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	dc07      	bgt.n	8006d50 <__sflush_r+0xfc>
 8006d40:	89a2      	ldrh	r2, [r4, #12]
 8006d42:	2340      	movs	r3, #64	@ 0x40
 8006d44:	2001      	movs	r0, #1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	4240      	negs	r0, r0
 8006d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d50:	9b01      	ldr	r3, [sp, #4]
 8006d52:	1836      	adds	r6, r6, r0
 8006d54:	1a1b      	subs	r3, r3, r0
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	e7e6      	b.n	8006d28 <__sflush_r+0xd4>
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	dfbffffe 	.word	0xdfbffffe

08006d60 <_fflush_r>:
 8006d60:	690b      	ldr	r3, [r1, #16]
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	0005      	movs	r5, r0
 8006d66:	000c      	movs	r4, r1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <_fflush_r+0x12>
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	0028      	movs	r0, r5
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d004      	beq.n	8006d80 <_fflush_r+0x20>
 8006d76:	6a03      	ldr	r3, [r0, #32]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <_fflush_r+0x20>
 8006d7c:	f7ff fa48 	bl	8006210 <__sinit>
 8006d80:	220c      	movs	r2, #12
 8006d82:	5ea3      	ldrsh	r3, [r4, r2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f1      	beq.n	8006d6c <_fflush_r+0xc>
 8006d88:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d8a:	07d2      	lsls	r2, r2, #31
 8006d8c:	d404      	bmi.n	8006d98 <_fflush_r+0x38>
 8006d8e:	059b      	lsls	r3, r3, #22
 8006d90:	d402      	bmi.n	8006d98 <_fflush_r+0x38>
 8006d92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d94:	f7ff fba3 	bl	80064de <__retarget_lock_acquire_recursive>
 8006d98:	0028      	movs	r0, r5
 8006d9a:	0021      	movs	r1, r4
 8006d9c:	f7ff ff5a 	bl	8006c54 <__sflush_r>
 8006da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da2:	0005      	movs	r5, r0
 8006da4:	07db      	lsls	r3, r3, #31
 8006da6:	d4e2      	bmi.n	8006d6e <_fflush_r+0xe>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	059b      	lsls	r3, r3, #22
 8006dac:	d4df      	bmi.n	8006d6e <_fflush_r+0xe>
 8006dae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db0:	f7ff fb96 	bl	80064e0 <__retarget_lock_release_recursive>
 8006db4:	e7db      	b.n	8006d6e <_fflush_r+0xe>
	...

08006db8 <__malloc_lock>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	4802      	ldr	r0, [pc, #8]	@ (8006dc4 <__malloc_lock+0xc>)
 8006dbc:	f7ff fb8f 	bl	80064de <__retarget_lock_acquire_recursive>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	200004b0 	.word	0x200004b0

08006dc8 <__malloc_unlock>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4802      	ldr	r0, [pc, #8]	@ (8006dd4 <__malloc_unlock+0xc>)
 8006dcc:	f7ff fb88 	bl	80064e0 <__retarget_lock_release_recursive>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	46c0      	nop			@ (mov r8, r8)
 8006dd4:	200004b0 	.word	0x200004b0

08006dd8 <__sread>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	000c      	movs	r4, r1
 8006ddc:	250e      	movs	r5, #14
 8006dde:	5f49      	ldrsh	r1, [r1, r5]
 8006de0:	f000 f90c 	bl	8006ffc <_read_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	db03      	blt.n	8006df0 <__sread+0x18>
 8006de8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006dea:	181b      	adds	r3, r3, r0
 8006dec:	6563      	str	r3, [r4, #84]	@ 0x54
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	4a02      	ldr	r2, [pc, #8]	@ (8006dfc <__sread+0x24>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	e7f9      	b.n	8006dee <__sread+0x16>
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	ffffefff 	.word	0xffffefff

08006e00 <__swrite>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	001f      	movs	r7, r3
 8006e04:	898b      	ldrh	r3, [r1, #12]
 8006e06:	0005      	movs	r5, r0
 8006e08:	000c      	movs	r4, r1
 8006e0a:	0016      	movs	r6, r2
 8006e0c:	05db      	lsls	r3, r3, #23
 8006e0e:	d505      	bpl.n	8006e1c <__swrite+0x1c>
 8006e10:	230e      	movs	r3, #14
 8006e12:	5ec9      	ldrsh	r1, [r1, r3]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2302      	movs	r3, #2
 8006e18:	f000 f8dc 	bl	8006fd4 <_lseek_r>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	4a05      	ldr	r2, [pc, #20]	@ (8006e34 <__swrite+0x34>)
 8006e20:	0028      	movs	r0, r5
 8006e22:	4013      	ands	r3, r2
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	0032      	movs	r2, r6
 8006e28:	230e      	movs	r3, #14
 8006e2a:	5ee1      	ldrsh	r1, [r4, r3]
 8006e2c:	003b      	movs	r3, r7
 8006e2e:	f000 f90b 	bl	8007048 <_write_r>
 8006e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e34:	ffffefff 	.word	0xffffefff

08006e38 <__sseek>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	000c      	movs	r4, r1
 8006e3c:	250e      	movs	r5, #14
 8006e3e:	5f49      	ldrsh	r1, [r1, r5]
 8006e40:	f000 f8c8 	bl	8006fd4 <_lseek_r>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	1c42      	adds	r2, r0, #1
 8006e48:	d103      	bne.n	8006e52 <__sseek+0x1a>
 8006e4a:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <__sseek+0x28>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
 8006e52:	2280      	movs	r2, #128	@ 0x80
 8006e54:	0152      	lsls	r2, r2, #5
 8006e56:	4313      	orrs	r3, r2
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e5c:	e7f8      	b.n	8006e50 <__sseek+0x18>
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	ffffefff 	.word	0xffffefff

08006e64 <__sclose>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	230e      	movs	r3, #14
 8006e68:	5ec9      	ldrsh	r1, [r1, r3]
 8006e6a:	f000 f8a1 	bl	8006fb0 <_close_r>
 8006e6e:	bd10      	pop	{r4, pc}

08006e70 <__swbuf_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	0006      	movs	r6, r0
 8006e74:	000d      	movs	r5, r1
 8006e76:	0014      	movs	r4, r2
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d004      	beq.n	8006e86 <__swbuf_r+0x16>
 8006e7c:	6a03      	ldr	r3, [r0, #32]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <__swbuf_r+0x16>
 8006e82:	f7ff f9c5 	bl	8006210 <__sinit>
 8006e86:	69a3      	ldr	r3, [r4, #24]
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	071b      	lsls	r3, r3, #28
 8006e8e:	d502      	bpl.n	8006e96 <__swbuf_r+0x26>
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <__swbuf_r+0x3a>
 8006e96:	0021      	movs	r1, r4
 8006e98:	0030      	movs	r0, r6
 8006e9a:	f000 f82b 	bl	8006ef4 <__swsetup_r>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d003      	beq.n	8006eaa <__swbuf_r+0x3a>
 8006ea2:	2501      	movs	r5, #1
 8006ea4:	426d      	negs	r5, r5
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	b2ef      	uxtb	r7, r5
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	b2ed      	uxtb	r5, r5
 8006eb6:	4283      	cmp	r3, r0
 8006eb8:	dc05      	bgt.n	8006ec6 <__swbuf_r+0x56>
 8006eba:	0021      	movs	r1, r4
 8006ebc:	0030      	movs	r0, r6
 8006ebe:	f7ff ff4f 	bl	8006d60 <_fflush_r>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1ed      	bne.n	8006ea2 <__swbuf_r+0x32>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3001      	adds	r0, #1
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	60a3      	str	r3, [r4, #8]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	6022      	str	r2, [r4, #0]
 8006ed4:	701f      	strb	r7, [r3, #0]
 8006ed6:	6963      	ldr	r3, [r4, #20]
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x76>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d5e1      	bpl.n	8006ea6 <__swbuf_r+0x36>
 8006ee2:	2d0a      	cmp	r5, #10
 8006ee4:	d1df      	bne.n	8006ea6 <__swbuf_r+0x36>
 8006ee6:	0021      	movs	r1, r4
 8006ee8:	0030      	movs	r0, r6
 8006eea:	f7ff ff39 	bl	8006d60 <_fflush_r>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0d9      	beq.n	8006ea6 <__swbuf_r+0x36>
 8006ef2:	e7d6      	b.n	8006ea2 <__swbuf_r+0x32>

08006ef4 <__swsetup_r>:
 8006ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8006fac <__swsetup_r+0xb8>)
 8006ef6:	b570      	push	{r4, r5, r6, lr}
 8006ef8:	0005      	movs	r5, r0
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	000c      	movs	r4, r1
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d004      	beq.n	8006f0c <__swsetup_r+0x18>
 8006f02:	6a03      	ldr	r3, [r0, #32]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <__swsetup_r+0x18>
 8006f08:	f7ff f982 	bl	8006210 <__sinit>
 8006f0c:	230c      	movs	r3, #12
 8006f0e:	5ee2      	ldrsh	r2, [r4, r3]
 8006f10:	0713      	lsls	r3, r2, #28
 8006f12:	d423      	bmi.n	8006f5c <__swsetup_r+0x68>
 8006f14:	06d3      	lsls	r3, r2, #27
 8006f16:	d407      	bmi.n	8006f28 <__swsetup_r+0x34>
 8006f18:	2309      	movs	r3, #9
 8006f1a:	602b      	str	r3, [r5, #0]
 8006f1c:	2340      	movs	r3, #64	@ 0x40
 8006f1e:	2001      	movs	r0, #1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	4240      	negs	r0, r0
 8006f26:	e03a      	b.n	8006f9e <__swsetup_r+0xaa>
 8006f28:	0752      	lsls	r2, r2, #29
 8006f2a:	d513      	bpl.n	8006f54 <__swsetup_r+0x60>
 8006f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	d008      	beq.n	8006f44 <__swsetup_r+0x50>
 8006f32:	0023      	movs	r3, r4
 8006f34:	3344      	adds	r3, #68	@ 0x44
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d002      	beq.n	8006f40 <__swsetup_r+0x4c>
 8006f3a:	0028      	movs	r0, r5
 8006f3c:	f7ff fad2 	bl	80064e4 <_free_r>
 8006f40:	2300      	movs	r3, #0
 8006f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f44:	2224      	movs	r2, #36	@ 0x24
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	4393      	bics	r3, r2
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	2308      	movs	r3, #8
 8006f56:	89a2      	ldrh	r2, [r4, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <__swsetup_r+0x86>
 8006f62:	21a0      	movs	r1, #160	@ 0xa0
 8006f64:	2280      	movs	r2, #128	@ 0x80
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	0089      	lsls	r1, r1, #2
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	400b      	ands	r3, r1
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <__swsetup_r+0x86>
 8006f72:	0021      	movs	r1, r4
 8006f74:	0028      	movs	r0, r5
 8006f76:	f7ff f9a9 	bl	80062cc <__smakebuf_r>
 8006f7a:	230c      	movs	r3, #12
 8006f7c:	5ee2      	ldrsh	r2, [r4, r3]
 8006f7e:	2101      	movs	r1, #1
 8006f80:	0013      	movs	r3, r2
 8006f82:	400b      	ands	r3, r1
 8006f84:	420a      	tst	r2, r1
 8006f86:	d00b      	beq.n	8006fa0 <__swsetup_r+0xac>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6963      	ldr	r3, [r4, #20]
 8006f8e:	425b      	negs	r3, r3
 8006f90:	61a3      	str	r3, [r4, #24]
 8006f92:	2000      	movs	r0, #0
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	4283      	cmp	r3, r0
 8006f98:	d101      	bne.n	8006f9e <__swsetup_r+0xaa>
 8006f9a:	0613      	lsls	r3, r2, #24
 8006f9c:	d4be      	bmi.n	8006f1c <__swsetup_r+0x28>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	0791      	lsls	r1, r2, #30
 8006fa2:	d400      	bmi.n	8006fa6 <__swsetup_r+0xb2>
 8006fa4:	6963      	ldr	r3, [r4, #20]
 8006fa6:	60a3      	str	r3, [r4, #8]
 8006fa8:	e7f3      	b.n	8006f92 <__swsetup_r+0x9e>
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	20000018 	.word	0x20000018

08006fb0 <_close_r>:
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	4d06      	ldr	r5, [pc, #24]	@ (8006fd0 <_close_r+0x20>)
 8006fb6:	0004      	movs	r4, r0
 8006fb8:	0008      	movs	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fa fa91 	bl	80014e2 <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d103      	bne.n	8006fcc <_close_r+0x1c>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d000      	beq.n	8006fcc <_close_r+0x1c>
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	200004bc 	.word	0x200004bc

08006fd4 <_lseek_r>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	0004      	movs	r4, r0
 8006fd8:	0008      	movs	r0, r1
 8006fda:	0011      	movs	r1, r2
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4d05      	ldr	r5, [pc, #20]	@ (8006ff8 <_lseek_r+0x24>)
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fa9e 	bl	8001524 <_lseek>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d103      	bne.n	8006ff4 <_lseek_r+0x20>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d000      	beq.n	8006ff4 <_lseek_r+0x20>
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	200004bc 	.word	0x200004bc

08006ffc <_read_r>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	0004      	movs	r4, r0
 8007000:	0008      	movs	r0, r1
 8007002:	0011      	movs	r1, r2
 8007004:	001a      	movs	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	4d05      	ldr	r5, [pc, #20]	@ (8007020 <_read_r+0x24>)
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa fa4c 	bl	80014a8 <_read>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d103      	bne.n	800701c <_read_r+0x20>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d000      	beq.n	800701c <_read_r+0x20>
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	bd70      	pop	{r4, r5, r6, pc}
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	200004bc 	.word	0x200004bc

08007024 <_sbrk_r>:
 8007024:	2300      	movs	r3, #0
 8007026:	b570      	push	{r4, r5, r6, lr}
 8007028:	4d06      	ldr	r5, [pc, #24]	@ (8007044 <_sbrk_r+0x20>)
 800702a:	0004      	movs	r4, r0
 800702c:	0008      	movs	r0, r1
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	f7fa fa84 	bl	800153c <_sbrk>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d103      	bne.n	8007040 <_sbrk_r+0x1c>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d000      	beq.n	8007040 <_sbrk_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	200004bc 	.word	0x200004bc

08007048 <_write_r>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	0004      	movs	r4, r0
 800704c:	0008      	movs	r0, r1
 800704e:	0011      	movs	r1, r2
 8007050:	001a      	movs	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	4d05      	ldr	r5, [pc, #20]	@ (800706c <_write_r+0x24>)
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	f7f9 fdde 	bl	8000c18 <_write>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d103      	bne.n	8007068 <_write_r+0x20>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d000      	beq.n	8007068 <_write_r+0x20>
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	bd70      	pop	{r4, r5, r6, pc}
 800706a:	46c0      	nop			@ (mov r8, r8)
 800706c:	200004bc 	.word	0x200004bc

08007070 <memchr>:
 8007070:	b2c9      	uxtb	r1, r1
 8007072:	1882      	adds	r2, r0, r2
 8007074:	4290      	cmp	r0, r2
 8007076:	d101      	bne.n	800707c <memchr+0xc>
 8007078:	2000      	movs	r0, #0
 800707a:	4770      	bx	lr
 800707c:	7803      	ldrb	r3, [r0, #0]
 800707e:	428b      	cmp	r3, r1
 8007080:	d0fb      	beq.n	800707a <memchr+0xa>
 8007082:	3001      	adds	r0, #1
 8007084:	e7f6      	b.n	8007074 <memchr+0x4>
	...

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr
