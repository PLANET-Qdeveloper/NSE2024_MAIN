
noshiro_bottom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007218  08007218  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007218  08007218  00008218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007220  08007220  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007224  08007224  00008224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007228  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000068  08007290  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08007290  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f09  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003291  00000000  00000000  0001ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00022230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef1  00000000  00000000  00023548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d5  00000000  00000000  00024439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001706b  00000000  00000000  0003ee0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fe5  00000000  00000000  00055e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  000fbea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00100bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007078 	.word	0x08007078

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08007078 	.word	0x08007078

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <LTC2460_READ>:
    }
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
    return LTC2460_Success;
}

LTC2460_StatusTypeDef LTC2460_READ(LTC2460_HandleTypeDef *ltc2460, uint16_t *value) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b087      	sub	sp, #28
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
	uint8_t pRxData[2] = {};
 800063a:	230c      	movs	r3, #12
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2200      	movs	r2, #0
 8000640:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_RESET);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6858      	ldr	r0, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	891b      	ldrh	r3, [r3, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f001 fbf8 	bl	8001e42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f001 f812 	bl	800167c <HAL_Delay>
    if(!ltc2460->receive_only && HAL_GPIO_ReadPin(ltc2460->miso, ltc2460->miso_num) == GPIO_PIN_SET){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7c9b      	ldrb	r3, [r3, #18]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d114      	bne.n	800068a <LTC2460_READ+0x5a>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8a1b      	ldrh	r3, [r3, #16]
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f001 fbcc 	bl	8001e08 <HAL_GPIO_ReadPin>
 8000670:	0003      	movs	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d109      	bne.n	800068a <LTC2460_READ+0x5a>
        HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6858      	ldr	r0, [r3, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	891b      	ldrh	r3, [r3, #8]
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f001 fbde 	bl	8001e42 <HAL_GPIO_WritePin>
        return LTC2460_NotYetConverted;
 8000686:	2301      	movs	r3, #1
 8000688:	e04a      	b.n	8000720 <LTC2460_READ+0xf0>
    }
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6858      	ldr	r0, [r3, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	891b      	ldrh	r3, [r3, #8]
 8000692:	2201      	movs	r2, #1
 8000694:	0019      	movs	r1, r3
 8000696:	f001 fbd4 	bl	8001e42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 ffee 	bl	800167c <HAL_Delay>
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_RESET);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	891b      	ldrh	r3, [r3, #8]
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f001 fbc9 	bl	8001e42 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef stat;
	if(ltc2460->receive_only){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7c9b      	ldrb	r3, [r3, #18]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <LTC2460_READ+0xa0>
		stat = HAL_SPI_Receive(ltc2460->spi, (uint8_t *)value,2, 100 );
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	230f      	movs	r3, #15
 80006be:	18fc      	adds	r4, r7, r3
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	2202      	movs	r2, #2
 80006c6:	f002 fb83 	bl	8002dd0 <HAL_SPI_Receive>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
 80006ce:	e00e      	b.n	80006ee <LTC2460_READ+0xbe>
	}else{
		stat = HAL_SPI_TransmitReceive(ltc2460->spi, ltc2460->pTxData, (uint8_t *)value, 2, 100);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3314      	adds	r3, #20
 80006d8:	0019      	movs	r1, r3
 80006da:	230f      	movs	r3, #15
 80006dc:	18fc      	adds	r4, r7, r3
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	2364      	movs	r3, #100	@ 0x64
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	f002 fcc5 	bl	8003074 <HAL_SPI_TransmitReceive>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
	}
	HAL_Delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 ffc4 	bl	800167c <HAL_Delay>
    HAL_GPIO_WritePin(ltc2460->ss, ltc2460->ss_num, GPIO_PIN_SET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6858      	ldr	r0, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	891b      	ldrh	r3, [r3, #8]
 80006fc:	2201      	movs	r2, #1
 80006fe:	0019      	movs	r1, r3
 8000700:	f001 fb9f 	bl	8001e42 <HAL_GPIO_WritePin>
    if(stat != HAL_OK){
 8000704:	220f      	movs	r2, #15
 8000706:	18bb      	adds	r3, r7, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <LTC2460_READ+0xe8>
        return stat + 1;
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	e003      	b.n	8000720 <LTC2460_READ+0xf0>
    }

    HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 ffaf 	bl	800167c <HAL_Delay>

    return LTC2460_Success;
 800071e:	2300      	movs	r3, #0
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b005      	add	sp, #20
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <main+0x114>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f005 fc12 	bl	8005f60 <setbuf>
	ltc2460.speed = 0;
 800073c:	4b40      	ldr	r3, [pc, #256]	@ (8000840 <main+0x118>)
 800073e:	2200      	movs	r2, #0
 8000740:	74da      	strb	r2, [r3, #19]
	ltc2460.spi = &hspi2;
 8000742:	4b3f      	ldr	r3, [pc, #252]	@ (8000840 <main+0x118>)
 8000744:	4a3f      	ldr	r2, [pc, #252]	@ (8000844 <main+0x11c>)
 8000746:	601a      	str	r2, [r3, #0]
	ltc2460.miso = GPIOB;
 8000748:	4b3d      	ldr	r3, [pc, #244]	@ (8000840 <main+0x118>)
 800074a:	4a3f      	ldr	r2, [pc, #252]	@ (8000848 <main+0x120>)
 800074c:	60da      	str	r2, [r3, #12]
	ltc2460.ss = GPIOD;
 800074e:	4b3c      	ldr	r3, [pc, #240]	@ (8000840 <main+0x118>)
 8000750:	4a3e      	ldr	r2, [pc, #248]	@ (800084c <main+0x124>)
 8000752:	605a      	str	r2, [r3, #4]
	ltc2460.miso_num = GPIO_PIN_14;
 8000754:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <main+0x118>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	01d2      	lsls	r2, r2, #7
 800075a:	821a      	strh	r2, [r3, #16]
	ltc2460.ss_num = GPIO_PIN_0;
 800075c:	4b38      	ldr	r3, [pc, #224]	@ (8000840 <main+0x118>)
 800075e:	2201      	movs	r2, #1
 8000760:	811a      	strh	r2, [r3, #8]
	ltc2460.receive_only = 1;
 8000762:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <main+0x118>)
 8000764:	2201      	movs	r2, #1
 8000766:	749a      	strb	r2, [r3, #18]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 ff4c 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f88a 	bl	8000884 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = FLASH_BASE;
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <main+0x128>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	0512      	lsls	r2, r2, #20
 8000776:	609a      	str	r2, [r3, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f9dc 	bl	8000b34 <MX_GPIO_Init>
  MX_SPI2_Init();
 800077c:	f000 f8ca 	bl	8000914 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000780:	f000 f908 	bl	8000994 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000784:	f000 f954 	bl	8000a30 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8000788:	f000 f9a0 	bl	8000acc <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800078c:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <main+0x120>)
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fb55 	bl	8001e42 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, rx_Buff_V, RX_BUFF_SIZE_VALVE);
 8000798:	492e      	ldr	r1, [pc, #184]	@ (8000854 <main+0x12c>)
 800079a:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <main+0x130>)
 800079c:	221a      	movs	r2, #26
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 fba2 	bl	8003ee8 <HAL_UART_Receive_IT>

  HAL_UART_Receive_IT(&huart2, rx_Buff_3, RX_BUFF_SIZE_MAIN3);
 80007a4:	492d      	ldr	r1, [pc, #180]	@ (800085c <main+0x134>)
 80007a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <main+0x138>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 fb9c 	bl	8003ee8 <HAL_UART_Receive_IT>

  HAL_UART_Receive_IT(&huart4, rx_Buff_PC, 1);
 80007b0:	492c      	ldr	r1, [pc, #176]	@ (8000864 <main+0x13c>)
 80007b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <main+0x140>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fb96 	bl	8003ee8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t voltage;
    LTC2460_READ(&ltc2460, &voltage);
 80007bc:	1cba      	adds	r2, r7, #2
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <main+0x118>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff ff34 	bl	8000630 <LTC2460_READ>
    int voltage_micro = voltage * 109;
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	236d      	movs	r3, #109	@ 0x6d
 80007d0:	4353      	muls	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
    printf("voltage_raw: %d voltage: %d.%06d\r\n",voltage_micro, voltage_micro/1000000, voltage_micro%1000000);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4925      	ldr	r1, [pc, #148]	@ (800086c <main+0x144>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fd27 	bl	800022c <__divsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	001c      	movs	r4, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4921      	ldr	r1, [pc, #132]	@ (800086c <main+0x144>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff fe06 	bl	80003f8 <__aeabi_idivmod>
 80007ec:	000b      	movs	r3, r1
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	481f      	ldr	r0, [pc, #124]	@ (8000870 <main+0x148>)
 80007f2:	0022      	movs	r2, r4
 80007f4:	f005 fda4 	bl	8006340 <iprintf>
    voltage_send = voltage_micro / 100000;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	491e      	ldr	r1, [pc, #120]	@ (8000874 <main+0x14c>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fd15 	bl	800022c <__divsi3>
 8000802:	0003      	movs	r3, r0
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <main+0x150>)
 8000808:	701a      	strb	r2, [r3, #0]

    send_MAIN3(tx_Buff_3);
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <main+0x154>)
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fb85 	bl	8000f1c <send_MAIN3>
    printf("Voltage_send:%d\r\n", voltage_send);
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <main+0x150>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	001a      	movs	r2, r3
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <main+0x158>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f005 fd8f 	bl	8006340 <iprintf>
    HAL_UART_Transmit(&huart2, tx_Buff_3, TX_BUFF_SIZE_MAIN3, 10);
 8000822:	4916      	ldr	r1, [pc, #88]	@ (800087c <main+0x154>)
 8000824:	480e      	ldr	r0, [pc, #56]	@ (8000860 <main+0x138>)
 8000826:	230a      	movs	r3, #10
 8000828:	220a      	movs	r2, #10
 800082a:	f003 fab9 	bl	8003da0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800082e:	23fa      	movs	r3, #250	@ 0xfa
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 ff22 	bl	800167c <HAL_Delay>
  {
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	e7bf      	b.n	80007bc <main+0x94>
 800083c:	20000018 	.word	0x20000018
 8000840:	200002ec 	.word	0x200002ec
 8000844:	20000084 	.word	0x20000084
 8000848:	50000400 	.word	0x50000400
 800084c:	50000c00 	.word	0x50000c00
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	200002ac 	.word	0x200002ac
 8000858:	200000e8 	.word	0x200000e8
 800085c:	200002a4 	.word	0x200002a4
 8000860:	2000017c 	.word	0x2000017c
 8000864:	200002d8 	.word	0x200002d8
 8000868:	20000210 	.word	0x20000210
 800086c:	000f4240 	.word	0x000f4240
 8000870:	08007090 	.word	0x08007090
 8000874:	000186a0 	.word	0x000186a0
 8000878:	200002e8 	.word	0x200002e8
 800087c:	200002c8 	.word	0x200002c8
 8000880:	080070b4 	.word	0x080070b4

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b093      	sub	sp, #76	@ 0x4c
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2410      	movs	r4, #16
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2338      	movs	r3, #56	@ 0x38
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f005 fdc3 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2310      	movs	r3, #16
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f005 fdbc 	bl	8006420 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fae5 	bl	8001e7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	0052      	lsls	r2, r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2240      	movs	r2, #64	@ 0x40
 80008ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fb1d 	bl	8001f14 <HAL_RCC_OscConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008de:	f000 fb7f 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	003b      	movs	r3, r7
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e8:	003b      	movs	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	003b      	movs	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fa:	003b      	movs	r3, r7
 80008fc:	2100      	movs	r1, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fe22 	bl	8002548 <HAL_RCC_ClockConfig>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000908:	f000 fb6a 	bl	8000fe0 <Error_Handler>
  }
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b013      	add	sp, #76	@ 0x4c
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_SPI2_Init+0x78>)
 800091a:	4a1d      	ldr	r2, [pc, #116]	@ (8000990 <MX_SPI2_Init+0x7c>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_SPI2_Init+0x78>)
 8000920:	2282      	movs	r2, #130	@ 0x82
 8000922:	0052      	lsls	r2, r2, #1
 8000924:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_SPI2_Init+0x78>)
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	00d2      	lsls	r2, r2, #3
 800092c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_SPI2_Init+0x78>)
 8000930:	22f0      	movs	r2, #240	@ 0xf0
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_SPI2_Init+0x78>)
 8000938:	2202      	movs	r2, #2
 800093a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_SPI2_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_SPI2_Init+0x78>)
 8000944:	2280      	movs	r2, #128	@ 0x80
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_SPI2_Init+0x78>)
 800094c:	2230      	movs	r2, #48	@ 0x30
 800094e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_SPI2_Init+0x78>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <MX_SPI2_Init+0x78>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_SPI2_Init+0x78>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_SPI2_Init+0x78>)
 8000964:	2207      	movs	r2, #7
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_SPI2_Init+0x78>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <MX_SPI2_Init+0x78>)
 8000970:	2208      	movs	r2, #8
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <MX_SPI2_Init+0x78>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 f972 	bl	8002c60 <HAL_SPI_Init>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 fb2e 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	20000084 	.word	0x20000084
 8000990:	40003800 	.word	0x40003800

08000994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <MX_USART1_UART_Init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009a0:	22e1      	movs	r2, #225	@ 0xe1
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f003 f988 	bl	8003cf4 <HAL_UART_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 fafa 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f005 f9d5 	bl	8005da0 <HAL_UARTEx_SetTxFifoThreshold>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 faf1 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f005 fa0c 	bl	8005e20 <HAL_UARTEx_SetRxFifoThreshold>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 fae8 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <MX_USART1_UART_Init+0x94>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f005 f98a 	bl	8005d2c <HAL_UARTEx_DisableFifoMode>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 fae0 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	200000e8 	.word	0x200000e8
 8000a2c:	40013800 	.word	0x40013800

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a36:	4a24      	ldr	r2, [pc, #144]	@ (8000ac8 <MX_USART2_UART_Init+0x98>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a3c:	22e1      	movs	r2, #225	@ 0xe1
 8000a3e:	0252      	lsls	r2, r2, #9
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f003 f93a 	bl	8003cf4 <HAL_UART_Init>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 faac 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f005 f987 	bl	8005da0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 faa3 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f005 f9be 	bl	8005e20 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 fa9a 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f005 f93c 	bl	8005d2c <HAL_UARTEx_DisableFifoMode>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 fa92 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	2000017c 	.word	0x2000017c
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <MX_USART4_UART_Init+0x64>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000ad8:	22e1      	movs	r2, #225	@ 0xe1
 8000ada:	0252      	lsls	r2, r2, #9
 8000adc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <MX_USART4_UART_Init+0x60>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f003 f8ec 	bl	8003cf4 <HAL_UART_Init>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 fa5e 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	20000210 	.word	0x20000210
 8000b30:	40004c00 	.word	0x40004c00

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	240c      	movs	r4, #12
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2314      	movs	r3, #20
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f005 fc6b 	bl	8006420 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b56:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6e:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b80:	2108      	movs	r1, #8
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_GPIO_Init+0xc8>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <MX_GPIO_Init+0xcc>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f952 	bl	8001e42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_GPIO_Init+0xd0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f94c 	bl	8001e42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <MX_GPIO_Init+0xcc>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 ffb9 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bce:	0021      	movs	r1, r4
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2201      	movs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	4a06      	ldr	r2, [pc, #24]	@ (8000c04 <MX_GPIO_Init+0xd0>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f000 ffa6 	bl	8001b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b009      	add	sp, #36	@ 0x24
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	50000c00 	.word	0x50000c00
 8000c04:	50000400 	.word	0x50000400

08000c08 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart4,(uint8_t *)ptr,len,10);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <_write+0x24>)
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	f003 f8bf 	bl	8003da0 <HAL_UART_Transmit>
  return len;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b004      	add	sp, #16
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000210 	.word	0x20000210

08000c30 <calculateChecksum>:

void calculateChecksum(uint8_t *Buff, uint8_t Buff_size, uint8_t *ck_a, uint8_t *ck_b){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	230b      	movs	r3, #11
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	1c0a      	adds	r2, r1, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	*ck_a = 0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    *ck_b = 0;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < (Buff_size - 2); i++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e014      	b.n	8000c80 <calculateChecksum+0x50>
        *ck_a = (*ck_a + Buff[i]) & 0xFF;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	18cb      	adds	r3, r1, r3
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	701a      	strb	r2, [r3, #0]
        *ck_b = (*ck_b + *ck_a) & 0xFF;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	18d3      	adds	r3, r2, r3
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < (Buff_size - 2); i++) {
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	230b      	movs	r3, #11
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b02      	subs	r3, #2
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbe3      	blt.n	8000c56 <calculateChecksum+0x26>
    }
	printf("ck_a : %d\r\n", *ck_a);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001a      	movs	r2, r3
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <calculateChecksum+0x88>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f005 fb51 	bl	8006340 <iprintf>
	printf("ck_b : %d\r\n", *ck_b);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <calculateChecksum+0x8c>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f005 fb49 	bl	8006340 <iprintf>
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b006      	add	sp, #24
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	080070c8 	.word	0x080070c8
 8000cbc:	080070d4 	.word	0x080070d4

08000cc0 <checkUART>:


int checkUART(uint8_t *rx_Buff, uint8_t *ck_a, uint8_t *ck_b){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  int flag = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
	if (((rx_Buff[0] << 8) | (rx_Buff[1])) == ADDRESS || rx_Buff[2] == 2){
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	3201      	adds	r2, #1
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	23fd      	movs	r3, #253	@ 0xfd
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <checkUART+0x30>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3302      	adds	r3, #2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d124      	bne.n	8000d3a <checkUART+0x7a>
        Buff_size = rx_Buff[4];
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	791a      	ldrb	r2, [r3, #4]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <checkUART+0x88>)
 8000cf6:	701a      	strb	r2, [r3, #0]
		calculateChecksum(rx_Buff, Buff_size, ck_a, ck_b);
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <checkUART+0x88>)
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff ff95 	bl	8000c30 <calculateChecksum>

		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <checkUART+0x88>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	68f9      	ldr	r1, [r7, #12]
 8000d12:	18cb      	adds	r3, r1, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d009      	beq.n	8000d2e <checkUART+0x6e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <checkUART+0x88>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	68f9      	ldr	r1, [r7, #12]
 8000d26:	18cb      	adds	r3, r1, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d102      	bne.n	8000d34 <checkUART+0x74>
			flag = 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d32:	e004      	b.n	8000d3e <checkUART+0x7e>
		}else{
			flag = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
		if (*ck_a == rx_Buff[Buff_size-2] || *ck_b == rx_Buff[Buff_size-1]){
 8000d38:	e001      	b.n	8000d3e <checkUART+0x7e>
		}

	}else{
		flag = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
	}
  return flag;
 8000d3e:	697b      	ldr	r3, [r7, #20]
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b006      	add	sp, #24
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200002da 	.word	0x200002da

08000d4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  //Valve
	if (huart->Instance == USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a57      	ldr	r2, [pc, #348]	@ (8000eb8 <HAL_UART_RxCpltCallback+0x16c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12a      	bne.n	8000db4 <HAL_UART_RxCpltCallback+0x68>
	{
    printf("Received from Valve\r\n");
 8000d5e:	4b57      	ldr	r3, [pc, #348]	@ (8000ebc <HAL_UART_RxCpltCallback+0x170>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f005 fb53 	bl	800640c <puts>
    if(rx_Buff_V[0] == 0x24)
 8000d66:	4b56      	ldr	r3, [pc, #344]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x174>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b24      	cmp	r3, #36	@ 0x24
 8000d6c:	d111      	bne.n	8000d92 <HAL_UART_RxCpltCallback+0x46>
    {
    	TankPressure = rx_Buff_V[1];
 8000d6e:	4b54      	ldr	r3, [pc, #336]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x174>)
 8000d70:	785a      	ldrb	r2, [r3, #1]
 8000d72:	4b54      	ldr	r3, [pc, #336]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x178>)
 8000d74:	701a      	strb	r2, [r3, #0]
    	PHASE = rx_Buff_V[4];
 8000d76:	4b52      	ldr	r3, [pc, #328]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x174>)
 8000d78:	791a      	ldrb	r2, [r3, #4]
 8000d7a:	4b53      	ldr	r3, [pc, #332]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x17c>)
 8000d7c:	701a      	strb	r2, [r3, #0]
    	printf("TP:%d\r\nPHASE:%d\r\n", TankPressure, PHASE);
 8000d7e:	4b51      	ldr	r3, [pc, #324]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x178>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	4b50      	ldr	r3, [pc, #320]	@ (8000ec8 <HAL_UART_RxCpltCallback+0x17c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b50      	ldr	r3, [pc, #320]	@ (8000ecc <HAL_UART_RxCpltCallback+0x180>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f005 fad7 	bl	8006340 <iprintf>
    }
	  flag = 0;
 8000d92:	4b4f      	ldr	r3, [pc, #316]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x184>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
	  MX_USART1_UART_Init();
 8000d98:	f7ff fdfc 	bl	8000994 <MX_USART1_UART_Init>
	  memset(rx_Buff_V, 0, RX_BUFF_SIZE_VALVE);
 8000d9c:	4b48      	ldr	r3, [pc, #288]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x174>)
 8000d9e:	221a      	movs	r2, #26
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f005 fb3c 	bl	8006420 <memset>
	  HAL_UART_Receive_IT(&huart1, rx_Buff_V, RX_BUFF_SIZE_VALVE);
 8000da8:	4945      	ldr	r1, [pc, #276]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x174>)
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x188>)
 8000dac:	221a      	movs	r2, #26
 8000dae:	0018      	movs	r0, r3
 8000db0:	f003 f89a 	bl	8003ee8 <HAL_UART_Receive_IT>
	}
  // Main3
	if (huart->Instance == USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a47      	ldr	r2, [pc, #284]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x18c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d13b      	bne.n	8000e36 <HAL_UART_RxCpltCallback+0xea>
	{
	  printf("Received from Main3 %d\r\n", rx_Buff_3[5]);
 8000dbe:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x194>)
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f005 fab9 	bl	8006340 <iprintf>
	  if(checkUART(rx_Buff_3, &ck_a_rx3, &ck_b_rx3))
 8000dce:	4a45      	ldr	r2, [pc, #276]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x198>)
 8000dd0:	4945      	ldr	r1, [pc, #276]	@ (8000ee8 <HAL_UART_RxCpltCallback+0x19c>)
 8000dd2:	4b42      	ldr	r3, [pc, #264]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ff73 	bl	8000cc0 <checkUART>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d01a      	beq.n	8000e14 <HAL_UART_RxCpltCallback+0xc8>
	  {
	    if(rx_Buff_3[3] == MAIN1)
 8000dde:	4b3f      	ldr	r3, [pc, #252]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000de0:	78db      	ldrb	r3, [r3, #3]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d104      	bne.n	8000df0 <HAL_UART_RxCpltCallback+0xa4>
	    {
	      command = rx_Buff_3[5];
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000de8:	795a      	ldrb	r2, [r3, #5]
 8000dea:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <HAL_UART_RxCpltCallback+0x1a0>)
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e011      	b.n	8000e14 <HAL_UART_RxCpltCallback+0xc8>
	    }else if(rx_Buff_3[3] == VALVE)
 8000df0:	4b3a      	ldr	r3, [pc, #232]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000df2:	78db      	ldrb	r3, [r3, #3]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10d      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0xc8>
	    {
	      HAL_UART_Transmit(&huart1, &rx_Buff_3[5], 1, 10);
 8000df8:	493d      	ldr	r1, [pc, #244]	@ (8000ef0 <HAL_UART_RxCpltCallback+0x1a4>)
 8000dfa:	4836      	ldr	r0, [pc, #216]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x188>)
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f002 ffce 	bl	8003da0 <HAL_UART_Transmit>
	      printf("SendToValve:%c\r\n", rx_Buff_3[5]);
 8000e04:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000e06:	795b      	ldrb	r3, [r3, #5]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef4 <HAL_UART_RxCpltCallback+0x1a8>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f005 fa96 	bl	8006340 <iprintf>
	    }
	  }
	  flag = 0;
 8000e14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x184>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
		MX_USART2_UART_Init();
 8000e1a:	f7ff fe09 	bl	8000a30 <MX_USART2_UART_Init>
		memset(rx_Buff_3, 0, RX_BUFF_SIZE_MAIN3);
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	2100      	movs	r1, #0
 8000e24:	0018      	movs	r0, r3
 8000e26:	f005 fafb 	bl	8006420 <memset>
		HAL_UART_Receive_IT(&huart2, rx_Buff_3, RX_BUFF_SIZE_MAIN3);
 8000e2a:	492c      	ldr	r1, [pc, #176]	@ (8000edc <HAL_UART_RxCpltCallback+0x190>)
 8000e2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <HAL_UART_RxCpltCallback+0x1ac>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	0018      	movs	r0, r3
 8000e32:	f003 f859 	bl	8003ee8 <HAL_UART_Receive_IT>
	}
  // PC
	if (huart->Instance == USART4)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a30      	ldr	r2, [pc, #192]	@ (8000efc <HAL_UART_RxCpltCallback+0x1b0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d136      	bne.n	8000eae <HAL_UART_RxCpltCallback+0x162>
	{
	  printf("Receive from PC:");
 8000e40:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_UART_RxCpltCallback+0x1b4>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f005 fa7c 	bl	8006340 <iprintf>

	  printf("%d", rx_Buff_PC[0]);
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1b8>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_UART_RxCpltCallback+0x1bc>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f005 fa74 	bl	8006340 <iprintf>
	  tx_Buff_V[0] = rx_Buff_PC[0];
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1b8>)
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <HAL_UART_RxCpltCallback+0x1c0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
	  printf("\r\n");
 8000e60:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_UART_RxCpltCallback+0x1c4>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f005 fad2 	bl	800640c <puts>
	    for(int i = 0; i < TX_BUFF_SIZE_VALVE; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e00c      	b.n	8000e88 <HAL_UART_RxCpltCallback+0x13c>
        {
          printf("%#x", tx_Buff_V[i]);
 8000e6e:	4a27      	ldr	r2, [pc, #156]	@ (8000f0c <HAL_UART_RxCpltCallback+0x1c0>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	001a      	movs	r2, r3
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_UART_RxCpltCallback+0x1c8>)
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f005 fa5f 	bl	8006340 <iprintf>
	    for(int i = 0; i < TX_BUFF_SIZE_VALVE; i++)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	ddef      	ble.n	8000e6e <HAL_UART_RxCpltCallback+0x122>
        }
	    printf("\r\n");
 8000e8e:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <HAL_UART_RxCpltCallback+0x1c4>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f005 fabb 	bl	800640c <puts>
	  HAL_UART_Transmit(&huart1, tx_Buff_V, TX_BUFF_SIZE_VALVE, 10);
 8000e96:	491d      	ldr	r1, [pc, #116]	@ (8000f0c <HAL_UART_RxCpltCallback+0x1c0>)
 8000e98:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x188>)
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f002 ff7f 	bl	8003da0 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart4, rx_Buff_PC, 1);
 8000ea2:	4918      	ldr	r1, [pc, #96]	@ (8000f04 <HAL_UART_RxCpltCallback+0x1b8>)
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_UART_RxCpltCallback+0x1cc>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f003 f81d 	bl	8003ee8 <HAL_UART_Receive_IT>
	}
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	080070e0 	.word	0x080070e0
 8000ec0:	200002ac 	.word	0x200002ac
 8000ec4:	200002e5 	.word	0x200002e5
 8000ec8:	200002e4 	.word	0x200002e4
 8000ecc:	080070f8 	.word	0x080070f8
 8000ed0:	200002e0 	.word	0x200002e0
 8000ed4:	200000e8 	.word	0x200000e8
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	200002a4 	.word	0x200002a4
 8000ee0:	0800710c 	.word	0x0800710c
 8000ee4:	200002dc 	.word	0x200002dc
 8000ee8:	200002db 	.word	0x200002db
 8000eec:	200002d9 	.word	0x200002d9
 8000ef0:	200002a9 	.word	0x200002a9
 8000ef4:	08007128 	.word	0x08007128
 8000ef8:	2000017c 	.word	0x2000017c
 8000efc:	40004c00 	.word	0x40004c00
 8000f00:	0800713c 	.word	0x0800713c
 8000f04:	200002d8 	.word	0x200002d8
 8000f08:	08007150 	.word	0x08007150
 8000f0c:	200002d4 	.word	0x200002d4
 8000f10:	08007154 	.word	0x08007154
 8000f14:	08007158 	.word	0x08007158
 8000f18:	20000210 	.word	0x20000210

08000f1c <send_MAIN3>:
	calculateChecksum(tx_Buff, TX_BUFF_SIZE_VALVE, &ck_a_tx3, &ck_b_tx3);
	tx_Buff[TX_BUFF_SIZE_VALVE - 2] = ck_a_tx3;
	tx_Buff[TX_BUFF_SIZE_VALVE - 1] = ck_b_tx3;
}

void send_MAIN3(uint8_t *tx_Buff){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	sendto = MAIN3;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <send_MAIN3+0x84>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	701a      	strb	r2, [r3, #0]
	sendfrom = MAIN1;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <send_MAIN3+0x88>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]

    tx_Buff[0] = (ADDRESS >> 8) & 0xFF;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2207      	movs	r2, #7
 8000f34:	701a      	strb	r2, [r3, #0]
    tx_Buff[1] = ADDRESS & 0xFF;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	22e8      	movs	r2, #232	@ 0xe8
 8000f3c:	701a      	strb	r2, [r3, #0]
    tx_Buff[2] = sendto;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3302      	adds	r3, #2
 8000f42:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <send_MAIN3+0x84>)
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	701a      	strb	r2, [r3, #0]
    tx_Buff[3] = sendfrom;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <send_MAIN3+0x88>)
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	701a      	strb	r2, [r3, #0]
    tx_Buff[4] = TX_BUFF_SIZE_MAIN3;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	220a      	movs	r2, #10
 8000f58:	701a      	strb	r2, [r3, #0]
    tx_Buff[5] = voltage_send;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3305      	adds	r3, #5
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <send_MAIN3+0x8c>)
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	701a      	strb	r2, [r3, #0]
    tx_Buff[6] = PHASE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3306      	adds	r3, #6
 8000f68:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <send_MAIN3+0x90>)
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
    tx_Buff[7] = TankPressure;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3307      	adds	r3, #7
 8000f72:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <send_MAIN3+0x94>)
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	701a      	strb	r2, [r3, #0]

    calculateChecksum(tx_Buff, TX_BUFF_SIZE_MAIN3, &ck_a_tx3, &ck_b_tx3);
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <send_MAIN3+0x98>)
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <send_MAIN3+0x9c>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	210a      	movs	r1, #10
 8000f80:	f7ff fe56 	bl	8000c30 <calculateChecksum>
    tx_Buff[TX_BUFF_SIZE_MAIN3 - 2] = ck_a_tx3;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3308      	adds	r3, #8
 8000f88:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <send_MAIN3+0x9c>)
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	701a      	strb	r2, [r3, #0]
    tx_Buff[TX_BUFF_SIZE_MAIN3 - 1] = ck_b_tx3;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3309      	adds	r3, #9
 8000f92:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <send_MAIN3+0x98>)
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	701a      	strb	r2, [r3, #0]
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002e6 	.word	0x200002e6
 8000fa4:	200002e7 	.word	0x200002e7
 8000fa8:	200002e8 	.word	0x200002e8
 8000fac:	200002e4 	.word	0x200002e4
 8000fb0:	200002e5 	.word	0x200002e5
 8000fb4:	200002de 	.word	0x200002de
 8000fb8:	200002dd 	.word	0x200002dd

08000fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fce:	f000 fb39 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_MspInit+0x6c>)
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_MspInit+0x6c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_MspInit+0x6c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <HAL_MspInit+0x6c>)
 800100c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_MspInit+0x6c>)
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0549      	lsls	r1, r1, #21
 8001014:	430a      	orrs	r2, r1
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x6c>)
 800101a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	4013      	ands	r3, r2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2003      	movs	r0, #3
 800102c:	f000 fbe8 	bl	8001800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fbfa 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2004      	movs	r0, #4
 800103c:	f000 fbe0 	bl	8001800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001040:	2004      	movs	r0, #4
 8001042:	f000 fbf2 	bl	800182a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001046:	23c0      	movs	r3, #192	@ 0xc0
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fb3a 	bl	80016c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b08b      	sub	sp, #44	@ 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	2414      	movs	r4, #20
 8001066:	193b      	adds	r3, r7, r4
 8001068:	0018      	movs	r0, r3
 800106a:	2314      	movs	r3, #20
 800106c:	001a      	movs	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f005 f9d6 	bl	8006420 <memset>
  if(hspi->Instance==SPI2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_SPI_MspInit+0x8c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d130      	bne.n	80010e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 8001080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	01c9      	lsls	r1, r1, #7
 8001088:	430a      	orrs	r2, r1
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 800108e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 80010a0:	2102      	movs	r1, #2
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_SPI_MspInit+0x90>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010aa:	2202      	movs	r2, #2
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	22c0      	movs	r2, #192	@ 0xc0
 80010b6:	01d2      	lsls	r2, r2, #7
 80010b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	0021      	movs	r1, r4
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2202      	movs	r2, #2
 80010c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_SPI_MspInit+0x94>)
 80010d8:	0019      	movs	r1, r3
 80010da:	0010      	movs	r0, r2
 80010dc:	f000 fd30 	bl	8001b40 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b00b      	add	sp, #44	@ 0x2c
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	40003800 	.word	0x40003800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	50000400 	.word	0x50000400

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b09b      	sub	sp, #108	@ 0x6c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	2354      	movs	r3, #84	@ 0x54
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f005 f98a 	bl	8006420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	2420      	movs	r4, #32
 800110e:	193b      	adds	r3, r7, r4
 8001110:	0018      	movs	r0, r3
 8001112:	2334      	movs	r3, #52	@ 0x34
 8001114:	001a      	movs	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	f005 f982 	bl	8006420 <memset>
  if(huart->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a6d      	ldr	r2, [pc, #436]	@ (80012d8 <HAL_UART_MspInit+0x1e4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d148      	bne.n	80011b8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	193b      	adds	r3, r7, r4
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fbdb 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113e:	f7ff ff4f 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001142:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001146:	4b65      	ldr	r3, [pc, #404]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	01c9      	lsls	r1, r1, #7
 800114c:	430a      	orrs	r2, r1
 800114e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001150:	4b62      	ldr	r3, [pc, #392]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	4013      	ands	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b5f      	ldr	r3, [pc, #380]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001162:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	@ 0x34
 800116a:	4b5c      	ldr	r3, [pc, #368]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 800116c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001176:	2154      	movs	r1, #84	@ 0x54
 8001178:	187b      	adds	r3, r7, r1
 800117a:	22c0      	movs	r2, #192	@ 0xc0
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2202      	movs	r2, #2
 8001184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	187a      	adds	r2, r7, r1
 800119a:	23a0      	movs	r3, #160	@ 0xa0
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	0011      	movs	r1, r2
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 fccd 	bl	8001b40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201b      	movs	r0, #27
 80011ac:	f000 fb28 	bl	8001800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b0:	201b      	movs	r0, #27
 80011b2:	f000 fb3a 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80011b6:	e08b      	b.n	80012d0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a48      	ldr	r2, [pc, #288]	@ (80012e0 <HAL_UART_MspInit+0x1ec>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d148      	bne.n	8001254 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c2:	2120      	movs	r1, #32
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 fb8c 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80011dc:	f7ff ff00 	bl	8000fe0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e0:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 80011e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011e4:	4b3d      	ldr	r3, [pc, #244]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	0289      	lsls	r1, r1, #10
 80011ea:	430a      	orrs	r2, r1
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 80011f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	029b      	lsls	r3, r3, #10
 80011f6:	4013      	ands	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 800120a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120c:	2201      	movs	r2, #1
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001214:	2154      	movs	r1, #84	@ 0x54
 8001216:	187b      	adds	r3, r7, r1
 8001218:	220c      	movs	r2, #12
 800121a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2202      	movs	r2, #2
 8001220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2201      	movs	r2, #1
 8001232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	187a      	adds	r2, r7, r1
 8001236:	23a0      	movs	r3, #160	@ 0xa0
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f000 fc7f 	bl	8001b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201c      	movs	r0, #28
 8001248:	f000 fada 	bl	8001800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800124c:	201c      	movs	r0, #28
 800124e:	f000 faec 	bl	800182a <HAL_NVIC_EnableIRQ>
}
 8001252:	e03d      	b.n	80012d0 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART4)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <HAL_UART_MspInit+0x1f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d138      	bne.n	80012d0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART4_CLK_ENABLE();
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001264:	2180      	movs	r1, #128	@ 0x80
 8001266:	0309      	lsls	r1, r1, #12
 8001268:	430a      	orrs	r2, r1
 800126a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 800126e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	031b      	lsls	r3, r3, #12
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 800127c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_UART_MspInit+0x1e8>)
 8001288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001292:	2154      	movs	r1, #84	@ 0x54
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2203      	movs	r2, #3
 8001298:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2202      	movs	r2, #2
 800129e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2204      	movs	r2, #4
 80012b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	187a      	adds	r2, r7, r1
 80012b4:	23a0      	movs	r3, #160	@ 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	0011      	movs	r1, r2
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fc40 	bl	8001b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	201d      	movs	r0, #29
 80012c6:	f000 fa9b 	bl	8001800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80012ca:	201d      	movs	r0, #29
 80012cc:	f000 faad 	bl	800182a <HAL_NVIC_EnableIRQ>
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b01b      	add	sp, #108	@ 0x6c
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40004c00 	.word	0x40004c00

080012e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012f0:	232b      	movs	r3, #43	@ 0x2b
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <HAL_InitTick+0xf0>)
 80012fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_InitTick+0xf0>)
 80012fe:	2110      	movs	r1, #16
 8001300:	430a      	orrs	r2, r1
 8001302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <HAL_InitTick+0xf0>)
 8001306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001308:	2210      	movs	r2, #16
 800130a:	4013      	ands	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001310:	230c      	movs	r3, #12
 8001312:	18fa      	adds	r2, r7, r3
 8001314:	2410      	movs	r4, #16
 8001316:	193b      	adds	r3, r7, r4
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fabe 	bl	800289c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800132c:	f001 faa0 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8001330:	0003      	movs	r3, r0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001334:	e004      	b.n	8001340 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001336:	f001 fa9b 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 800133a:	0003      	movs	r3, r0
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001342:	4926      	ldr	r1, [pc, #152]	@ (80013dc <HAL_InitTick+0xf4>)
 8001344:	0018      	movs	r0, r3
 8001346:	f7fe fee7 	bl	8000118 <__udivsi3>
 800134a:	0003      	movs	r3, r0
 800134c:	3b01      	subs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_InitTick+0xf8>)
 8001352:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <HAL_InitTick+0xfc>)
 8001354:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <HAL_InitTick+0xf8>)
 8001358:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <HAL_InitTick+0x100>)
 800135a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_InitTick+0xf8>)
 800135e:	6a3a      	ldr	r2, [r7, #32]
 8001360:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_InitTick+0xf8>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_InitTick+0xf8>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_InitTick+0xf8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001374:	252b      	movs	r5, #43	@ 0x2b
 8001376:	197c      	adds	r4, r7, r5
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_InitTick+0xf8>)
 800137a:	0018      	movs	r0, r3
 800137c:	f002 fa30 	bl	80037e0 <HAL_TIM_Base_Init>
 8001380:	0003      	movs	r3, r0
 8001382:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001384:	197b      	adds	r3, r7, r5
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d11e      	bne.n	80013ca <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800138c:	197c      	adds	r4, r7, r5
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_InitTick+0xf8>)
 8001390:	0018      	movs	r0, r3
 8001392:	f002 fa85 	bl	80038a0 <HAL_TIM_Base_Start_IT>
 8001396:	0003      	movs	r3, r0
 8001398:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800139a:	197b      	adds	r3, r7, r5
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d113      	bne.n	80013ca <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80013a2:	2011      	movs	r0, #17
 80013a4:	f000 fa41 	bl	800182a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d809      	bhi.n	80013c2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	0019      	movs	r1, r3
 80013b4:	2011      	movs	r0, #17
 80013b6:	f000 fa23 	bl	8001800 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <HAL_InitTick+0x104>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e003      	b.n	80013ca <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80013c2:	232b      	movs	r3, #43	@ 0x2b
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80013ca:	232b      	movs	r3, #43	@ 0x2b
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b00c      	add	sp, #48	@ 0x30
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	000f4240 	.word	0x000f4240
 80013e0:	20000304 	.word	0x20000304
 80013e4:	40001000 	.word	0x40001000
 80013e8:	000003e7 	.word	0x000003e7
 80013ec:	20000004 	.word	0x20000004

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001404:	46c0      	nop			@ (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001422:	f000 fadf 	bl	80019e4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800143e:	0018      	movs	r0, r3
 8001440:	f002 fa8a 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	20000304 	.word	0x20000304

08001450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <USART1_IRQHandler+0x14>)
 8001456:	0018      	movs	r0, r3
 8001458:	f002 fda4 	bl	8003fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	200000e8 	.word	0x200000e8

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <USART2_IRQHandler+0x14>)
 800146e:	0018      	movs	r0, r3
 8001470:	f002 fd98 	bl	8003fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	2000017c 	.word	0x2000017c

08001480 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <USART3_4_LPUART1_IRQHandler+0x14>)
 8001486:	0018      	movs	r0, r3
 8001488:	f002 fd8c 	bl	8003fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	20000210 	.word	0x20000210

08001498 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	e000      	b.n	80014ae <_read+0x16>
 80014ac:	bf00      	nop
 80014ae:	0001      	movs	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b006      	add	sp, #24
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014da:	2301      	movs	r3, #1
 80014dc:	425b      	negs	r3, r3
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	0192      	lsls	r2, r2, #6
 80014f6:	605a      	str	r2, [r3, #4]
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}

08001514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	18d3      	adds	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f004 ff8c 	bl	8006478 <__errno>
 8001560:	0003      	movs	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	18d2      	adds	r2, r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b006      	add	sp, #24
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20009000 	.word	0x20009000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000350 	.word	0x20000350
 8001594:	200004c0 	.word	0x200004c0

08001598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <SystemInit+0x14>)
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	0512      	lsls	r2, r2, #20
 80015a2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b0:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b4:	f7ff fff0 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <LoopForever+0x6>)
  ldr r1, =_edata
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <LoopForever+0xe>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d0:	4c0a      	ldr	r4, [pc, #40]	@ (80015fc <LoopForever+0x16>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015de:	f004 ff51 	bl	8006484 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015e2:	f7ff f8a1 	bl	8000728 <main>

080015e6 <LoopForever>:

LoopForever:
  b LoopForever
 80015e6:	e7fe      	b.n	80015e6 <LoopForever>
  ldr   r0, =_estack
 80015e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015f4:	08007228 	.word	0x08007228
  ldr r2, =_sbss
 80015f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015fc:	200004c0 	.word	0x200004c0

08001600 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_COMP_IRQHandler>
	...

08001604 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_Init+0x3c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Init+0x3c>)
 8001616:	2180      	movs	r1, #128	@ 0x80
 8001618:	0049      	lsls	r1, r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161e:	2003      	movs	r0, #3
 8001620:	f7ff fe62 	bl	80012e8 <HAL_InitTick>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d003      	beq.n	8001630 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e001      	b.n	8001634 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fcdc 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781b      	ldrb	r3, [r3, #0]
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b002      	add	sp, #8
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	001a      	movs	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	18d2      	adds	r2, r2, r3
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	20000008 	.word	0x20000008
 8001664:	20000354 	.word	0x20000354

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	20000354 	.word	0x20000354

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff0 	bl	8001668 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	001a      	movs	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	f7ff ffe0 	bl	8001668 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	46c0      	nop			@ (mov r8, r8)
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	40010000 	.word	0x40010000
 80016ec:	fffff9ff 	.word	0xfffff9ff

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b7f      	cmp	r3, #127	@ 0x7f
 8001702:	d809      	bhi.n	8001718 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	001a      	movs	r2, r3
 800170a:	231f      	movs	r3, #31
 800170c:	401a      	ands	r2, r3
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <__NVIC_EnableIRQ+0x30>)
 8001710:	2101      	movs	r1, #1
 8001712:	4091      	lsls	r1, r2
 8001714:	000a      	movs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	0002      	movs	r2, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b7f      	cmp	r3, #127	@ 0x7f
 8001738:	d828      	bhi.n	800178c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173a:	4a2f      	ldr	r2, [pc, #188]	@ (80017f8 <__NVIC_SetPriority+0xd4>)
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	33c0      	adds	r3, #192	@ 0xc0
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	589b      	ldr	r3, [r3, r2]
 800174a:	1dfa      	adds	r2, r7, #7
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	0011      	movs	r1, r2
 8001750:	2203      	movs	r2, #3
 8001752:	400a      	ands	r2, r1
 8001754:	00d2      	lsls	r2, r2, #3
 8001756:	21ff      	movs	r1, #255	@ 0xff
 8001758:	4091      	lsls	r1, r2
 800175a:	000a      	movs	r2, r1
 800175c:	43d2      	mvns	r2, r2
 800175e:	401a      	ands	r2, r3
 8001760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	22ff      	movs	r2, #255	@ 0xff
 8001768:	401a      	ands	r2, r3
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	0018      	movs	r0, r3
 8001770:	2303      	movs	r3, #3
 8001772:	4003      	ands	r3, r0
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001778:	481f      	ldr	r0, [pc, #124]	@ (80017f8 <__NVIC_SetPriority+0xd4>)
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	430a      	orrs	r2, r1
 8001784:	33c0      	adds	r3, #192	@ 0xc0
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800178a:	e031      	b.n	80017f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178c:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <__NVIC_SetPriority+0xd8>)
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	0019      	movs	r1, r3
 8001794:	230f      	movs	r3, #15
 8001796:	400b      	ands	r3, r1
 8001798:	3b08      	subs	r3, #8
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3306      	adds	r3, #6
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	18d3      	adds	r3, r2, r3
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1dfa      	adds	r2, r7, #7
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	0011      	movs	r1, r2
 80017ac:	2203      	movs	r2, #3
 80017ae:	400a      	ands	r2, r1
 80017b0:	00d2      	lsls	r2, r2, #3
 80017b2:	21ff      	movs	r1, #255	@ 0xff
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	43d2      	mvns	r2, r2
 80017ba:	401a      	ands	r2, r3
 80017bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	019b      	lsls	r3, r3, #6
 80017c2:	22ff      	movs	r2, #255	@ 0xff
 80017c4:	401a      	ands	r2, r3
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	0018      	movs	r0, r3
 80017cc:	2303      	movs	r3, #3
 80017ce:	4003      	ands	r3, r0
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <__NVIC_SetPriority+0xd8>)
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	001c      	movs	r4, r3
 80017dc:	230f      	movs	r3, #15
 80017de:	4023      	ands	r3, r4
 80017e0:	3b08      	subs	r3, #8
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	430a      	orrs	r2, r1
 80017e6:	3306      	adds	r3, #6
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	18c3      	adds	r3, r0, r3
 80017ec:	3304      	adds	r3, #4
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b003      	add	sp, #12
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	210f      	movs	r1, #15
 800180c:	187b      	adds	r3, r7, r1
 800180e:	1c02      	adds	r2, r0, #0
 8001810:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	187b      	adds	r3, r7, r1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff ff81 	bl	8001724 <__NVIC_SetPriority>
}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	0002      	movs	r2, r0
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ff57 	bl	80016f0 <__NVIC_EnableIRQ>
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e050      	b.n	8001900 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2225      	movs	r2, #37	@ 0x25
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d008      	beq.n	800187c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2204      	movs	r2, #4
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e041      	b.n	8001900 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	210e      	movs	r1, #14
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	491c      	ldr	r1, [pc, #112]	@ (8001908 <HAL_DMA_Abort+0xbc>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	438a      	bics	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_DMA_Abort+0xc0>)
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	221c      	movs	r2, #28
 80018b6:	4013      	ands	r3, r2
 80018b8:	2201      	movs	r2, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_DMA_Abort+0xc0>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00c      	beq.n	80018ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	490a      	ldr	r1, [pc, #40]	@ (8001908 <HAL_DMA_Abort+0xbc>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80018ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2225      	movs	r2, #37	@ 0x25
 80018f2:	2101      	movs	r1, #1
 80018f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2224      	movs	r2, #36	@ 0x24
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}
 8001908:	fffffeff 	.word	0xfffffeff
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001918:	210f      	movs	r1, #15
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2225      	movs	r2, #37	@ 0x25
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d006      	beq.n	800193a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e049      	b.n	80019ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	210e      	movs	r1, #14
 8001946:	438a      	bics	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	438a      	bics	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	491d      	ldr	r1, [pc, #116]	@ (80019dc <HAL_DMA_Abort_IT+0xcc>)
 8001966:	400a      	ands	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_DMA_Abort_IT+0xd0>)
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	221c      	movs	r2, #28
 8001974:	4013      	ands	r3, r2
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_DMA_Abort_IT+0xd0>)
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001988:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199c:	490f      	ldr	r1, [pc, #60]	@ (80019dc <HAL_DMA_Abort_IT+0xcc>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2225      	movs	r2, #37	@ 0x25
 80019b0:	2101      	movs	r1, #1
 80019b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	0010      	movs	r0, r2
 80019cc:	4798      	blx	r3
    }
  }
  return status;
 80019ce:	230f      	movs	r3, #15
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	781b      	ldrb	r3, [r3, #0]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	fffffeff 	.word	0xfffffeff
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  uint32_t param;
  uint32_t error;

  /* Save flash errors. */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80019ea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad8 <HAL_FLASH_IRQHandler+0xf4>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	603b      	str	r3, [r7, #0]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d003      	beq.n	8001a06 <HAL_FLASH_IRQHandler+0x22>
  {
    /* return bank number */
    param = pFlash.Banks;
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e013      	b.n	8001a2e <HAL_FLASH_IRQHandler+0x4a>
  }
  else
  {
    /* Clear operation only for page erase or program */
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	615a      	str	r2, [r3, #20]

    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8001a16:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <HAL_FLASH_IRQHandler+0xfc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_FLASH_IRQHandler+0x44>
    {
      /* return address being programmed */
      param = pFlash.Address;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	e002      	b.n	8001a2e <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /* return page number being erased */
      param = pFlash.Page;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	607b      	str	r3, [r7, #4]
    }
  }

  /* B] Check errors */
  if (error != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00f      	beq.n	8001a54 <HAL_FLASH_IRQHandler+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a3e:	605a      	str	r2, [r3, #4]

    /* clear error flags */
    FLASH->SR = FLASH_SR_ERRORS;
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a42:	4a25      	ldr	r2, [pc, #148]	@ (8001ad8 <HAL_FLASH_IRQHandler+0xf4>)
 8001a44:	611a      	str	r2, [r3, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f852 	bl	8001af8 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d028      	beq.n	8001ab0 <HAL_FLASH_IRQHandler+0xcc>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR = FLASH_SR_EOP;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d11a      	bne.n	8001aa2 <HAL_FLASH_IRQHandler+0xbe>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a74:	619a      	str	r2, [r3, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0x00U)
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00d      	beq.n	8001a9a <HAL_FLASH_IRQHandler+0xb6>
      {
        /* Increment page number */
        pFlash.Page++;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a86:	615a      	str	r2, [r3, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	0019      	movs	r1, r3
 8001a92:	0010      	movs	r0, r2
 8001a94:	f000 f838 	bl	8001b08 <FLASH_PageErase>
 8001a98:	e006      	b.n	8001aa8 <HAL_FLASH_IRQHandler+0xc4>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e002      	b.n	8001aa8 <HAL_FLASH_IRQHandler+0xc4>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f81c 	bl	8001ae8 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d108      	bne.n	8001aca <HAL_FLASH_IRQHandler+0xe6>
  {
    /* Disable End of Operation and Error interrupts */
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_FLASH_IRQHandler+0xf0>)
 8001abe:	4909      	ldr	r1, [pc, #36]	@ (8001ae4 <HAL_FLASH_IRQHandler+0x100>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_FLASH_IRQHandler+0xf8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
  }
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	0000c3fa 	.word	0x0000c3fa
 8001adc:	20000358 	.word	0x20000358
 8001ae0:	00040001 	.word	0x00040001
 8001ae4:	fcffffff 	.word	0xfcffffff

08001ae8 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <FLASH_PageErase+0x2c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <FLASH_PageErase+0x30>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	00da      	lsls	r2, r3, #3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <FLASH_PageErase+0x2c>)
 8001b26:	4905      	ldr	r1, [pc, #20]	@ (8001b3c <FLASH_PageErase+0x34>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000
 8001b38:	ffffe007 	.word	0xffffe007
 8001b3c:	00010002 	.word	0x00010002

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e147      	b.n	8001de0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d100      	bne.n	8001b68 <HAL_GPIO_Init+0x28>
 8001b66:	e138      	b.n	8001dda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d005      	beq.n	8001b80 <HAL_GPIO_Init+0x40>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d130      	bne.n	8001be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	0013      	movs	r3, r2
 8001b90:	43da      	mvns	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	2201      	movs	r2, #1
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d017      	beq.n	8001c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d123      	bne.n	8001c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	58d3      	ldr	r3, [r2, r3]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	43da      	mvns	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2107      	movs	r1, #7
 8001c56:	400b      	ands	r3, r1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	6939      	ldr	r1, [r7, #16]
 8001c70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	401a      	ands	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	23c0      	movs	r3, #192	@ 0xc0
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x174>
 8001cb2:	e092      	b.n	8001dda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001cb4:	4a50      	ldr	r2, [pc, #320]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3318      	adds	r3, #24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	589b      	ldr	r3, [r3, r2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	220f      	movs	r2, #15
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	23a0      	movs	r3, #160	@ 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x1ca>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	@ (8001dfc <HAL_GPIO_Init+0x2bc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x1c6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a44      	ldr	r2, [pc, #272]	@ (8001e00 <HAL_GPIO_Init+0x2c0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x1c2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a43      	ldr	r2, [pc, #268]	@ (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x1be>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	400a      	ands	r2, r1
 8001d12:	00d2      	lsls	r2, r2, #3
 8001d14:	4093      	lsls	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d1c:	4936      	ldr	r1, [pc, #216]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3318      	adds	r3, #24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d2a:	4b33      	ldr	r3, [pc, #204]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	035b      	lsls	r3, r3, #13
 8001d42:	4013      	ands	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	039b      	lsls	r3, r3, #14
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d80:	2384      	movs	r3, #132	@ 0x84
 8001d82:	58d3      	ldr	r3, [r2, r3]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da4:	4914      	ldr	r1, [pc, #80]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001da6:	2284      	movs	r2, #132	@ 0x84
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001dac:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	58d3      	ldr	r3, [r2, r3]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	025b      	lsls	r3, r3, #9
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dd2:	4909      	ldr	r1, [pc, #36]	@ (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	40da      	lsrs	r2, r3
 8001de8:	1e13      	subs	r3, r2, #0
 8001dea:	d000      	beq.n	8001dee <HAL_GPIO_Init+0x2ae>
 8001dec:	e6b0      	b.n	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b006      	add	sp, #24
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000800 	.word	0x50000800
 8001e04:	50000c00 	.word	0x50000c00

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	000a      	movs	r2, r1
 8001e12:	1cbb      	adds	r3, r7, #2
 8001e14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	1cba      	adds	r2, r7, #2
 8001e1c:	8812      	ldrh	r2, [r2, #0]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e34:	230f      	movs	r3, #15
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	1c02      	adds	r2, r0, #0
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	1c7b      	adds	r3, r7, #1
 8001e56:	1c0a      	adds	r2, r1, #0
 8001e58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5a:	1c7b      	adds	r3, r7, #1
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6c:	1cbb      	adds	r3, r7, #2
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d11f      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	189b      	adds	r3, r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4912      	ldr	r1, [pc, #72]	@ (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f932 	bl	8000118 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eba:	e008      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e001      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e009      	b.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d0ed      	beq.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	fffff9ff 	.word	0xfffff9ff
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	000f4240 	.word	0x000f4240

08001efc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	23e0      	movs	r3, #224	@ 0xe0
 8001f06:	01db      	lsls	r3, r3, #7
 8001f08:	4013      	ands	r3, r2
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e2fe      	b.n	8002524 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1e>
 8001f30:	e07c      	b.n	800202c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4bc3      	ldr	r3, [pc, #780]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2238      	movs	r2, #56	@ 0x38
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4bc0      	ldr	r3, [pc, #768]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2203      	movs	r2, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3e>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d10b      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	4bb9      	ldr	r3, [pc, #740]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d062      	beq.n	800202a <HAL_RCC_OscConfig+0x116>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d15e      	bne.n	800202a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e2d9      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x78>
 8001f7c:	4bb0      	ldr	r3, [pc, #704]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4baf      	ldr	r3, [pc, #700]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0249      	lsls	r1, r1, #9
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0xba>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	23a0      	movs	r3, #160	@ 0xa0
 8001f92:	02db      	lsls	r3, r3, #11
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10e      	bne.n	8001fb6 <HAL_RCC_OscConfig+0xa2>
 8001f98:	4ba9      	ldr	r3, [pc, #676]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4ba8      	ldr	r3, [pc, #672]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	2180      	movs	r1, #128	@ 0x80
 8001fa0:	02c9      	lsls	r1, r1, #11
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	4ba6      	ldr	r3, [pc, #664]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4ba5      	ldr	r3, [pc, #660]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	0249      	lsls	r1, r1, #9
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0xba>
 8001fb6:	4ba2      	ldr	r3, [pc, #648]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4ba1      	ldr	r3, [pc, #644]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	49a1      	ldr	r1, [pc, #644]	@ (8002244 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	4b9f      	ldr	r3, [pc, #636]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	499f      	ldr	r1, [pc, #636]	@ (8002248 <HAL_RCC_OscConfig+0x334>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d014      	beq.n	8002000 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb47 	bl	8001668 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fb42 	bl	8001668 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e298      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	4b93      	ldr	r3, [pc, #588]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xcc>
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fb32 	bl	8001668 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200a:	f7ff fb2d 	bl	8001668 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	@ 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e283      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201c:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0xf6>
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_RCC_OscConfig+0x124>
 8002036:	e099      	b.n	800216c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002038:	4b81      	ldr	r3, [pc, #516]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2238      	movs	r2, #56	@ 0x38
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002042:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b10      	cmp	r3, #16
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0x144>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d002      	beq.n	800205e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d135      	bne.n	80020ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205e:	4b78      	ldr	r3, [pc, #480]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4013      	ands	r3, r2
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x162>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e256      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b72      	ldr	r3, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a74      	ldr	r2, [pc, #464]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	4b6e      	ldr	r3, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002092:	4b6b      	ldr	r3, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x33c>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020a6:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	2207      	movs	r2, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	4a68      	ldr	r2, [pc, #416]	@ (8002254 <HAL_RCC_OscConfig+0x340>)
 80020b2:	40da      	lsrs	r2, r3
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HAL_RCC_OscConfig+0x344>)
 80020b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b8:	4b68      	ldr	r3, [pc, #416]	@ (800225c <HAL_RCC_OscConfig+0x348>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff f913 	bl	80012e8 <HAL_InitTick>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d051      	beq.n	800216a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e22c      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002250 <HAL_RCC_OscConfig+0x33c>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020e6:	4b56      	ldr	r3, [pc, #344]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b55      	ldr	r3, [pc, #340]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0049      	lsls	r1, r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fab8 	bl	8001668 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff fab3 	bl	8001668 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e209      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4013      	ands	r3, r2
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b48      	ldr	r3, [pc, #288]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_RCC_OscConfig+0x338>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	021a      	lsls	r2, r3, #8
 800212c:	4b44      	ldr	r3, [pc, #272]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e01b      	b.n	800216c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002134:	4b42      	ldr	r3, [pc, #264]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800213a:	4949      	ldr	r1, [pc, #292]	@ (8002260 <HAL_RCC_OscConfig+0x34c>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fa92 	bl	8001668 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff fa8d 	bl	8001668 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1e3      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4013      	ands	r3, r2
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x236>
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2208      	movs	r2, #8
 8002172:	4013      	ands	r3, r2
 8002174:	d047      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002176:	4b32      	ldr	r3, [pc, #200]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2238      	movs	r2, #56	@ 0x38
 800217c:	4013      	ands	r3, r2
 800217e:	2b18      	cmp	r3, #24
 8002180:	d10a      	bne.n	8002198 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002182:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d03c      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d138      	bne.n	8002206 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e1c5      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021a4:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fa5c 	bl	8001668 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b6:	f7ff fa57 	bl	8001668 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1ad      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f1      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2a2>
 80021d2:	e018      	b.n	8002206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fa42 	bl	8001668 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fa3d 	bl	8001668 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e193      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021fc:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d1f1      	bne.n	80021ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	d100      	bne.n	8002212 <HAL_RCC_OscConfig+0x2fe>
 8002210:	e0c6      	b.n	80023a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	231f      	movs	r3, #31
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2238      	movs	r2, #56	@ 0x38
 8002220:	4013      	ands	r3, r2
 8002222:	2b20      	cmp	r3, #32
 8002224:	d11e      	bne.n	8002264 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x32c>)
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d100      	bne.n	8002232 <HAL_RCC_OscConfig+0x31e>
 8002230:	e0b6      	b.n	80023a0 <HAL_RCC_OscConfig+0x48c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d000      	beq.n	800223c <HAL_RCC_OscConfig+0x328>
 800223a:	e0b1      	b.n	80023a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e171      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
 8002240:	40021000 	.word	0x40021000
 8002244:	fffeffff 	.word	0xfffeffff
 8002248:	fffbffff 	.word	0xfffbffff
 800224c:	ffff80ff 	.word	0xffff80ff
 8002250:	ffffc7ff 	.word	0xffffc7ff
 8002254:	00f42400 	.word	0x00f42400
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004
 8002260:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002264:	4bb1      	ldr	r3, [pc, #708]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	055b      	lsls	r3, r3, #21
 800226c:	4013      	ands	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x360>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x362>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d011      	beq.n	800229e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4bac      	ldr	r3, [pc, #688]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800227c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800227e:	4bab      	ldr	r3, [pc, #684]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002280:	2180      	movs	r1, #128	@ 0x80
 8002282:	0549      	lsls	r1, r1, #21
 8002284:	430a      	orrs	r2, r1
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002288:	4ba8      	ldr	r3, [pc, #672]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800228a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	4ba4      	ldr	r3, [pc, #656]	@ (8002530 <HAL_RCC_OscConfig+0x61c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d11a      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002530 <HAL_RCC_OscConfig+0x61c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002530 <HAL_RCC_OscConfig+0x61c>)
 80022b0:	2180      	movs	r1, #128	@ 0x80
 80022b2:	0049      	lsls	r1, r1, #1
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f9d6 	bl	8001668 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7ff f9d1 	bl	8001668 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e127      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d4:	4b96      	ldr	r3, [pc, #600]	@ (8002530 <HAL_RCC_OscConfig+0x61c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4013      	ands	r3, r2
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3e2>
 80022e8:	4b90      	ldr	r3, [pc, #576]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80022ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ec:	4b8f      	ldr	r3, [pc, #572]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x41c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x404>
 80022fe:	4b8b      	ldr	r3, [pc, #556]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002302:	4b8a      	ldr	r3, [pc, #552]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002304:	2104      	movs	r1, #4
 8002306:	430a      	orrs	r2, r1
 8002308:	65da      	str	r2, [r3, #92]	@ 0x5c
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800230c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230e:	4b87      	ldr	r3, [pc, #540]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x41c>
 8002318:	4b84      	ldr	r3, [pc, #528]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800231a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800231c:	4b83      	ldr	r3, [pc, #524]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800231e:	2101      	movs	r1, #1
 8002320:	438a      	bics	r2, r1
 8002322:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002324:	4b81      	ldr	r3, [pc, #516]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002328:	4b80      	ldr	r3, [pc, #512]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800232a:	2104      	movs	r1, #4
 800232c:	438a      	bics	r2, r1
 800232e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d014      	beq.n	8002362 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff f996 	bl	8001668 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002340:	e009      	b.n	8002356 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff f991 	bl	8001668 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a79      	ldr	r2, [pc, #484]	@ (8002534 <HAL_RCC_OscConfig+0x620>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0e6      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002356:	4b75      	ldr	r3, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x42e>
 8002360:	e013      	b.n	800238a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff f981 	bl	8001668 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236a:	e009      	b.n	8002380 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff f97c 	bl	8001668 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	4a6f      	ldr	r2, [pc, #444]	@ (8002534 <HAL_RCC_OscConfig+0x620>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0d1      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	4b6a      	ldr	r3, [pc, #424]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800239a:	4967      	ldr	r1, [pc, #412]	@ (8002538 <HAL_RCC_OscConfig+0x624>)
 800239c:	400a      	ands	r2, r1
 800239e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d100      	bne.n	80023aa <HAL_RCC_OscConfig+0x496>
 80023a8:	e0bb      	b.n	8002522 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023aa:	4b60      	ldr	r3, [pc, #384]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2238      	movs	r2, #56	@ 0x38
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4a4>
 80023b6:	e07b      	b.n	80024b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d156      	bne.n	800246e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b5a      	ldr	r3, [pc, #360]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80023c6:	495d      	ldr	r1, [pc, #372]	@ (800253c <HAL_RCC_OscConfig+0x628>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff f94c 	bl	8001668 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff f947 	bl	8001668 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e09d      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	049b      	lsls	r3, r3, #18
 80023f0:	4013      	ands	r3, r2
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b4d      	ldr	r3, [pc, #308]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a51      	ldr	r2, [pc, #324]	@ (8002540 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002420:	431a      	orrs	r2, r3
 8002422:	4b42      	ldr	r3, [pc, #264]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002424:	430a      	orrs	r2, r1
 8002426:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b40      	ldr	r3, [pc, #256]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800242e:	2180      	movs	r1, #128	@ 0x80
 8002430:	0449      	lsls	r1, r1, #17
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002436:	4b3d      	ldr	r3, [pc, #244]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b3c      	ldr	r3, [pc, #240]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 800243c:	2180      	movs	r1, #128	@ 0x80
 800243e:	0549      	lsls	r1, r1, #21
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f910 	bl	8001668 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff f90b 	bl	8001668 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e061      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	049b      	lsls	r3, r3, #18
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x53a>
 800246c:	e059      	b.n	8002522 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b2e      	ldr	r3, [pc, #184]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002474:	4931      	ldr	r1, [pc, #196]	@ (800253c <HAL_RCC_OscConfig+0x628>)
 8002476:	400a      	ands	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7ff f8f5 	bl	8001668 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7ff f8f0 	bl	8001668 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e046      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002496:	4b25      	ldr	r3, [pc, #148]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	049b      	lsls	r3, r3, #18
 800249e:	4013      	ands	r3, r2
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024a2:	4b22      	ldr	r3, [pc, #136]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b21      	ldr	r3, [pc, #132]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80024a8:	4926      	ldr	r1, [pc, #152]	@ (8002544 <HAL_RCC_OscConfig+0x630>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	e038      	b.n	8002522 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e033      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x618>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2203      	movs	r2, #3
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d126      	bne.n	800251e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2270      	movs	r2, #112	@ 0x70
 80024d4:	401a      	ands	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11f      	bne.n	800251e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	23fe      	movs	r3, #254	@ 0xfe
 80024e2:	01db      	lsls	r3, r3, #7
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d116      	bne.n	800251e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	23f8      	movs	r3, #248	@ 0xf8
 80024f4:	039b      	lsls	r3, r3, #14
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10e      	bne.n	800251e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	23e0      	movs	r3, #224	@ 0xe0
 8002504:	051b      	lsls	r3, r3, #20
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0f5b      	lsrs	r3, r3, #29
 8002514:	075a      	lsls	r2, r3, #29
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b008      	add	sp, #32
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	00001388 	.word	0x00001388
 8002538:	efffffff 	.word	0xefffffff
 800253c:	feffffff 	.word	0xfeffffff
 8002540:	11c1808c 	.word	0x11c1808c
 8002544:	eefefffc 	.word	0xeefefffc

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0e9      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2207      	movs	r2, #7
 8002562:	4013      	ands	r3, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d91e      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b73      	ldr	r3, [pc, #460]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2207      	movs	r2, #7
 8002570:	4393      	bics	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	4b70      	ldr	r3, [pc, #448]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800257c:	f7ff f874 	bl	8001668 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002584:	e009      	b.n	800259a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7ff f86f 	bl	8001668 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	4a6a      	ldr	r2, [pc, #424]	@ (800273c <HAL_RCC_ClockConfig+0x1f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0ca      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800259a:	4b67      	ldr	r3, [pc, #412]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2207      	movs	r2, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1ee      	bne.n	8002586 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d015      	beq.n	80025de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2204      	movs	r2, #4
 80025b8:	4013      	ands	r3, r2
 80025ba:	d006      	beq.n	80025ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025bc:	4b60      	ldr	r3, [pc, #384]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80025c2:	21e0      	movs	r1, #224	@ 0xe0
 80025c4:	01c9      	lsls	r1, r1, #7
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002744 <HAL_RCC_ClockConfig+0x1fc>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	4b59      	ldr	r3, [pc, #356]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d057      	beq.n	8002698 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f0:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	029b      	lsls	r3, r3, #10
 80025f8:	4013      	ands	r3, r2
 80025fa:	d12b      	bne.n	8002654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e097      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d107      	bne.n	8002618 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002608:	4b4d      	ldr	r3, [pc, #308]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	049b      	lsls	r3, r3, #18
 8002610:	4013      	ands	r3, r2
 8002612:	d11f      	bne.n	8002654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e08b      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	4b47      	ldr	r3, [pc, #284]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4013      	ands	r3, r2
 800262a:	d113      	bne.n	8002654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e07f      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d106      	bne.n	8002646 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002638:	4b41      	ldr	r3, [pc, #260]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263c:	2202      	movs	r2, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d108      	bne.n	8002654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e074      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b3e      	ldr	r3, [pc, #248]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e06d      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002654:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2207      	movs	r2, #7
 800265a:	4393      	bics	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4b37      	ldr	r3, [pc, #220]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fffe 	bl	8001668 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002670:	e009      	b.n	8002686 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002672:	f7fe fff9 	bl	8001668 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <HAL_RCC_ClockConfig+0x1f4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e054      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2238      	movs	r2, #56	@ 0x38
 800268c:	401a      	ands	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	429a      	cmp	r2, r3
 8002696:	d1ec      	bne.n	8002672 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2207      	movs	r2, #7
 800269e:	4013      	ands	r3, r2
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d21e      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2207      	movs	r2, #7
 80026ac:	4393      	bics	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026b8:	f7fe ffd6 	bl	8001668 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c2:	f7fe ffd1 	bl	8001668 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <HAL_RCC_ClockConfig+0x1f4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e02c      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2207      	movs	r2, #7
 80026dc:	4013      	ands	r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1ee      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2204      	movs	r2, #4
 80026ea:	4013      	ands	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a15      	ldr	r2, [pc, #84]	@ (8002748 <HAL_RCC_ClockConfig+0x200>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002702:	f000 f829 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002706:	0001      	movs	r1, r0
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	220f      	movs	r2, #15
 8002710:	401a      	ands	r2, r3
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_RCC_ClockConfig+0x204>)
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	58d3      	ldr	r3, [r2, r3]
 8002718:	221f      	movs	r2, #31
 800271a:	4013      	ands	r3, r2
 800271c:	000a      	movs	r2, r1
 800271e:	40da      	lsrs	r2, r3
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCC_ClockConfig+0x208>)
 8002722:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_ClockConfig+0x20c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0018      	movs	r0, r3
 800272a:	f7fe fddd 	bl	80012e8 <HAL_InitTick>
 800272e:	0003      	movs	r3, r0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40022000 	.word	0x40022000
 800273c:	00001388 	.word	0x00001388
 8002740:	40021000 	.word	0x40021000
 8002744:	fffff0ff 	.word	0xfffff0ff
 8002748:	ffff8fff 	.word	0xffff8fff
 800274c:	0800715c 	.word	0x0800715c
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	4b3c      	ldr	r3, [pc, #240]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2238      	movs	r2, #56	@ 0x38
 8002764:	4013      	ands	r3, r2
 8002766:	d10f      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002768:	4b39      	ldr	r3, [pc, #228]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0adb      	lsrs	r3, r3, #11
 800276e:	2207      	movs	r2, #7
 8002770:	4013      	ands	r3, r2
 8002772:	2201      	movs	r2, #1
 8002774:	409a      	lsls	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	4835      	ldr	r0, [pc, #212]	@ (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 800277e:	f7fd fccb 	bl	8000118 <__udivsi3>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	e05d      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2238      	movs	r2, #56	@ 0x38
 800278e:	4013      	ands	r3, r2
 8002790:	2b08      	cmp	r3, #8
 8002792:	d102      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002794:	4b30      	ldr	r3, [pc, #192]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x100>)
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e054      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279a:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2238      	movs	r2, #56	@ 0x38
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d138      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2203      	movs	r2, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	2207      	movs	r2, #7
 80027b8:	4013      	ands	r3, r2
 80027ba:	3301      	adds	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	4824      	ldr	r0, [pc, #144]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x100>)
 80027c8:	f7fd fca6 	bl	8000118 <__udivsi3>
 80027cc:	0003      	movs	r3, r0
 80027ce:	0019      	movs	r1, r3
 80027d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	227f      	movs	r2, #127	@ 0x7f
 80027d8:	4013      	ands	r3, r2
 80027da:	434b      	muls	r3, r1
 80027dc:	617b      	str	r3, [r7, #20]
        break;
 80027de:	e00d      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	481c      	ldr	r0, [pc, #112]	@ (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027e4:	f7fd fc98 	bl	8000118 <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	0019      	movs	r1, r3
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	227f      	movs	r2, #127	@ 0x7f
 80027f4:	4013      	ands	r3, r2
 80027f6:	434b      	muls	r3, r1
 80027f8:	617b      	str	r3, [r7, #20]
        break;
 80027fa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0f5b      	lsrs	r3, r3, #29
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	3301      	adds	r3, #1
 8002808:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7fd fc83 	bl	8000118 <__udivsi3>
 8002812:	0003      	movs	r3, r0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	e015      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002818:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2238      	movs	r2, #56	@ 0x38
 800281e:	4013      	ands	r3, r2
 8002820:	2b20      	cmp	r3, #32
 8002822:	d103      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2238      	movs	r2, #56	@ 0x38
 8002832:	4013      	ands	r3, r2
 8002834:	2b18      	cmp	r3, #24
 8002836:	d103      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002838:	23fa      	movs	r3, #250	@ 0xfa
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	e001      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002844:	693b      	ldr	r3, [r7, #16]
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b006      	add	sp, #24
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	40021000 	.word	0x40021000
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200

0800285c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <HAL_RCC_GetHCLKFreq+0x10>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002874:	f7ff fff2 	bl	800285c <HAL_RCC_GetHCLKFreq>
 8002878:	0004      	movs	r4, r0
 800287a:	f7ff fb3f 	bl	8001efc <LL_RCC_GetAPB1Prescaler>
 800287e:	0003      	movs	r3, r0
 8002880:	0b1a      	lsrs	r2, r3, #12
 8002882:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	58d3      	ldr	r3, [r2, r3]
 8002888:	221f      	movs	r2, #31
 800288a:	4013      	ands	r3, r2
 800288c:	40dc      	lsrs	r4, r3
 800288e:	0023      	movs	r3, r4
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bdb0      	pop	{r4, r5, r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	0800719c 	.word	0x0800719c

0800289c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028ac:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <HAL_RCC_GetClockConfig+0x4c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2207      	movs	r2, #7
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCC_GetClockConfig+0x4c>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	23f0      	movs	r3, #240	@ 0xf0
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <HAL_RCC_GetClockConfig+0x4c>)
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	23e0      	movs	r3, #224	@ 0xe0
 80028cc:	01db      	lsls	r3, r3, #7
 80028ce:	401a      	ands	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_RCC_GetClockConfig+0x50>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2207      	movs	r2, #7
 80028da:	401a      	ands	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	46c0      	nop			@ (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40022000 	.word	0x40022000

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028f8:	2313      	movs	r3, #19
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2312      	movs	r3, #18
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d100      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002914:	e0a3      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2011      	movs	r0, #17
 8002918:	183b      	adds	r3, r7, r0
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4bc3      	ldr	r3, [pc, #780]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	055b      	lsls	r3, r3, #21
 8002926:	4013      	ands	r3, r2
 8002928:	d110      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4bc0      	ldr	r3, [pc, #768]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800292c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800292e:	4bbf      	ldr	r3, [pc, #764]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	0549      	lsls	r1, r1, #21
 8002934:	430a      	orrs	r2, r1
 8002936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002938:	4bbc      	ldr	r3, [pc, #752]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	183b      	adds	r3, r7, r0
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4bb7      	ldr	r3, [pc, #732]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	0049      	lsls	r1, r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295a:	f7fe fe85 	bl	8001668 <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002962:	e00b      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fe80 	bl	8001668 <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d904      	bls.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002972:	2313      	movs	r3, #19
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
        break;
 800297a:	e005      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297c:	4bac      	ldr	r3, [pc, #688]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d0ed      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002988:	2313      	movs	r3, #19
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d154      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002992:	4ba6      	ldr	r3, [pc, #664]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002996:	23c0      	movs	r3, #192	@ 0xc0
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d014      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	4aa0      	ldr	r2, [pc, #640]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029bc:	4b9b      	ldr	r3, [pc, #620]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	0249      	lsls	r1, r1, #9
 80029c2:	430a      	orrs	r2, r1
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c6:	4b99      	ldr	r3, [pc, #612]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ca:	4b98      	ldr	r3, [pc, #608]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029cc:	499a      	ldr	r1, [pc, #616]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d2:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2201      	movs	r2, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d016      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fe42 	bl	8001668 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e8:	e00c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fe3d 	bl	8001668 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	4a91      	ldr	r2, [pc, #580]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d904      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029fa:	2313      	movs	r3, #19
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
            break;
 8002a02:	e004      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	4b89      	ldr	r3, [pc, #548]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0ed      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a0e:	2313      	movs	r3, #19
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a18:	4b84      	ldr	r3, [pc, #528]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	4a85      	ldr	r2, [pc, #532]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2e:	2312      	movs	r3, #18
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2213      	movs	r2, #19
 8002a34:	18ba      	adds	r2, r7, r2
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e005      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	2312      	movs	r3, #18
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2213      	movs	r2, #19
 8002a42:	18ba      	adds	r2, r7, r2
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a48:	2311      	movs	r3, #17
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4b76      	ldr	r3, [pc, #472]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a56:	4b75      	ldr	r3, [pc, #468]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a58:	4979      	ldr	r1, [pc, #484]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a68:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b6d      	ldr	r3, [pc, #436]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a86:	4b69      	ldr	r3, [pc, #420]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	4a66      	ldr	r2, [pc, #408]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	4b56      	ldr	r3, [pc, #344]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae4:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	@ 0x80
 8002b1c:	01db      	lsls	r3, r3, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d015      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b22:	4b42      	ldr	r3, [pc, #264]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	0899      	lsrs	r1, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	05db      	lsls	r3, r3, #23
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b40:	4b3a      	ldr	r3, [pc, #232]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	031b      	lsls	r3, r3, #12
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	2240      	movs	r2, #64	@ 0x40
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b68:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	039b      	lsls	r3, r3, #14
 8002b76:	4013      	ands	r3, r2
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	4a35      	ldr	r2, [pc, #212]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b88:	4b28      	ldr	r3, [pc, #160]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	03db      	lsls	r3, r3, #15
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0449      	lsls	r1, r1, #17
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	03db      	lsls	r3, r3, #15
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d016      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	045b      	lsls	r3, r3, #17
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bd4:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bda:	2180      	movs	r1, #128	@ 0x80
 8002bdc:	0449      	lsls	r1, r1, #17
 8002bde:	430a      	orrs	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d016      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c14:	2180      	movs	r1, #128	@ 0x80
 8002c16:	0249      	lsls	r1, r1, #9
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	fffffcff 	.word	0xfffffcff
 8002c38:	fffeffff 	.word	0xfffeffff
 8002c3c:	00001388 	.word	0x00001388
 8002c40:	efffffff 	.word	0xefffffff
 8002c44:	fffff3ff 	.word	0xfffff3ff
 8002c48:	fff3ffff 	.word	0xfff3ffff
 8002c4c:	ffcfffff 	.word	0xffcfffff
 8002c50:	ffffcfff 	.word	0xffffcfff
 8002c54:	ffbfffff 	.word	0xffbfffff
 8002c58:	feffffff 	.word	0xfeffffff
 8002c5c:	ffff3fff 	.word	0xffff3fff

08002c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0a8      	b.n	8002dc4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	2382      	movs	r3, #130	@ 0x82
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d009      	beq.n	8002c9a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
 8002c8c:	e005      	b.n	8002c9a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	225d      	movs	r2, #93	@ 0x5d
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	225c      	movs	r2, #92	@ 0x5c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7fe f9d0 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225d      	movs	r2, #93	@ 0x5d
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2140      	movs	r1, #64	@ 0x40
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	23e0      	movs	r3, #224	@ 0xe0
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d902      	bls.n	8002ce6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e002      	b.n	8002cec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	015b      	lsls	r3, r3, #5
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	23f0      	movs	r3, #240	@ 0xf0
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d008      	beq.n	8002d0a <HAL_SPI_Init+0xaa>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	23e0      	movs	r3, #224	@ 0xe0
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	2382      	movs	r3, #130	@ 0x82
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	2384      	movs	r3, #132	@ 0x84
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2102      	movs	r1, #2
 8002d26:	400b      	ands	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	400b      	ands	r3, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6999      	ldr	r1, [r3, #24]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2138      	movs	r1, #56	@ 0x38
 8002d46:	400b      	ands	r3, r1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	400b      	ands	r3, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	0011      	movs	r1, r2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	401a      	ands	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	2204      	movs	r2, #4
 8002d70:	401a      	ands	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	2110      	movs	r1, #16
 8002d78:	400b      	ands	r3, r1
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d80:	2108      	movs	r1, #8
 8002d82:	400b      	ands	r3, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	23f0      	movs	r3, #240	@ 0xf0
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	400b      	ands	r3, r1
 8002d90:	431a      	orrs	r2, r3
 8002d92:	0011      	movs	r1, r2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	015b      	lsls	r3, r3, #5
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4907      	ldr	r1, [pc, #28]	@ (8002dcc <HAL_SPI_Init+0x16c>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	225d      	movs	r2, #93	@ 0x5d
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	fffff7ff 	.word	0xfffff7ff

08002dd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	1dbb      	adds	r3, r7, #6
 8002dde:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de0:	2117      	movs	r1, #23
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	225d      	movs	r2, #93	@ 0x5d
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d003      	beq.n	8002dfc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002dfa:	e12b      	b.n	8003054 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	2382      	movs	r3, #130	@ 0x82
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d113      	bne.n	8002e30 <HAL_SPI_Receive+0x60>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	225d      	movs	r2, #93	@ 0x5d
 8002e14:	2104      	movs	r1, #4
 8002e16:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e18:	1dbb      	adds	r3, r7, #6
 8002e1a:	881c      	ldrh	r4, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	0023      	movs	r3, r4
 8002e28:	f000 f924 	bl	8003074 <HAL_SPI_TransmitReceive>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	e118      	b.n	8003062 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	225c      	movs	r2, #92	@ 0x5c
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Receive+0x6e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e111      	b.n	8003062 <HAL_SPI_Receive+0x292>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	225c      	movs	r2, #92	@ 0x5c
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e46:	f7fe fc0f 	bl	8001668 <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_SPI_Receive+0x8c>
 8002e54:	1dbb      	adds	r3, r7, #6
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002e5c:	2317      	movs	r3, #23
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e64:	e0f6      	b.n	8003054 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	225d      	movs	r2, #93	@ 0x5d
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1dba      	adds	r2, r7, #6
 8002e7e:	2144      	movs	r1, #68	@ 0x44
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1dba      	adds	r2, r7, #6
 8002e88:	2146      	movs	r1, #70	@ 0x46
 8002e8a:	8812      	ldrh	r2, [r2, #0]
 8002e8c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	23e0      	movs	r3, #224	@ 0xe0
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d908      	bls.n	8002eca <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	496a      	ldr	r1, [pc, #424]	@ (800306c <HAL_SPI_Receive+0x29c>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	e008      	b.n	8002edc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2180      	movs	r1, #128	@ 0x80
 8002ed6:	0149      	lsls	r1, r1, #5
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d10f      	bne.n	8002f08 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2140      	movs	r1, #64	@ 0x40
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	495b      	ldr	r1, [pc, #364]	@ (8003070 <HAL_SPI_Receive+0x2a0>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2240      	movs	r2, #64	@ 0x40
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2140      	movs	r1, #64	@ 0x40
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	23e0      	movs	r3, #224	@ 0xe0
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d900      	bls.n	8002f34 <HAL_SPI_Receive+0x164>
 8002f32:	e071      	b.n	8003018 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f34:	e035      	b.n	8002fa2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d117      	bne.n	8002f74 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2246      	movs	r2, #70	@ 0x46
 8002f64:	5a9b      	ldrh	r3, [r3, r2]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2246      	movs	r2, #70	@ 0x46
 8002f70:	5299      	strh	r1, [r3, r2]
 8002f72:	e016      	b.n	8002fa2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f74:	f7fe fb78 	bl	8001668 <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d802      	bhi.n	8002f8a <HAL_SPI_Receive+0x1ba>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Receive+0x1c0>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d108      	bne.n	8002fa2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002f90:	2317      	movs	r3, #23
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	225d      	movs	r2, #93	@ 0x5d
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002fa0:	e058      	b.n	8003054 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2246      	movs	r2, #70	@ 0x46
 8002fa6:	5a9b      	ldrh	r3, [r3, r2]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1c3      	bne.n	8002f36 <HAL_SPI_Receive+0x166>
 8002fae:	e039      	b.n	8003024 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d115      	bne.n	8002fea <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2246      	movs	r2, #70	@ 0x46
 8002fda:	5a9b      	ldrh	r3, [r3, r2]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b299      	uxth	r1, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2246      	movs	r2, #70	@ 0x46
 8002fe6:	5299      	strh	r1, [r3, r2]
 8002fe8:	e016      	b.n	8003018 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fea:	f7fe fb3d 	bl	8001668 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d802      	bhi.n	8003000 <HAL_SPI_Receive+0x230>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_SPI_Receive+0x236>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003006:	2317      	movs	r3, #23
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2203      	movs	r2, #3
 800300c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225d      	movs	r2, #93	@ 0x5d
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
          goto error;
 8003016:	e01d      	b.n	8003054 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2246      	movs	r2, #70	@ 0x46
 800301c:	5a9b      	ldrh	r3, [r3, r2]
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1c5      	bne.n	8002fb0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fb34 	bl	8003698 <SPI_EndRxTransaction>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d002      	beq.n	800303a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003042:	2317      	movs	r3, #23
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e003      	b.n	8003054 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	225d      	movs	r2, #93	@ 0x5d
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	225c      	movs	r2, #92	@ 0x5c
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800305c:	2317      	movs	r3, #23
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b007      	add	sp, #28
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	ffffefff 	.word	0xffffefff
 8003070:	ffffbfff 	.word	0xffffbfff

08003074 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	001a      	movs	r2, r3
 8003082:	1cbb      	adds	r3, r7, #2
 8003084:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003086:	2301      	movs	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800308a:	2323      	movs	r3, #35	@ 0x23
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	225c      	movs	r2, #92	@ 0x5c
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x2c>
 800309c:	2302      	movs	r3, #2
 800309e:	e1c4      	b.n	800342a <HAL_SPI_TransmitReceive+0x3b6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	225c      	movs	r2, #92	@ 0x5c
 80030a4:	2101      	movs	r1, #1
 80030a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a8:	f7fe fade 	bl	8001668 <HAL_GetTick>
 80030ac:	0003      	movs	r3, r0
 80030ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030b0:	201b      	movs	r0, #27
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	215d      	movs	r1, #93	@ 0x5d
 80030b8:	5c52      	ldrb	r2, [r2, r1]
 80030ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030c2:	2312      	movs	r3, #18
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	1cba      	adds	r2, r7, #2
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d011      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x84>
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	2382      	movs	r3, #130	@ 0x82
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	429a      	cmp	r2, r3
 80030dc:	d107      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x7a>
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d004      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80030ee:	2323      	movs	r3, #35	@ 0x23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80030f6:	e191      	b.n	800341c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_SPI_TransmitReceive+0x98>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_SPI_TransmitReceive+0x98>
 8003104:	1cbb      	adds	r3, r7, #2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800310c:	2323      	movs	r3, #35	@ 0x23
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
    goto error;
 8003114:	e182      	b.n	800341c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	225d      	movs	r2, #93	@ 0x5d
 800311a:	5c9b      	ldrb	r3, [r3, r2]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	225d      	movs	r2, #93	@ 0x5d
 8003126:	2105      	movs	r1, #5
 8003128:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1cba      	adds	r2, r7, #2
 800313a:	2146      	movs	r1, #70	@ 0x46
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1cba      	adds	r2, r7, #2
 8003144:	2144      	movs	r1, #68	@ 0x44
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1cba      	adds	r2, r7, #2
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1cba      	adds	r2, r7, #2
 800315c:	8812      	ldrh	r2, [r2, #0]
 800315e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	23e0      	movs	r3, #224	@ 0xe0
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	429a      	cmp	r2, r3
 8003176:	d908      	bls.n	800318a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	49ac      	ldr	r1, [pc, #688]	@ (8003434 <HAL_SPI_TransmitReceive+0x3c0>)
 8003184:	400a      	ands	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	e008      	b.n	800319c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0149      	lsls	r1, r1, #5
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d007      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2140      	movs	r1, #64	@ 0x40
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	23e0      	movs	r3, #224	@ 0xe0
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d800      	bhi.n	80031c8 <HAL_SPI_TransmitReceive+0x154>
 80031c6:	e083      	b.n	80032d0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x168>
 80031d0:	2312      	movs	r3, #18
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d000      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x168>
 80031da:	e06d      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003200:	e05a      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2202      	movs	r2, #2
 800320a:	4013      	ands	r3, r2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d11b      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x1d4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x1d4>
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	2b01      	cmp	r3, #1
 800321e:	d113      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	2b01      	cmp	r3, #1
 8003254:	d11c      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x21c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2246      	movs	r2, #70	@ 0x46
 800325a:	5a9b      	ldrh	r3, [r3, r2]
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	b292      	uxth	r2, r2
 800326e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2246      	movs	r2, #70	@ 0x46
 800327e:	5a9b      	ldrh	r3, [r3, r2]
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b299      	uxth	r1, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2246      	movs	r2, #70	@ 0x46
 800328a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003290:	f7fe f9ea 	bl	8001668 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800329c:	429a      	cmp	r2, r3
 800329e:	d80b      	bhi.n	80032b8 <HAL_SPI_TransmitReceive+0x244>
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	3301      	adds	r3, #1
 80032a4:	d008      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80032a6:	2323      	movs	r3, #35	@ 0x23
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2203      	movs	r2, #3
 80032ac:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	225d      	movs	r2, #93	@ 0x5d
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]
        goto error;
 80032b6:	e0b1      	b.n	800341c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d19f      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x18e>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2246      	movs	r2, #70	@ 0x46
 80032c6:	5a9b      	ldrh	r3, [r3, r2]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d199      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x18e>
 80032ce:	e089      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x270>
 80032d8:	2312      	movs	r3, #18
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d000      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x270>
 80032e2:	e074      	b.n	80033ce <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800330a:	e060      	b.n	80033ce <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d11c      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x2e0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x2e0>
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	2b01      	cmp	r3, #1
 8003328:	d114      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2201      	movs	r2, #1
 800335c:	4013      	ands	r3, r2
 800335e:	2b01      	cmp	r3, #1
 8003360:	d11e      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x32c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2246      	movs	r2, #70	@ 0x46
 8003366:	5a9b      	ldrh	r3, [r3, r2]
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d018      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	001a      	movs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2246      	movs	r2, #70	@ 0x46
 800338e:	5a9b      	ldrh	r3, [r3, r2]
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b299      	uxth	r1, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2246      	movs	r2, #70	@ 0x46
 800339a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033a0:	f7fe f962 	bl	8001668 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d802      	bhi.n	80033b6 <HAL_SPI_TransmitReceive+0x342>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	3301      	adds	r3, #1
 80033b4:	d102      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x348>
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80033bc:	2323      	movs	r3, #35	@ 0x23
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2203      	movs	r2, #3
 80033c2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	225d      	movs	r2, #93	@ 0x5d
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]
        goto error;
 80033cc:	e026      	b.n	800341c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d199      	bne.n	800330c <HAL_SPI_TransmitReceive+0x298>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2246      	movs	r2, #70	@ 0x46
 80033dc:	5a9b      	ldrh	r3, [r3, r2]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d193      	bne.n	800330c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 f9b2 	bl	8003754 <SPI_EndRxTxTransaction>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d006      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80033f4:	2323      	movs	r3, #35	@ 0x23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800340a:	2323      	movs	r3, #35	@ 0x23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e003      	b.n	800341c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	225d      	movs	r2, #93	@ 0x5d
 8003418:	2101      	movs	r1, #1
 800341a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	225c      	movs	r2, #92	@ 0x5c
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003424:	2323      	movs	r3, #35	@ 0x23
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
}
 800342a:	0018      	movs	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	b00a      	add	sp, #40	@ 0x28
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	ffffefff 	.word	0xffffefff

08003438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003448:	f7fe f90e 	bl	8001668 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003458:	f7fe f906 	bl	8001668 <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003460:	4b3a      	ldr	r3, [pc, #232]	@ (800354c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	015b      	lsls	r3, r3, #5
 8003466:	0d1b      	lsrs	r3, r3, #20
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	4353      	muls	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	e058      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	d055      	beq.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003476:	f7fe f8f7 	bl	8001668 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	429a      	cmp	r2, r3
 8003484:	d902      	bls.n	800348c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d142      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	21e0      	movs	r1, #224	@ 0xe0
 8003498:	438a      	bics	r2, r1
 800349a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	2382      	movs	r3, #130	@ 0x82
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d113      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2140      	movs	r1, #64	@ 0x40
 80034cc:	438a      	bics	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	429a      	cmp	r2, r3
 80034da:	d110      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	491a      	ldr	r1, [pc, #104]	@ (8003550 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2180      	movs	r1, #128	@ 0x80
 80034f8:	0189      	lsls	r1, r1, #6
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	225d      	movs	r2, #93	@ 0x5d
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	225c      	movs	r2, #92	@ 0x5c
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e017      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	425a      	negs	r2, r3
 8003532:	4153      	adcs	r3, r2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	001a      	movs	r2, r3
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d197      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	0018      	movs	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	b008      	add	sp, #32
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	20000000 	.word	0x20000000
 8003550:	ffffdfff 	.word	0xffffdfff

08003554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800356a:	f7fe f87d 	bl	8001668 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800357a:	f7fe f875 	bl	8001668 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800358a:	4b41      	ldr	r3, [pc, #260]	@ (8003690 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	0013      	movs	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	189b      	adds	r3, r3, r2
 8003594:	00da      	lsls	r2, r3, #3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	0d1b      	lsrs	r3, r3, #20
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	4353      	muls	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035a0:	e068      	b.n	8003674 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	23c0      	movs	r3, #192	@ 0xc0
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d10a      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	2117      	movs	r1, #23
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035be:	187b      	adds	r3, r7, r1
 80035c0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	d055      	beq.n	8003674 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c8:	f7fe f84e 	bl	8001668 <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <SPI_WaitFifoStateUntilTimeout+0x8a>
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d142      	bne.n	8003664 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	21e0      	movs	r1, #224	@ 0xe0
 80035ea:	438a      	bics	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	2382      	movs	r3, #130	@ 0x82
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d113      	bne.n	8003622 <SPI_WaitFifoStateUntilTimeout+0xce>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	429a      	cmp	r2, r3
 8003604:	d005      	beq.n	8003612 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	429a      	cmp	r2, r3
 8003610:	d107      	bne.n	8003622 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2140      	movs	r1, #64	@ 0x40
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	429a      	cmp	r2, r3
 800362c:	d110      	bne.n	8003650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4916      	ldr	r1, [pc, #88]	@ (8003694 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800363a:	400a      	ands	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2180      	movs	r1, #128	@ 0x80
 800364a:	0189      	lsls	r1, r1, #6
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	225d      	movs	r2, #93	@ 0x5d
 8003654:	2101      	movs	r1, #1
 8003656:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	225c      	movs	r2, #92	@ 0x5c
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e010      	b.n	8003686 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3b01      	subs	r3, #1
 8003672:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d18e      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b00a      	add	sp, #40	@ 0x28
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	20000000 	.word	0x20000000
 8003694:	ffffdfff 	.word	0xffffdfff

08003698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2382      	movs	r3, #130	@ 0x82
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d113      	bne.n	80036d8 <SPI_EndRxTransaction+0x40>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d005      	beq.n	80036c8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2140      	movs	r1, #64	@ 0x40
 80036d4:	438a      	bics	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	0013      	movs	r3, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	2180      	movs	r1, #128	@ 0x80
 80036e6:	f7ff fea7 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	2220      	movs	r2, #32
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e026      	b.n	800374c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	2382      	movs	r3, #130	@ 0x82
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	429a      	cmp	r2, r3
 8003708:	d11f      	bne.n	800374a <SPI_EndRxTransaction+0xb2>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	429a      	cmp	r2, r3
 8003714:	d005      	beq.n	8003722 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	429a      	cmp	r2, r3
 8003720:	d113      	bne.n	800374a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	23c0      	movs	r3, #192	@ 0xc0
 8003726:	00d9      	lsls	r1, r3, #3
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	0013      	movs	r3, r2
 8003730:	2200      	movs	r2, #0
 8003732:	f7ff ff0f 	bl	8003554 <SPI_WaitFifoStateUntilTimeout>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d007      	beq.n	800374a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	2220      	movs	r2, #32
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e000      	b.n	800374c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}

08003754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	23c0      	movs	r3, #192	@ 0xc0
 8003764:	0159      	lsls	r1, r3, #5
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	0013      	movs	r3, r2
 800376e:	2200      	movs	r2, #0
 8003770:	f7ff fef0 	bl	8003554 <SPI_WaitFifoStateUntilTimeout>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d007      	beq.n	8003788 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	2220      	movs	r2, #32
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e027      	b.n	80037d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	0013      	movs	r3, r2
 8003792:	2200      	movs	r2, #0
 8003794:	2180      	movs	r1, #128	@ 0x80
 8003796:	f7ff fe4f 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 800379a:	1e03      	subs	r3, r0, #0
 800379c:	d007      	beq.n	80037ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	2220      	movs	r2, #32
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e014      	b.n	80037d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	23c0      	movs	r3, #192	@ 0xc0
 80037b2:	00d9      	lsls	r1, r3, #3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	0013      	movs	r3, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	f7ff fec9 	bl	8003554 <SPI_WaitFifoStateUntilTimeout>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d007      	beq.n	80037d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	2220      	movs	r2, #32
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e000      	b.n	80037d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e04a      	b.n	8003888 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	223d      	movs	r2, #61	@ 0x3d
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223c      	movs	r2, #60	@ 0x3c
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f841 	bl	8003890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223d      	movs	r2, #61	@ 0x3d
 8003812:	2102      	movs	r1, #2
 8003814:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	0019      	movs	r1, r3
 8003820:	0010      	movs	r0, r2
 8003822:	f000 f9c1 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2248      	movs	r2, #72	@ 0x48
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223e      	movs	r2, #62	@ 0x3e
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	223f      	movs	r2, #63	@ 0x3f
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2240      	movs	r2, #64	@ 0x40
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2241      	movs	r2, #65	@ 0x41
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2242      	movs	r2, #66	@ 0x42
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2243      	movs	r2, #67	@ 0x43
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2244      	movs	r2, #68	@ 0x44
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2245      	movs	r2, #69	@ 0x45
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2246      	movs	r2, #70	@ 0x46
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2247      	movs	r2, #71	@ 0x47
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223d      	movs	r2, #61	@ 0x3d
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	223d      	movs	r2, #61	@ 0x3d
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e042      	b.n	800393e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	223d      	movs	r2, #61	@ 0x3d
 80038bc:	2102      	movs	r1, #2
 80038be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_TIM_Base_Start_IT+0xa8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x5a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x5a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_TIM_Base_Start_IT+0xac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x5a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <HAL_TIM_Base_Start_IT+0xb0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d116      	bne.n	8003928 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <HAL_TIM_Base_Start_IT+0xb4>)
 8003902:	4013      	ands	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d016      	beq.n	800393a <HAL_TIM_Base_Start_IT+0x9a>
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	2380      	movs	r3, #128	@ 0x80
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	429a      	cmp	r2, r3
 8003914:	d011      	beq.n	800393a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	e008      	b.n	800393a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e000      	b.n	800393c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40014000 	.word	0x40014000
 8003954:	00010007 	.word	0x00010007

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	d021      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	d01d      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2203      	movs	r2, #3
 8003986:	4252      	negs	r2, r2
 8003988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2203      	movs	r2, #3
 8003998:	4013      	ands	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f8ea 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f8dd 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f8e9 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
 80039c2:	d022      	beq.n	8003a0a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2204      	movs	r2, #4
 80039c8:	4013      	ands	r3, r2
 80039ca:	d01e      	beq.n	8003a0a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2205      	movs	r2, #5
 80039d2:	4252      	negs	r2, r2
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	23c0      	movs	r3, #192	@ 0xc0
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f8c3 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 80039f2:	e007      	b.n	8003a04 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 f8b6 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 f8c2 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d021      	beq.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2208      	movs	r2, #8
 8003a16:	4013      	ands	r3, r2
 8003a18:	d01d      	beq.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2209      	movs	r2, #9
 8003a20:	4252      	negs	r2, r2
 8003a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4013      	ands	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f89d 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 8003a3e:	e007      	b.n	8003a50 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 f890 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f89c 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d022      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2210      	movs	r2, #16
 8003a62:	4013      	ands	r3, r2
 8003a64:	d01e      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2211      	movs	r2, #17
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2208      	movs	r2, #8
 8003a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	23c0      	movs	r3, #192	@ 0xc0
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 f876 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e007      	b.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f869 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 f875 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d008      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	4252      	negs	r2, r2
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fd fa7b 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2280      	movs	r2, #128	@ 0x80
 8003aca:	4013      	ands	r3, r2
 8003acc:	d104      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	019b      	lsls	r3, r3, #6
 8003ad4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad6:	d00b      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2280      	movs	r2, #128	@ 0x80
 8003adc:	4013      	ands	r3, r2
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b60 <HAL_TIM_IRQHandler+0x208>)
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f8f2 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	2380      	movs	r3, #128	@ 0x80
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	4013      	ands	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_TIM_IRQHandler+0x20c>)
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f8e9 	bl	8003ce4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2240      	movs	r2, #64	@ 0x40
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2240      	movs	r2, #64	@ 0x40
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d008      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2241      	movs	r2, #65	@ 0x41
 8003b28:	4252      	negs	r2, r2
 8003b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f832 	bl	8003b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00c      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	4013      	ands	r3, r2
 8003b42:	d008      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2221      	movs	r2, #33	@ 0x21
 8003b4a:	4252      	negs	r2, r2
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f8b7 	bl	8003cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	ffffdf7f 	.word	0xffffdf7f
 8003b64:	fffffeff 	.word	0xfffffeff

08003b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <TIM_Base_SetConfig+0x100>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d008      	beq.n	8003bd2 <TIM_Base_SetConfig+0x2a>
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	2380      	movs	r3, #128	@ 0x80
 8003bc4:	05db      	lsls	r3, r3, #23
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d003      	beq.n	8003bd2 <TIM_Base_SetConfig+0x2a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <TIM_Base_SetConfig+0x104>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2270      	movs	r2, #112	@ 0x70
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a30      	ldr	r2, [pc, #192]	@ (8003ca8 <TIM_Base_SetConfig+0x100>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	05db      	lsls	r3, r3, #23
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d013      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8003cac <TIM_Base_SetConfig+0x104>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb0 <TIM_Base_SetConfig+0x108>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb4 <TIM_Base_SetConfig+0x10c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a29      	ldr	r2, [pc, #164]	@ (8003cb8 <TIM_Base_SetConfig+0x110>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x76>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <TIM_Base_SetConfig+0x114>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2280      	movs	r2, #128	@ 0x80
 8003c34:	4393      	bics	r3, r2
 8003c36:	001a      	movs	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a13      	ldr	r2, [pc, #76]	@ (8003ca8 <TIM_Base_SetConfig+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0xce>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <TIM_Base_SetConfig+0x10c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0xce>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <TIM_Base_SetConfig+0x110>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0xce>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <TIM_Base_SetConfig+0x114>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d103      	bne.n	8003c7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4393      	bics	r3, r2
 8003c98:	001a      	movs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]
  }
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40002000 	.word	0x40002000
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	fffffcff 	.word	0xfffffcff

08003cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cec:	46c0      	nop			@ (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e046      	b.n	8003d94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2288      	movs	r2, #136	@ 0x88
 8003d0a:	589b      	ldr	r3, [r3, r2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2284      	movs	r2, #132	@ 0x84
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7fd f9ea 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2288      	movs	r2, #136	@ 0x88
 8003d24:	2124      	movs	r1, #36	@ 0x24
 8003d26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 ff2e 	bl	8004ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fc6c 	bl	8004628 <UART_SetConfig>
 8003d50:	0003      	movs	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01c      	b.n	8003d94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	490d      	ldr	r1, [pc, #52]	@ (8003d9c <HAL_UART_Init+0xa8>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	212a      	movs	r1, #42	@ 0x2a
 8003d76:	438a      	bics	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 ffbd 	bl	8004d0c <UART_CheckIdleState>
 8003d92:	0003      	movs	r3, r0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	ffffb7ff 	.word	0xffffb7ff

08003da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	1dbb      	adds	r3, r7, #6
 8003dae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2288      	movs	r2, #136	@ 0x88
 8003db4:	589b      	ldr	r3, [r3, r2]
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d000      	beq.n	8003dbc <HAL_UART_Transmit+0x1c>
 8003dba:	e090      	b.n	8003ede <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_Transmit+0x2a>
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e088      	b.n	8003ee0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	2380      	movs	r3, #128	@ 0x80
 8003dd4:	015b      	lsls	r3, r3, #5
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d109      	bne.n	8003dee <HAL_UART_Transmit+0x4e>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	d001      	beq.n	8003dee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e078      	b.n	8003ee0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2290      	movs	r2, #144	@ 0x90
 8003df2:	2100      	movs	r1, #0
 8003df4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2288      	movs	r2, #136	@ 0x88
 8003dfa:	2121      	movs	r1, #33	@ 0x21
 8003dfc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fc33 	bl	8001668 <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1dba      	adds	r2, r7, #6
 8003e0a:	2154      	movs	r1, #84	@ 0x54
 8003e0c:	8812      	ldrh	r2, [r2, #0]
 8003e0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1dba      	adds	r2, r7, #6
 8003e14:	2156      	movs	r1, #86	@ 0x56
 8003e16:	8812      	ldrh	r2, [r2, #0]
 8003e18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	015b      	lsls	r3, r3, #5
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d108      	bne.n	8003e38 <HAL_UART_Transmit+0x98>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e003      	b.n	8003e40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e40:	e030      	b.n	8003ea4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2180      	movs	r1, #128	@ 0x80
 8003e50:	f001 f806 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8003e54:	1e03      	subs	r3, r0, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2288      	movs	r2, #136	@ 0x88
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e03d      	b.n	8003ee0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	001a      	movs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	05d2      	lsls	r2, r2, #23
 8003e76:	0dd2      	lsrs	r2, r2, #23
 8003e78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e007      	b.n	8003e92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2256      	movs	r2, #86	@ 0x56
 8003e96:	5a9b      	ldrh	r3, [r3, r2]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b299      	uxth	r1, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2256      	movs	r2, #86	@ 0x56
 8003ea2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2256      	movs	r2, #86	@ 0x56
 8003ea8:	5a9b      	ldrh	r3, [r3, r2]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1c8      	bne.n	8003e42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	0013      	movs	r3, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2140      	movs	r1, #64	@ 0x40
 8003ebe:	f000 ffcf 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2288      	movs	r2, #136	@ 0x88
 8003eca:	2120      	movs	r1, #32
 8003ecc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e006      	b.n	8003ee0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2288      	movs	r2, #136	@ 0x88
 8003ed6:	2120      	movs	r1, #32
 8003ed8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b008      	add	sp, #32
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	1dbb      	adds	r3, r7, #6
 8003ef4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	228c      	movs	r2, #140	@ 0x8c
 8003efa:	589b      	ldr	r3, [r3, r2]
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d14a      	bne.n	8003f96 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_UART_Receive_IT+0x26>
 8003f06:	1dbb      	adds	r3, r7, #6
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e042      	b.n	8003f98 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	015b      	lsls	r3, r3, #5
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d109      	bne.n	8003f32 <HAL_UART_Receive_IT+0x4a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d001      	beq.n	8003f32 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e032      	b.n	8003f98 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_UART_Receive_IT+0xb8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d020      	beq.n	8003f84 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d019      	beq.n	8003f84 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f50:	f3ef 8310 	mrs	r3, PRIMASK
 8003f54:	613b      	str	r3, [r7, #16]
  return(result);
 8003f56:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f383 8810 	msr	PRIMASK, r3
}
 8003f64:	46c0      	nop			@ (mov r8, r8)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	04c9      	lsls	r1, r1, #19
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f84:	1dbb      	adds	r3, r7, #6
 8003f86:	881a      	ldrh	r2, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 ffd7 	bl	8004f40 <UART_Start_Receive_IT>
 8003f92:	0003      	movs	r3, r0
 8003f94:	e000      	b.n	8003f98 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b008      	add	sp, #32
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40008000 	.word	0x40008000

08003fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b0aa      	sub	sp, #168	@ 0xa8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	22a4      	movs	r2, #164	@ 0xa4
 8003fb4:	18b9      	adds	r1, r7, r2
 8003fb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	20a0      	movs	r0, #160	@ 0xa0
 8003fc0:	1839      	adds	r1, r7, r0
 8003fc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	249c      	movs	r4, #156	@ 0x9c
 8003fcc:	1939      	adds	r1, r7, r4
 8003fce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	18bb      	adds	r3, r7, r2
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4aa2      	ldr	r2, [pc, #648]	@ (8004260 <HAL_UART_IRQHandler+0x2bc>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2298      	movs	r2, #152	@ 0x98
 8003fdc:	18bd      	adds	r5, r7, r2
 8003fde:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003fe0:	18bb      	adds	r3, r7, r2
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11a      	bne.n	800401e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2220      	movs	r2, #32
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d015      	beq.n	800401e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ff2:	183b      	adds	r3, r7, r0
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d105      	bne.n	8004008 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	055b      	lsls	r3, r3, #21
 8004004:	4013      	ands	r3, r2
 8004006:	d00a      	beq.n	800401e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400c:	2b00      	cmp	r3, #0
 800400e:	d100      	bne.n	8004012 <HAL_UART_IRQHandler+0x6e>
 8004010:	e2dc      	b.n	80045cc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	0010      	movs	r0, r2
 800401a:	4798      	blx	r3
      }
      return;
 800401c:	e2d6      	b.n	80045cc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800401e:	2398      	movs	r3, #152	@ 0x98
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d100      	bne.n	800402a <HAL_UART_IRQHandler+0x86>
 8004028:	e122      	b.n	8004270 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800402a:	239c      	movs	r3, #156	@ 0x9c
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a8c      	ldr	r2, [pc, #560]	@ (8004264 <HAL_UART_IRQHandler+0x2c0>)
 8004032:	4013      	ands	r3, r2
 8004034:	d106      	bne.n	8004044 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004036:	23a0      	movs	r3, #160	@ 0xa0
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a8a      	ldr	r2, [pc, #552]	@ (8004268 <HAL_UART_IRQHandler+0x2c4>)
 800403e:	4013      	ands	r3, r2
 8004040:	d100      	bne.n	8004044 <HAL_UART_IRQHandler+0xa0>
 8004042:	e115      	b.n	8004270 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004044:	23a4      	movs	r3, #164	@ 0xa4
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	4013      	ands	r3, r2
 800404e:	d012      	beq.n	8004076 <HAL_UART_IRQHandler+0xd2>
 8004050:	23a0      	movs	r3, #160	@ 0xa0
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4013      	ands	r3, r2
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2290      	movs	r2, #144	@ 0x90
 800406a:	589b      	ldr	r3, [r3, r2]
 800406c:	2201      	movs	r2, #1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2190      	movs	r1, #144	@ 0x90
 8004074:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004076:	23a4      	movs	r3, #164	@ 0xa4
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d011      	beq.n	80040a6 <HAL_UART_IRQHandler+0x102>
 8004082:	239c      	movs	r3, #156	@ 0x9c
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	4013      	ands	r3, r2
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2202      	movs	r2, #2
 8004094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2290      	movs	r2, #144	@ 0x90
 800409a:	589b      	ldr	r3, [r3, r2]
 800409c:	2204      	movs	r2, #4
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2190      	movs	r1, #144	@ 0x90
 80040a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a6:	23a4      	movs	r3, #164	@ 0xa4
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2204      	movs	r2, #4
 80040ae:	4013      	ands	r3, r2
 80040b0:	d011      	beq.n	80040d6 <HAL_UART_IRQHandler+0x132>
 80040b2:	239c      	movs	r3, #156	@ 0x9c
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2201      	movs	r2, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2204      	movs	r2, #4
 80040c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2290      	movs	r2, #144	@ 0x90
 80040ca:	589b      	ldr	r3, [r3, r2]
 80040cc:	2202      	movs	r2, #2
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2190      	movs	r1, #144	@ 0x90
 80040d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040d6:	23a4      	movs	r3, #164	@ 0xa4
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2208      	movs	r2, #8
 80040de:	4013      	ands	r3, r2
 80040e0:	d017      	beq.n	8004112 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040e2:	23a0      	movs	r3, #160	@ 0xa0
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	4013      	ands	r3, r2
 80040ec:	d105      	bne.n	80040fa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040ee:	239c      	movs	r3, #156	@ 0x9c
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004264 <HAL_UART_IRQHandler+0x2c0>)
 80040f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040f8:	d00b      	beq.n	8004112 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2208      	movs	r2, #8
 8004100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2290      	movs	r2, #144	@ 0x90
 8004106:	589b      	ldr	r3, [r3, r2]
 8004108:	2208      	movs	r2, #8
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2190      	movs	r1, #144	@ 0x90
 8004110:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004112:	23a4      	movs	r3, #164	@ 0xa4
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	4013      	ands	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_UART_IRQHandler+0x1a4>
 8004120:	23a0      	movs	r3, #160	@ 0xa0
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	04db      	lsls	r3, r3, #19
 800412a:	4013      	ands	r3, r2
 800412c:	d00c      	beq.n	8004148 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2280      	movs	r2, #128	@ 0x80
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2290      	movs	r2, #144	@ 0x90
 800413c:	589b      	ldr	r3, [r3, r2]
 800413e:	2220      	movs	r2, #32
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2190      	movs	r1, #144	@ 0x90
 8004146:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2290      	movs	r2, #144	@ 0x90
 800414c:	589b      	ldr	r3, [r3, r2]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d100      	bne.n	8004154 <HAL_UART_IRQHandler+0x1b0>
 8004152:	e23d      	b.n	80045d0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004154:	23a4      	movs	r3, #164	@ 0xa4
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	4013      	ands	r3, r2
 800415e:	d015      	beq.n	800418c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004160:	23a0      	movs	r3, #160	@ 0xa0
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2220      	movs	r2, #32
 8004168:	4013      	ands	r3, r2
 800416a:	d106      	bne.n	800417a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800416c:	239c      	movs	r3, #156	@ 0x9c
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	055b      	lsls	r3, r3, #21
 8004176:	4013      	ands	r3, r2
 8004178:	d008      	beq.n	800418c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	0010      	movs	r0, r2
 800418a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2290      	movs	r2, #144	@ 0x90
 8004190:	589b      	ldr	r3, [r3, r2]
 8004192:	2194      	movs	r1, #148	@ 0x94
 8004194:	187a      	adds	r2, r7, r1
 8004196:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2240      	movs	r2, #64	@ 0x40
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b40      	cmp	r3, #64	@ 0x40
 80041a4:	d004      	beq.n	80041b0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2228      	movs	r2, #40	@ 0x28
 80041ac:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ae:	d04c      	beq.n	800424a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 ffe8 	bl	8005188 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2240      	movs	r2, #64	@ 0x40
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d13c      	bne.n	8004240 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80041cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	2090      	movs	r0, #144	@ 0x90
 80041d0:	183a      	adds	r2, r7, r0
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	2301      	movs	r3, #1
 80041d6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2140      	movs	r1, #64	@ 0x40
 80041ec:	438a      	bics	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041f8:	f383 8810 	msr	PRIMASK, r3
}
 80041fc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2280      	movs	r2, #128	@ 0x80
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d016      	beq.n	8004236 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	589b      	ldr	r3, [r3, r2]
 800420e:	4a17      	ldr	r2, [pc, #92]	@ (800426c <HAL_UART_IRQHandler+0x2c8>)
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2280      	movs	r2, #128	@ 0x80
 8004216:	589b      	ldr	r3, [r3, r2]
 8004218:	0018      	movs	r0, r3
 800421a:	f7fd fb79 	bl	8001910 <HAL_DMA_Abort_IT>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d01c      	beq.n	800425c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	589b      	ldr	r3, [r3, r2]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	5852      	ldr	r2, [r2, r1]
 8004230:	0010      	movs	r0, r2
 8004232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e012      	b.n	800425c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f000 f9e1 	bl	8004600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423e:	e00d      	b.n	800425c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f9dc 	bl	8004600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e008      	b.n	800425c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f9d7 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2290      	movs	r2, #144	@ 0x90
 8004256:	2100      	movs	r1, #0
 8004258:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800425a:	e1b9      	b.n	80045d0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	46c0      	nop			@ (mov r8, r8)
    return;
 800425e:	e1b7      	b.n	80045d0 <HAL_UART_IRQHandler+0x62c>
 8004260:	0000080f 	.word	0x0000080f
 8004264:	10000001 	.word	0x10000001
 8004268:	04000120 	.word	0x04000120
 800426c:	08005255 	.word	0x08005255

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d000      	beq.n	800427a <HAL_UART_IRQHandler+0x2d6>
 8004278:	e13e      	b.n	80044f8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800427a:	23a4      	movs	r3, #164	@ 0xa4
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d100      	bne.n	8004288 <HAL_UART_IRQHandler+0x2e4>
 8004286:	e137      	b.n	80044f8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004288:	23a0      	movs	r3, #160	@ 0xa0
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2210      	movs	r2, #16
 8004290:	4013      	ands	r3, r2
 8004292:	d100      	bne.n	8004296 <HAL_UART_IRQHandler+0x2f2>
 8004294:	e130      	b.n	80044f8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2210      	movs	r2, #16
 800429c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2240      	movs	r2, #64	@ 0x40
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d000      	beq.n	80042ae <HAL_UART_IRQHandler+0x30a>
 80042ac:	e0a4      	b.n	80043f8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	@ 0x80
 80042b2:	589b      	ldr	r3, [r3, r2]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	217e      	movs	r1, #126	@ 0x7e
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80042be:	187b      	adds	r3, r7, r1
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d100      	bne.n	80042c8 <HAL_UART_IRQHandler+0x324>
 80042c6:	e185      	b.n	80045d4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	225c      	movs	r2, #92	@ 0x5c
 80042cc:	5a9b      	ldrh	r3, [r3, r2]
 80042ce:	187a      	adds	r2, r7, r1
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d300      	bcc.n	80042d8 <HAL_UART_IRQHandler+0x334>
 80042d6:	e17d      	b.n	80045d4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	187a      	adds	r2, r7, r1
 80042dc:	215e      	movs	r1, #94	@ 0x5e
 80042de:	8812      	ldrh	r2, [r2, #0]
 80042e0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2220      	movs	r2, #32
 80042ee:	4013      	ands	r3, r2
 80042f0:	d170      	bne.n	80043d4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042fc:	2301      	movs	r3, #1
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	49b4      	ldr	r1, [pc, #720]	@ (80045e4 <HAL_UART_IRQHandler+0x640>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	677b      	str	r3, [r7, #116]	@ 0x74
 800432e:	2301      	movs	r3, #1
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	438a      	bics	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800435c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004360:	2301      	movs	r3, #1
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2140      	movs	r1, #64	@ 0x40
 8004378:	438a      	bics	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	228c      	movs	r2, #140	@ 0x8c
 800438c:	2120      	movs	r1, #32
 800438e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004396:	f3ef 8310 	mrs	r3, PRIMASK
 800439a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800439c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043a0:	2301      	movs	r3, #1
 80043a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a6:	f383 8810 	msr	PRIMASK, r3
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2110      	movs	r1, #16
 80043b8:	438a      	bics	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	589b      	ldr	r3, [r3, r2]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fd fa3c 	bl	800184c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	225c      	movs	r2, #92	@ 0x5c
 80043de:	5a9a      	ldrh	r2, [r3, r2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	215e      	movs	r1, #94	@ 0x5e
 80043e4:	5a5b      	ldrh	r3, [r3, r1]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 f90d 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043f6:	e0ed      	b.n	80045d4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	225c      	movs	r2, #92	@ 0x5c
 80043fc:	5a99      	ldrh	r1, [r3, r2]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	225e      	movs	r2, #94	@ 0x5e
 8004402:	5a9b      	ldrh	r3, [r3, r2]
 8004404:	b29a      	uxth	r2, r3
 8004406:	208e      	movs	r0, #142	@ 0x8e
 8004408:	183b      	adds	r3, r7, r0
 800440a:	1a8a      	subs	r2, r1, r2
 800440c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	225e      	movs	r2, #94	@ 0x5e
 8004412:	5a9b      	ldrh	r3, [r3, r2]
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d100      	bne.n	800441c <HAL_UART_IRQHandler+0x478>
 800441a:	e0dd      	b.n	80045d8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800441c:	183b      	adds	r3, r7, r0
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d100      	bne.n	8004426 <HAL_UART_IRQHandler+0x482>
 8004424:	e0d8      	b.n	80045d8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004426:	f3ef 8310 	mrs	r3, PRIMASK
 800442a:	60fb      	str	r3, [r7, #12]
  return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800442e:	2488      	movs	r4, #136	@ 0x88
 8004430:	193a      	adds	r2, r7, r4
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f383 8810 	msr	PRIMASK, r3
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4967      	ldr	r1, [pc, #412]	@ (80045e8 <HAL_UART_IRQHandler+0x644>)
 800444c:	400a      	ands	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	193b      	adds	r3, r7, r4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	61bb      	str	r3, [r7, #24]
  return(result);
 8004464:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004466:	2484      	movs	r4, #132	@ 0x84
 8004468:	193a      	adds	r2, r7, r4
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	2301      	movs	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	495a      	ldr	r1, [pc, #360]	@ (80045ec <HAL_UART_IRQHandler+0x648>)
 8004484:	400a      	ands	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	193b      	adds	r3, r7, r4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	228c      	movs	r2, #140	@ 0x8c
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044aa:	f3ef 8310 	mrs	r3, PRIMASK
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b2:	2480      	movs	r4, #128	@ 0x80
 80044b4:	193a      	adds	r2, r7, r4
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	2301      	movs	r3, #1
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2110      	movs	r1, #16
 80044d0:	438a      	bics	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044dc:	f383 8810 	msr	PRIMASK, r3
}
 80044e0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e8:	183b      	adds	r3, r7, r0
 80044ea:	881a      	ldrh	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0011      	movs	r1, r2
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f88d 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f6:	e06f      	b.n	80045d8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044f8:	23a4      	movs	r3, #164	@ 0xa4
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	@ 0x80
 8004500:	035b      	lsls	r3, r3, #13
 8004502:	4013      	ands	r3, r2
 8004504:	d010      	beq.n	8004528 <HAL_UART_IRQHandler+0x584>
 8004506:	239c      	movs	r3, #156	@ 0x9c
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	03db      	lsls	r3, r3, #15
 8004510:	4013      	ands	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2280      	movs	r2, #128	@ 0x80
 800451a:	0352      	lsls	r2, r2, #13
 800451c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	0018      	movs	r0, r3
 8004522:	f001 fbeb 	bl	8005cfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004526:	e05a      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004528:	23a4      	movs	r3, #164	@ 0xa4
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2280      	movs	r2, #128	@ 0x80
 8004530:	4013      	ands	r3, r2
 8004532:	d016      	beq.n	8004562 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004534:	23a0      	movs	r3, #160	@ 0xa0
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2280      	movs	r2, #128	@ 0x80
 800453c:	4013      	ands	r3, r2
 800453e:	d106      	bne.n	800454e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004540:	239c      	movs	r3, #156	@ 0x9c
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	4013      	ands	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004552:	2b00      	cmp	r3, #0
 8004554:	d042      	beq.n	80045dc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	0010      	movs	r0, r2
 800455e:	4798      	blx	r3
    }
    return;
 8004560:	e03c      	b.n	80045dc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004562:	23a4      	movs	r3, #164	@ 0xa4
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2240      	movs	r2, #64	@ 0x40
 800456a:	4013      	ands	r3, r2
 800456c:	d00a      	beq.n	8004584 <HAL_UART_IRQHandler+0x5e0>
 800456e:	23a0      	movs	r3, #160	@ 0xa0
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	4013      	ands	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fe80 	bl	8005282 <UART_EndTransmit_IT>
    return;
 8004582:	e02c      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004584:	23a4      	movs	r3, #164	@ 0xa4
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	4013      	ands	r3, r2
 8004590:	d00b      	beq.n	80045aa <HAL_UART_IRQHandler+0x606>
 8004592:	23a0      	movs	r3, #160	@ 0xa0
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	05db      	lsls	r3, r3, #23
 800459c:	4013      	ands	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f001 fbba 	bl	8005d1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045a8:	e019      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045aa:	23a4      	movs	r3, #164	@ 0xa4
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	045b      	lsls	r3, r3, #17
 80045b4:	4013      	ands	r3, r2
 80045b6:	d012      	beq.n	80045de <HAL_UART_IRQHandler+0x63a>
 80045b8:	23a0      	movs	r3, #160	@ 0xa0
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da0d      	bge.n	80045de <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f001 fba1 	bl	8005d0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ca:	e008      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
      return;
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	e006      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
    return;
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	e004      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
      return;
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	e002      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
      return;
 80045d8:	46c0      	nop			@ (mov r8, r8)
 80045da:	e000      	b.n	80045de <HAL_UART_IRQHandler+0x63a>
    return;
 80045dc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80045de:	46bd      	mov	sp, r7
 80045e0:	b02a      	add	sp, #168	@ 0xa8
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}
 80045e4:	fffffeff 	.word	0xfffffeff
 80045e8:	fffffedf 	.word	0xfffffedf
 80045ec:	effffffe 	.word	0xeffffffe

080045f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	000a      	movs	r2, r1
 800461a:	1cbb      	adds	r3, r7, #2
 800461c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	b5b0      	push	{r4, r5, r7, lr}
 800462a:	b090      	sub	sp, #64	@ 0x40
 800462c:	af00      	add	r7, sp, #0
 800462e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004630:	231a      	movs	r3, #26
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	431a      	orrs	r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	431a      	orrs	r2, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	4313      	orrs	r3, r2
 8004652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4aaf      	ldr	r2, [pc, #700]	@ (8004918 <UART_SetConfig+0x2f0>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004666:	430b      	orrs	r3, r1
 8004668:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4aaa      	ldr	r2, [pc, #680]	@ (800491c <UART_SetConfig+0x2f4>)
 8004672:	4013      	ands	r3, r2
 8004674:	0018      	movs	r0, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	0003      	movs	r3, r0
 8004680:	430b      	orrs	r3, r1
 8004682:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4aa4      	ldr	r2, [pc, #656]	@ (8004920 <UART_SetConfig+0x2f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800469a:	4313      	orrs	r3, r2
 800469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a9f      	ldr	r2, [pc, #636]	@ (8004924 <UART_SetConfig+0x2fc>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	220f      	movs	r2, #15
 80046bc:	4393      	bics	r3, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	0003      	movs	r3, r0
 80046ca:	430b      	orrs	r3, r1
 80046cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a95      	ldr	r2, [pc, #596]	@ (8004928 <UART_SetConfig+0x300>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d131      	bne.n	800473c <UART_SetConfig+0x114>
 80046d8:	4b94      	ldr	r3, [pc, #592]	@ (800492c <UART_SetConfig+0x304>)
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	2203      	movs	r2, #3
 80046de:	4013      	ands	r3, r2
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d01d      	beq.n	8004720 <UART_SetConfig+0xf8>
 80046e4:	d823      	bhi.n	800472e <UART_SetConfig+0x106>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d00c      	beq.n	8004704 <UART_SetConfig+0xdc>
 80046ea:	d820      	bhi.n	800472e <UART_SetConfig+0x106>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <UART_SetConfig+0xce>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d00e      	beq.n	8004712 <UART_SetConfig+0xea>
 80046f4:	e01b      	b.n	800472e <UART_SetConfig+0x106>
 80046f6:	231b      	movs	r3, #27
 80046f8:	2220      	movs	r2, #32
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	19db      	adds	r3, r3, r7
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e0b4      	b.n	800486e <UART_SetConfig+0x246>
 8004704:	231b      	movs	r3, #27
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2202      	movs	r2, #2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e0ad      	b.n	800486e <UART_SetConfig+0x246>
 8004712:	231b      	movs	r3, #27
 8004714:	2220      	movs	r2, #32
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	2204      	movs	r2, #4
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e0a6      	b.n	800486e <UART_SetConfig+0x246>
 8004720:	231b      	movs	r3, #27
 8004722:	2220      	movs	r2, #32
 8004724:	189b      	adds	r3, r3, r2
 8004726:	19db      	adds	r3, r3, r7
 8004728:	2208      	movs	r2, #8
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e09f      	b.n	800486e <UART_SetConfig+0x246>
 800472e:	231b      	movs	r3, #27
 8004730:	2220      	movs	r2, #32
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2210      	movs	r2, #16
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e098      	b.n	800486e <UART_SetConfig+0x246>
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7b      	ldr	r2, [pc, #492]	@ (8004930 <UART_SetConfig+0x308>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d131      	bne.n	80047aa <UART_SetConfig+0x182>
 8004746:	4b79      	ldr	r3, [pc, #484]	@ (800492c <UART_SetConfig+0x304>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	220c      	movs	r2, #12
 800474c:	4013      	ands	r3, r2
 800474e:	2b0c      	cmp	r3, #12
 8004750:	d01d      	beq.n	800478e <UART_SetConfig+0x166>
 8004752:	d823      	bhi.n	800479c <UART_SetConfig+0x174>
 8004754:	2b08      	cmp	r3, #8
 8004756:	d00c      	beq.n	8004772 <UART_SetConfig+0x14a>
 8004758:	d820      	bhi.n	800479c <UART_SetConfig+0x174>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <UART_SetConfig+0x13c>
 800475e:	2b04      	cmp	r3, #4
 8004760:	d00e      	beq.n	8004780 <UART_SetConfig+0x158>
 8004762:	e01b      	b.n	800479c <UART_SetConfig+0x174>
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e07d      	b.n	800486e <UART_SetConfig+0x246>
 8004772:	231b      	movs	r3, #27
 8004774:	2220      	movs	r2, #32
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2202      	movs	r2, #2
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e076      	b.n	800486e <UART_SetConfig+0x246>
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2204      	movs	r2, #4
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e06f      	b.n	800486e <UART_SetConfig+0x246>
 800478e:	231b      	movs	r3, #27
 8004790:	2220      	movs	r2, #32
 8004792:	189b      	adds	r3, r3, r2
 8004794:	19db      	adds	r3, r3, r7
 8004796:	2208      	movs	r2, #8
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e068      	b.n	800486e <UART_SetConfig+0x246>
 800479c:	231b      	movs	r3, #27
 800479e:	2220      	movs	r2, #32
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	19db      	adds	r3, r3, r7
 80047a4:	2210      	movs	r2, #16
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e061      	b.n	800486e <UART_SetConfig+0x246>
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a61      	ldr	r2, [pc, #388]	@ (8004934 <UART_SetConfig+0x30c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d106      	bne.n	80047c2 <UART_SetConfig+0x19a>
 80047b4:	231b      	movs	r3, #27
 80047b6:	2220      	movs	r2, #32
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e055      	b.n	800486e <UART_SetConfig+0x246>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004938 <UART_SetConfig+0x310>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d106      	bne.n	80047da <UART_SetConfig+0x1b2>
 80047cc:	231b      	movs	r3, #27
 80047ce:	2220      	movs	r2, #32
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e049      	b.n	800486e <UART_SetConfig+0x246>
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a50      	ldr	r2, [pc, #320]	@ (8004920 <UART_SetConfig+0x2f8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d13e      	bne.n	8004862 <UART_SetConfig+0x23a>
 80047e4:	4b51      	ldr	r3, [pc, #324]	@ (800492c <UART_SetConfig+0x304>)
 80047e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047e8:	23c0      	movs	r3, #192	@ 0xc0
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4013      	ands	r3, r2
 80047ee:	22c0      	movs	r2, #192	@ 0xc0
 80047f0:	0112      	lsls	r2, r2, #4
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <UART_SetConfig+0x21e>
 80047f6:	22c0      	movs	r2, #192	@ 0xc0
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d82a      	bhi.n	8004854 <UART_SetConfig+0x22c>
 80047fe:	2280      	movs	r2, #128	@ 0x80
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4293      	cmp	r3, r2
 8004804:	d011      	beq.n	800482a <UART_SetConfig+0x202>
 8004806:	2280      	movs	r2, #128	@ 0x80
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	4293      	cmp	r3, r2
 800480c:	d822      	bhi.n	8004854 <UART_SetConfig+0x22c>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <UART_SetConfig+0x1f4>
 8004812:	2280      	movs	r2, #128	@ 0x80
 8004814:	00d2      	lsls	r2, r2, #3
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <UART_SetConfig+0x210>
 800481a:	e01b      	b.n	8004854 <UART_SetConfig+0x22c>
 800481c:	231b      	movs	r3, #27
 800481e:	2220      	movs	r2, #32
 8004820:	189b      	adds	r3, r3, r2
 8004822:	19db      	adds	r3, r3, r7
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e021      	b.n	800486e <UART_SetConfig+0x246>
 800482a:	231b      	movs	r3, #27
 800482c:	2220      	movs	r2, #32
 800482e:	189b      	adds	r3, r3, r2
 8004830:	19db      	adds	r3, r3, r7
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e01a      	b.n	800486e <UART_SetConfig+0x246>
 8004838:	231b      	movs	r3, #27
 800483a:	2220      	movs	r2, #32
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2204      	movs	r2, #4
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e013      	b.n	800486e <UART_SetConfig+0x246>
 8004846:	231b      	movs	r3, #27
 8004848:	2220      	movs	r2, #32
 800484a:	189b      	adds	r3, r3, r2
 800484c:	19db      	adds	r3, r3, r7
 800484e:	2208      	movs	r2, #8
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e00c      	b.n	800486e <UART_SetConfig+0x246>
 8004854:	231b      	movs	r3, #27
 8004856:	2220      	movs	r2, #32
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2210      	movs	r2, #16
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e005      	b.n	800486e <UART_SetConfig+0x246>
 8004862:	231b      	movs	r3, #27
 8004864:	2220      	movs	r2, #32
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	2210      	movs	r2, #16
 800486c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2b      	ldr	r2, [pc, #172]	@ (8004920 <UART_SetConfig+0x2f8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d000      	beq.n	800487a <UART_SetConfig+0x252>
 8004878:	e0a9      	b.n	80049ce <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487a:	231b      	movs	r3, #27
 800487c:	2220      	movs	r2, #32
 800487e:	189b      	adds	r3, r3, r2
 8004880:	19db      	adds	r3, r3, r7
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d015      	beq.n	80048b4 <UART_SetConfig+0x28c>
 8004888:	dc18      	bgt.n	80048bc <UART_SetConfig+0x294>
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00d      	beq.n	80048aa <UART_SetConfig+0x282>
 800488e:	dc15      	bgt.n	80048bc <UART_SetConfig+0x294>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <UART_SetConfig+0x272>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d005      	beq.n	80048a4 <UART_SetConfig+0x27c>
 8004898:	e010      	b.n	80048bc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489a:	f7fd ffe9 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 800489e:	0003      	movs	r3, r0
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048a2:	e014      	b.n	80048ce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b25      	ldr	r3, [pc, #148]	@ (800493c <UART_SetConfig+0x314>)
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048a8:	e011      	b.n	80048ce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fd ff55 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80048ae:	0003      	movs	r3, r0
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048b2:	e00c      	b.n	80048ce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ba:	e008      	b.n	80048ce <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80048c0:	231a      	movs	r3, #26
 80048c2:	2220      	movs	r2, #32
 80048c4:	189b      	adds	r3, r3, r2
 80048c6:	19db      	adds	r3, r3, r7
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d100      	bne.n	80048d6 <UART_SetConfig+0x2ae>
 80048d4:	e14b      	b.n	8004b6e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048da:	4b19      	ldr	r3, [pc, #100]	@ (8004940 <UART_SetConfig+0x318>)
 80048dc:	0052      	lsls	r2, r2, #1
 80048de:	5ad3      	ldrh	r3, [r2, r3]
 80048e0:	0019      	movs	r1, r3
 80048e2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80048e4:	f7fb fc18 	bl	8000118 <__udivsi3>
 80048e8:	0003      	movs	r3, r0
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	0013      	movs	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d305      	bcc.n	8004908 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004904:	429a      	cmp	r2, r3
 8004906:	d91d      	bls.n	8004944 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004908:	231a      	movs	r3, #26
 800490a:	2220      	movs	r2, #32
 800490c:	189b      	adds	r3, r3, r2
 800490e:	19db      	adds	r3, r3, r7
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e12b      	b.n	8004b6e <UART_SetConfig+0x546>
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	cfff69f3 	.word	0xcfff69f3
 800491c:	ffffcfff 	.word	0xffffcfff
 8004920:	40008000 	.word	0x40008000
 8004924:	11fff4ff 	.word	0x11fff4ff
 8004928:	40013800 	.word	0x40013800
 800492c:	40021000 	.word	0x40021000
 8004930:	40004400 	.word	0x40004400
 8004934:	40004800 	.word	0x40004800
 8004938:	40004c00 	.word	0x40004c00
 800493c:	00f42400 	.word	0x00f42400
 8004940:	080071bc 	.word	0x080071bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004950:	4b92      	ldr	r3, [pc, #584]	@ (8004b9c <UART_SetConfig+0x574>)
 8004952:	0052      	lsls	r2, r2, #1
 8004954:	5ad3      	ldrh	r3, [r2, r3]
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	69b8      	ldr	r0, [r7, #24]
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	f7fb fd4e 	bl	8000404 <__aeabi_uldivmod>
 8004968:	0002      	movs	r2, r0
 800496a:	000b      	movs	r3, r1
 800496c:	0e11      	lsrs	r1, r2, #24
 800496e:	021d      	lsls	r5, r3, #8
 8004970:	430d      	orrs	r5, r1
 8004972:	0214      	lsls	r4, r2, #8
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68b8      	ldr	r0, [r7, #8]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	1900      	adds	r0, r0, r4
 8004986:	4169      	adcs	r1, r5
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f7fb fd35 	bl	8000404 <__aeabi_uldivmod>
 800499a:	0002      	movs	r2, r0
 800499c:	000b      	movs	r3, r1
 800499e:	0013      	movs	r3, r2
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a4:	23c0      	movs	r3, #192	@ 0xc0
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d309      	bcc.n	80049c0 <UART_SetConfig+0x398>
 80049ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	035b      	lsls	r3, r3, #13
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d204      	bcs.n	80049c0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	e0d6      	b.n	8004b6e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80049c0:	231a      	movs	r3, #26
 80049c2:	2220      	movs	r2, #32
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	19db      	adds	r3, r3, r7
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e0cf      	b.n	8004b6e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d000      	beq.n	80049dc <UART_SetConfig+0x3b4>
 80049da:	e070      	b.n	8004abe <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80049dc:	231b      	movs	r3, #27
 80049de:	2220      	movs	r2, #32
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d015      	beq.n	8004a16 <UART_SetConfig+0x3ee>
 80049ea:	dc18      	bgt.n	8004a1e <UART_SetConfig+0x3f6>
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d00d      	beq.n	8004a0c <UART_SetConfig+0x3e4>
 80049f0:	dc15      	bgt.n	8004a1e <UART_SetConfig+0x3f6>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <UART_SetConfig+0x3d4>
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d005      	beq.n	8004a06 <UART_SetConfig+0x3de>
 80049fa:	e010      	b.n	8004a1e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fd ff38 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8004a00:	0003      	movs	r3, r0
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a04:	e014      	b.n	8004a30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a06:	4b66      	ldr	r3, [pc, #408]	@ (8004ba0 <UART_SetConfig+0x578>)
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a0a:	e011      	b.n	8004a30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0c:	f7fd fea4 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004a10:	0003      	movs	r3, r0
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a14:	e00c      	b.n	8004a30 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a1c:	e008      	b.n	8004a30 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a22:	231a      	movs	r3, #26
 8004a24:	2220      	movs	r2, #32
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	19db      	adds	r3, r3, r7
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
        break;
 8004a2e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d100      	bne.n	8004a38 <UART_SetConfig+0x410>
 8004a36:	e09a      	b.n	8004b6e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3c:	4b57      	ldr	r3, [pc, #348]	@ (8004b9c <UART_SetConfig+0x574>)
 8004a3e:	0052      	lsls	r2, r2, #1
 8004a40:	5ad3      	ldrh	r3, [r2, r3]
 8004a42:	0019      	movs	r1, r3
 8004a44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a46:	f7fb fb67 	bl	8000118 <__udivsi3>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	005a      	lsls	r2, r3, #1
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	18d2      	adds	r2, r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	0010      	movs	r0, r2
 8004a5e:	f7fb fb5b 	bl	8000118 <__udivsi3>
 8004a62:	0003      	movs	r3, r0
 8004a64:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d921      	bls.n	8004ab0 <UART_SetConfig+0x488>
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	025b      	lsls	r3, r3, #9
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d21c      	bcs.n	8004ab0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	200e      	movs	r0, #14
 8004a7c:	2420      	movs	r4, #32
 8004a7e:	1903      	adds	r3, r0, r4
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	210f      	movs	r1, #15
 8004a84:	438a      	bics	r2, r1
 8004a86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2207      	movs	r2, #7
 8004a90:	4013      	ands	r3, r2
 8004a92:	b299      	uxth	r1, r3
 8004a94:	1903      	adds	r3, r0, r4
 8004a96:	19db      	adds	r3, r3, r7
 8004a98:	1902      	adds	r2, r0, r4
 8004a9a:	19d2      	adds	r2, r2, r7
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1902      	adds	r2, r0, r4
 8004aa8:	19d2      	adds	r2, r2, r7
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e05e      	b.n	8004b6e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab0:	231a      	movs	r3, #26
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	19db      	adds	r3, r3, r7
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e057      	b.n	8004b6e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004abe:	231b      	movs	r3, #27
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	19db      	adds	r3, r3, r7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d015      	beq.n	8004af8 <UART_SetConfig+0x4d0>
 8004acc:	dc18      	bgt.n	8004b00 <UART_SetConfig+0x4d8>
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d00d      	beq.n	8004aee <UART_SetConfig+0x4c6>
 8004ad2:	dc15      	bgt.n	8004b00 <UART_SetConfig+0x4d8>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <UART_SetConfig+0x4b6>
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d005      	beq.n	8004ae8 <UART_SetConfig+0x4c0>
 8004adc:	e010      	b.n	8004b00 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fd fec7 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ae6:	e014      	b.n	8004b12 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <UART_SetConfig+0x578>)
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aec:	e011      	b.n	8004b12 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fd fe33 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8004af2:	0003      	movs	r3, r0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004af6:	e00c      	b.n	8004b12 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004afe:	e008      	b.n	8004b12 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004b04:	231a      	movs	r3, #26
 8004b06:	2220      	movs	r2, #32
 8004b08:	189b      	adds	r3, r3, r2
 8004b0a:	19db      	adds	r3, r3, r7
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
        break;
 8004b10:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02a      	beq.n	8004b6e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b9c <UART_SetConfig+0x574>)
 8004b1e:	0052      	lsls	r2, r2, #1
 8004b20:	5ad3      	ldrh	r3, [r2, r3]
 8004b22:	0019      	movs	r1, r3
 8004b24:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b26:	f7fb faf7 	bl	8000118 <__udivsi3>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	18d2      	adds	r2, r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	0010      	movs	r0, r2
 8004b3e:	f7fb faeb 	bl	8000118 <__udivsi3>
 8004b42:	0003      	movs	r3, r0
 8004b44:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d90a      	bls.n	8004b62 <UART_SetConfig+0x53a>
 8004b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	025b      	lsls	r3, r3, #9
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d205      	bcs.n	8004b62 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	e005      	b.n	8004b6e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004b62:	231a      	movs	r3, #26
 8004b64:	2220      	movs	r2, #32
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	19db      	adds	r3, r3, r7
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	226a      	movs	r2, #106	@ 0x6a
 8004b72:	2101      	movs	r1, #1
 8004b74:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	2268      	movs	r2, #104	@ 0x68
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2200      	movs	r2, #0
 8004b82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	2200      	movs	r2, #0
 8004b88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004b8a:	231a      	movs	r3, #26
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	19db      	adds	r3, r3, r7
 8004b92:	781b      	ldrb	r3, [r3, #0]
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b010      	add	sp, #64	@ 0x40
 8004b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9c:	080071bc 	.word	0x080071bc
 8004ba0:	00f42400 	.word	0x00f42400

08004ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ce8 <UART_AdvFeatureConfig+0x144>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4a43      	ldr	r2, [pc, #268]	@ (8004cec <UART_AdvFeatureConfig+0x148>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf0 <UART_AdvFeatureConfig+0x14c>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	2204      	movs	r2, #4
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d00b      	beq.n	8004c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4a34      	ldr	r2, [pc, #208]	@ (8004cf4 <UART_AdvFeatureConfig+0x150>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	2210      	movs	r2, #16
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf8 <UART_AdvFeatureConfig+0x154>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d00b      	beq.n	8004c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <UART_AdvFeatureConfig+0x158>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	2240      	movs	r2, #64	@ 0x40
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4a1d      	ldr	r2, [pc, #116]	@ (8004d00 <UART_AdvFeatureConfig+0x15c>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	035b      	lsls	r3, r3, #13
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10b      	bne.n	8004cbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a15      	ldr	r2, [pc, #84]	@ (8004d04 <UART_AdvFeatureConfig+0x160>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <UART_AdvFeatureConfig+0x164>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }
}
 8004ce0:	46c0      	nop			@ (mov r8, r8)
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	ffff7fff 	.word	0xffff7fff
 8004cec:	fffdffff 	.word	0xfffdffff
 8004cf0:	fffeffff 	.word	0xfffeffff
 8004cf4:	fffbffff 	.word	0xfffbffff
 8004cf8:	ffffefff 	.word	0xffffefff
 8004cfc:	ffffdfff 	.word	0xffffdfff
 8004d00:	ffefffff 	.word	0xffefffff
 8004d04:	ff9fffff 	.word	0xff9fffff
 8004d08:	fff7ffff 	.word	0xfff7ffff

08004d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b092      	sub	sp, #72	@ 0x48
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2290      	movs	r2, #144	@ 0x90
 8004d18:	2100      	movs	r1, #0
 8004d1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d1c:	f7fc fca4 	bl	8001668 <HAL_GetTick>
 8004d20:	0003      	movs	r3, r0
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d12d      	bne.n	8004d8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d34:	2280      	movs	r2, #128	@ 0x80
 8004d36:	0391      	lsls	r1, r2, #14
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4a47      	ldr	r2, [pc, #284]	@ (8004e58 <UART_CheckIdleState+0x14c>)
 8004d3c:	9200      	str	r2, [sp, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f000 f88e 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004d44:	1e03      	subs	r3, r0, #0
 8004d46:	d022      	beq.n	8004d8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d52:	2301      	movs	r3, #1
 8004d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2180      	movs	r1, #128	@ 0x80
 8004d6a:	438a      	bics	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2288      	movs	r2, #136	@ 0x88
 8004d7e:	2120      	movs	r1, #32
 8004d80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2284      	movs	r2, #132	@ 0x84
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e060      	b.n	8004e50 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2204      	movs	r2, #4
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d146      	bne.n	8004e2a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9e:	2280      	movs	r2, #128	@ 0x80
 8004da0:	03d1      	lsls	r1, r2, #15
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <UART_CheckIdleState+0x14c>)
 8004da6:	9200      	str	r2, [sp, #0]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f000 f859 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004dae:	1e03      	subs	r3, r0, #0
 8004db0:	d03b      	beq.n	8004e2a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db2:	f3ef 8310 	mrs	r3, PRIMASK
 8004db6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004db8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4922      	ldr	r1, [pc, #136]	@ (8004e5c <UART_CheckIdleState+0x150>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de4:	f3ef 8310 	mrs	r3, PRIMASK
 8004de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dee:	2301      	movs	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f383 8810 	msr	PRIMASK, r3
}
 8004df8:	46c0      	nop			@ (mov r8, r8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2101      	movs	r1, #1
 8004e06:	438a      	bics	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f383 8810 	msr	PRIMASK, r3
}
 8004e14:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	228c      	movs	r2, #140	@ 0x8c
 8004e1a:	2120      	movs	r1, #32
 8004e1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2284      	movs	r2, #132	@ 0x84
 8004e22:	2100      	movs	r1, #0
 8004e24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e012      	b.n	8004e50 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2288      	movs	r2, #136	@ 0x88
 8004e2e:	2120      	movs	r1, #32
 8004e30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	228c      	movs	r2, #140	@ 0x8c
 8004e36:	2120      	movs	r1, #32
 8004e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2284      	movs	r2, #132	@ 0x84
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b010      	add	sp, #64	@ 0x40
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	01ffffff 	.word	0x01ffffff
 8004e5c:	fffffedf 	.word	0xfffffedf

08004e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e70:	e051      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	3301      	adds	r3, #1
 8004e76:	d04e      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fc fbf6 	bl	8001668 <HAL_GetTick>
 8004e7c:	0002      	movs	r2, r0
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e051      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2204      	movs	r2, #4
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d03b      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b80      	cmp	r3, #128	@ 0x80
 8004ea2:	d038      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d035      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d111      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 f960 	bl	8005188 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2290      	movs	r2, #144	@ 0x90
 8004ecc:	2108      	movs	r1, #8
 8004ece:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2284      	movs	r2, #132	@ 0x84
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e02c      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d112      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2280      	movs	r2, #128	@ 0x80
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 f943 	bl	8005188 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2290      	movs	r2, #144	@ 0x90
 8004f06:	2120      	movs	r1, #32
 8004f08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2284      	movs	r2, #132	@ 0x84
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e00f      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	425a      	negs	r2, r3
 8004f26:	4153      	adcs	r3, r2
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d09e      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b098      	sub	sp, #96	@ 0x60
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	1dbb      	adds	r3, r7, #6
 8004f4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1dba      	adds	r2, r7, #6
 8004f58:	215c      	movs	r1, #92	@ 0x5c
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1dba      	adds	r2, r7, #6
 8004f62:	215e      	movs	r1, #94	@ 0x5e
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	2380      	movs	r3, #128	@ 0x80
 8004f74:	015b      	lsls	r3, r3, #5
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d10d      	bne.n	8004f96 <UART_Start_Receive_IT+0x56>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <UART_Start_Receive_IT+0x4c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2260      	movs	r2, #96	@ 0x60
 8004f86:	497b      	ldr	r1, [pc, #492]	@ (8005174 <UART_Start_Receive_IT+0x234>)
 8004f88:	5299      	strh	r1, [r3, r2]
 8004f8a:	e02e      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2260      	movs	r2, #96	@ 0x60
 8004f90:	21ff      	movs	r1, #255	@ 0xff
 8004f92:	5299      	strh	r1, [r3, r2]
 8004f94:	e029      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <UART_Start_Receive_IT+0x7a>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <UART_Start_Receive_IT+0x70>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2260      	movs	r2, #96	@ 0x60
 8004faa:	21ff      	movs	r1, #255	@ 0xff
 8004fac:	5299      	strh	r1, [r3, r2]
 8004fae:	e01c      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2260      	movs	r2, #96	@ 0x60
 8004fb4:	217f      	movs	r1, #127	@ 0x7f
 8004fb6:	5299      	strh	r1, [r3, r2]
 8004fb8:	e017      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	055b      	lsls	r3, r3, #21
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10d      	bne.n	8004fe2 <UART_Start_Receive_IT+0xa2>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <UART_Start_Receive_IT+0x98>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2260      	movs	r2, #96	@ 0x60
 8004fd2:	217f      	movs	r1, #127	@ 0x7f
 8004fd4:	5299      	strh	r1, [r3, r2]
 8004fd6:	e008      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2260      	movs	r2, #96	@ 0x60
 8004fdc:	213f      	movs	r1, #63	@ 0x3f
 8004fde:	5299      	strh	r1, [r3, r2]
 8004fe0:	e003      	b.n	8004fea <UART_Start_Receive_IT+0xaa>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2260      	movs	r2, #96	@ 0x60
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2290      	movs	r2, #144	@ 0x90
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	228c      	movs	r2, #140	@ 0x8c
 8004ff6:	2122      	movs	r1, #34	@ 0x22
 8004ff8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005004:	2301      	movs	r3, #1
 8005006:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2101      	movs	r1, #1
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005022:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	059b      	lsls	r3, r3, #22
 8005034:	429a      	cmp	r2, r3
 8005036:	d150      	bne.n	80050da <UART_Start_Receive_IT+0x19a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2268      	movs	r2, #104	@ 0x68
 800503c:	5a9b      	ldrh	r3, [r3, r2]
 800503e:	1dba      	adds	r2, r7, #6
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d349      	bcc.n	80050da <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	429a      	cmp	r2, r3
 8005050:	d107      	bne.n	8005062 <UART_Start_Receive_IT+0x122>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a46      	ldr	r2, [pc, #280]	@ (8005178 <UART_Start_Receive_IT+0x238>)
 800505e:	675a      	str	r2, [r3, #116]	@ 0x74
 8005060:	e002      	b.n	8005068 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a45      	ldr	r2, [pc, #276]	@ (800517c <UART_Start_Receive_IT+0x23c>)
 8005066:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d019      	beq.n	80050a4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800507a:	2301      	movs	r3, #1
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			@ (mov r8, r8)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	0049      	lsls	r1, r1, #1
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ae:	2301      	movs	r3, #1
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			@ (mov r8, r8)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2180      	movs	r1, #128	@ 0x80
 80050c6:	0549      	lsls	r1, r1, #21
 80050c8:	430a      	orrs	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	e047      	b.n	800516a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	015b      	lsls	r3, r3, #5
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d107      	bne.n	80050f6 <UART_Start_Receive_IT+0x1b6>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4a23      	ldr	r2, [pc, #140]	@ (8005180 <UART_Start_Receive_IT+0x240>)
 80050f2:	675a      	str	r2, [r3, #116]	@ 0x74
 80050f4:	e002      	b.n	80050fc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a22      	ldr	r2, [pc, #136]	@ (8005184 <UART_Start_Receive_IT+0x244>)
 80050fa:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d019      	beq.n	8005138 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005104:	f3ef 8310 	mrs	r3, PRIMASK
 8005108:	61fb      	str	r3, [r7, #28]
  return(result);
 800510a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800510c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510e:	2301      	movs	r3, #1
 8005110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			@ (mov r8, r8)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2190      	movs	r1, #144	@ 0x90
 8005126:	0049      	lsls	r1, r1, #1
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	e018      	b.n	800516a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005138:	f3ef 8310 	mrs	r3, PRIMASK
 800513c:	613b      	str	r3, [r7, #16]
  return(result);
 800513e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005140:	653b      	str	r3, [r7, #80]	@ 0x50
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2120      	movs	r1, #32
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b018      	add	sp, #96	@ 0x60
 8005172:	bd80      	pop	{r7, pc}
 8005174:	000001ff 	.word	0x000001ff
 8005178:	080059a5 	.word	0x080059a5
 800517c:	08005665 	.word	0x08005665
 8005180:	080054a1 	.word	0x080054a1
 8005184:	080052dd 	.word	0x080052dd

08005188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08e      	sub	sp, #56	@ 0x38
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	617b      	str	r3, [r7, #20]
  return(result);
 8005196:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
 800519a:	2301      	movs	r3, #1
 800519c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f383 8810 	msr	PRIMASK, r3
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4926      	ldr	r1, [pc, #152]	@ (800524c <UART_EndRxTransfer+0xc4>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c2:	f3ef 8310 	mrs	r3, PRIMASK
 80051c6:	623b      	str	r3, [r7, #32]
  return(result);
 80051c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80051cc:	2301      	movs	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	491b      	ldr	r1, [pc, #108]	@ (8005250 <UART_EndRxTransfer+0xc8>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	f383 8810 	msr	PRIMASK, r3
}
 80051f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d118      	bne.n	800522e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005200:	60bb      	str	r3, [r7, #8]
  return(result);
 8005202:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005206:	2301      	movs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			@ (mov r8, r8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2110      	movs	r1, #16
 800521e:	438a      	bics	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	228c      	movs	r2, #140	@ 0x8c
 8005232:	2120      	movs	r1, #32
 8005234:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b00e      	add	sp, #56	@ 0x38
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	fffffedf 	.word	0xfffffedf
 8005250:	effffffe 	.word	0xeffffffe

08005254 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	225e      	movs	r2, #94	@ 0x5e
 8005266:	2100      	movs	r1, #0
 8005268:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2256      	movs	r2, #86	@ 0x56
 800526e:	2100      	movs	r1, #0
 8005270:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0018      	movs	r0, r3
 8005276:	f7ff f9c3 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b004      	add	sp, #16
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005290:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	2301      	movs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2140      	movs	r1, #64	@ 0x40
 80052ac:	438a      	bics	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2288      	movs	r2, #136	@ 0x88
 80052c0:	2120      	movs	r1, #32
 80052c2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7ff f98f 	bl	80045f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b006      	add	sp, #24
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b094      	sub	sp, #80	@ 0x50
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052e4:	204e      	movs	r0, #78	@ 0x4e
 80052e6:	183b      	adds	r3, r7, r0
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	2160      	movs	r1, #96	@ 0x60
 80052ec:	5a52      	ldrh	r2, [r2, r1]
 80052ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	228c      	movs	r2, #140	@ 0x8c
 80052f4:	589b      	ldr	r3, [r3, r2]
 80052f6:	2b22      	cmp	r3, #34	@ 0x22
 80052f8:	d000      	beq.n	80052fc <UART_RxISR_8BIT+0x20>
 80052fa:	e0bf      	b.n	800547c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005302:	214c      	movs	r1, #76	@ 0x4c
 8005304:	187b      	adds	r3, r7, r1
 8005306:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005308:	187b      	adds	r3, r7, r1
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	183b      	adds	r3, r7, r0
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b2d9      	uxtb	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	400a      	ands	r2, r1
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	225e      	movs	r2, #94	@ 0x5e
 800532c:	5a9b      	ldrh	r3, [r3, r2]
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b299      	uxth	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	225e      	movs	r2, #94	@ 0x5e
 8005338:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	225e      	movs	r2, #94	@ 0x5e
 800533e:	5a9b      	ldrh	r3, [r3, r2]
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d000      	beq.n	8005348 <UART_RxISR_8BIT+0x6c>
 8005346:	e0a1      	b.n	800548c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005352:	2301      	movs	r3, #1
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	494a      	ldr	r1, [pc, #296]	@ (8005494 <UART_RxISR_8BIT+0x1b8>)
 800536a:	400a      	ands	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537a:	f3ef 8310 	mrs	r3, PRIMASK
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	647b      	str	r3, [r7, #68]	@ 0x44
 8005384:	2301      	movs	r3, #1
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2101      	movs	r1, #1
 800539c:	438a      	bics	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	228c      	movs	r2, #140	@ 0x8c
 80053b0:	2120      	movs	r1, #32
 80053b2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a34      	ldr	r2, [pc, #208]	@ (8005498 <UART_RxISR_8BIT+0x1bc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01f      	beq.n	800540a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	4013      	ands	r3, r2
 80053d6:	d018      	beq.n	800540a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d8:	f3ef 8310 	mrs	r3, PRIMASK
 80053dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80053de:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80053e2:	2301      	movs	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f383 8810 	msr	PRIMASK, r3
}
 80053ec:	46c0      	nop			@ (mov r8, r8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4928      	ldr	r1, [pc, #160]	@ (800549c <UART_RxISR_8BIT+0x1c0>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005400:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f383 8810 	msr	PRIMASK, r3
}
 8005408:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d12f      	bne.n	8005472 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005418:	f3ef 8310 	mrs	r3, PRIMASK
 800541c:	60fb      	str	r3, [r7, #12]
  return(result);
 800541e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005422:	2301      	movs	r3, #1
 8005424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	46c0      	nop			@ (mov r8, r8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2110      	movs	r1, #16
 800543a:	438a      	bics	r2, r1
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f383 8810 	msr	PRIMASK, r3
}
 8005448:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	2210      	movs	r2, #16
 8005452:	4013      	ands	r3, r2
 8005454:	2b10      	cmp	r3, #16
 8005456:	d103      	bne.n	8005460 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	225c      	movs	r2, #92	@ 0x5c
 8005464:	5a9a      	ldrh	r2, [r3, r2]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0011      	movs	r1, r2
 800546a:	0018      	movs	r0, r3
 800546c:	f7ff f8d0 	bl	8004610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005470:	e00c      	b.n	800548c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0018      	movs	r0, r3
 8005476:	f7fb fc69 	bl	8000d4c <HAL_UART_RxCpltCallback>
}
 800547a:	e007      	b.n	800548c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2108      	movs	r1, #8
 8005488:	430a      	orrs	r2, r1
 800548a:	619a      	str	r2, [r3, #24]
}
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b014      	add	sp, #80	@ 0x50
 8005492:	bd80      	pop	{r7, pc}
 8005494:	fffffedf 	.word	0xfffffedf
 8005498:	40008000 	.word	0x40008000
 800549c:	fbffffff 	.word	0xfbffffff

080054a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b094      	sub	sp, #80	@ 0x50
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054a8:	204e      	movs	r0, #78	@ 0x4e
 80054aa:	183b      	adds	r3, r7, r0
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	2160      	movs	r1, #96	@ 0x60
 80054b0:	5a52      	ldrh	r2, [r2, r1]
 80054b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	228c      	movs	r2, #140	@ 0x8c
 80054b8:	589b      	ldr	r3, [r3, r2]
 80054ba:	2b22      	cmp	r3, #34	@ 0x22
 80054bc:	d000      	beq.n	80054c0 <UART_RxISR_16BIT+0x20>
 80054be:	e0bf      	b.n	8005640 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c6:	214c      	movs	r1, #76	@ 0x4c
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	183a      	adds	r2, r7, r0
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	4013      	ands	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	225e      	movs	r2, #94	@ 0x5e
 80054f0:	5a9b      	ldrh	r3, [r3, r2]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b299      	uxth	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	225e      	movs	r2, #94	@ 0x5e
 80054fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	225e      	movs	r2, #94	@ 0x5e
 8005502:	5a9b      	ldrh	r3, [r3, r2]
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d000      	beq.n	800550c <UART_RxISR_16BIT+0x6c>
 800550a:	e0a1      	b.n	8005650 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550c:	f3ef 8310 	mrs	r3, PRIMASK
 8005510:	623b      	str	r3, [r7, #32]
  return(result);
 8005512:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
 8005516:	2301      	movs	r3, #1
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	494a      	ldr	r1, [pc, #296]	@ (8005658 <UART_RxISR_16BIT+0x1b8>)
 800552e:	400a      	ands	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005534:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	f383 8810 	msr	PRIMASK, r3
}
 800553c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553e:	f3ef 8310 	mrs	r3, PRIMASK
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	643b      	str	r3, [r7, #64]	@ 0x40
 8005548:	2301      	movs	r3, #1
 800554a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2101      	movs	r1, #1
 8005560:	438a      	bics	r2, r1
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556a:	f383 8810 	msr	PRIMASK, r3
}
 800556e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	228c      	movs	r2, #140	@ 0x8c
 8005574:	2120      	movs	r1, #32
 8005576:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a34      	ldr	r2, [pc, #208]	@ (800565c <UART_RxISR_16BIT+0x1bc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01f      	beq.n	80055ce <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	4013      	ands	r3, r2
 800559a:	d018      	beq.n	80055ce <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559c:	f3ef 8310 	mrs	r3, PRIMASK
 80055a0:	617b      	str	r3, [r7, #20]
  return(result);
 80055a2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a6:	2301      	movs	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			@ (mov r8, r8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4928      	ldr	r1, [pc, #160]	@ (8005660 <UART_RxISR_16BIT+0x1c0>)
 80055be:	400a      	ands	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f383 8810 	msr	PRIMASK, r3
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d12f      	bne.n	8005636 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055dc:	f3ef 8310 	mrs	r3, PRIMASK
 80055e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055e2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2110      	movs	r1, #16
 80055fe:	438a      	bics	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f383 8810 	msr	PRIMASK, r3
}
 800560c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2210      	movs	r2, #16
 8005616:	4013      	ands	r3, r2
 8005618:	2b10      	cmp	r3, #16
 800561a:	d103      	bne.n	8005624 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2210      	movs	r2, #16
 8005622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	225c      	movs	r2, #92	@ 0x5c
 8005628:	5a9a      	ldrh	r2, [r3, r2]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0011      	movs	r1, r2
 800562e:	0018      	movs	r0, r3
 8005630:	f7fe ffee 	bl	8004610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005634:	e00c      	b.n	8005650 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f7fb fb87 	bl	8000d4c <HAL_UART_RxCpltCallback>
}
 800563e:	e007      	b.n	8005650 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2108      	movs	r1, #8
 800564c:	430a      	orrs	r2, r1
 800564e:	619a      	str	r2, [r3, #24]
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b014      	add	sp, #80	@ 0x50
 8005656:	bd80      	pop	{r7, pc}
 8005658:	fffffedf 	.word	0xfffffedf
 800565c:	40008000 	.word	0x40008000
 8005660:	fbffffff 	.word	0xfbffffff

08005664 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b0a0      	sub	sp, #128	@ 0x80
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800566c:	237a      	movs	r3, #122	@ 0x7a
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	2160      	movs	r1, #96	@ 0x60
 8005674:	5a52      	ldrh	r2, [r2, r1]
 8005676:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	228c      	movs	r2, #140	@ 0x8c
 8005694:	589b      	ldr	r3, [r3, r2]
 8005696:	2b22      	cmp	r3, #34	@ 0x22
 8005698:	d000      	beq.n	800569c <UART_RxISR_8BIT_FIFOEN+0x38>
 800569a:	e16a      	b.n	8005972 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800569c:	236e      	movs	r3, #110	@ 0x6e
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	2168      	movs	r1, #104	@ 0x68
 80056a4:	5a52      	ldrh	r2, [r2, r1]
 80056a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056a8:	e111      	b.n	80058ce <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b0:	216c      	movs	r1, #108	@ 0x6c
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056b6:	187b      	adds	r3, r7, r1
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	237a      	movs	r3, #122	@ 0x7a
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b2d9      	uxtb	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c8:	400a      	ands	r2, r1
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	225e      	movs	r2, #94	@ 0x5e
 80056dc:	5a9b      	ldrh	r3, [r3, r2]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b299      	uxth	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	225e      	movs	r2, #94	@ 0x5e
 80056e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056f4:	2207      	movs	r2, #7
 80056f6:	4013      	ands	r3, r2
 80056f8:	d049      	beq.n	800578e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056fc:	2201      	movs	r2, #1
 80056fe:	4013      	ands	r3, r2
 8005700:	d010      	beq.n	8005724 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005702:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4013      	ands	r3, r2
 800570a:	d00b      	beq.n	8005724 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2290      	movs	r2, #144	@ 0x90
 8005718:	589b      	ldr	r3, [r3, r2]
 800571a:	2201      	movs	r2, #1
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2190      	movs	r1, #144	@ 0x90
 8005722:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005724:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005726:	2202      	movs	r2, #2
 8005728:	4013      	ands	r3, r2
 800572a:	d00f      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800572c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800572e:	2201      	movs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	d00b      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2202      	movs	r2, #2
 800573a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2290      	movs	r2, #144	@ 0x90
 8005740:	589b      	ldr	r3, [r3, r2]
 8005742:	2204      	movs	r2, #4
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2190      	movs	r1, #144	@ 0x90
 800574a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800574c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800574e:	2204      	movs	r2, #4
 8005750:	4013      	ands	r3, r2
 8005752:	d00f      	beq.n	8005774 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005756:	2201      	movs	r2, #1
 8005758:	4013      	ands	r3, r2
 800575a:	d00b      	beq.n	8005774 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2204      	movs	r2, #4
 8005762:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2290      	movs	r2, #144	@ 0x90
 8005768:	589b      	ldr	r3, [r3, r2]
 800576a:	2202      	movs	r2, #2
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2190      	movs	r1, #144	@ 0x90
 8005772:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2290      	movs	r2, #144	@ 0x90
 8005778:	589b      	ldr	r3, [r3, r2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f7fe ff3d 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2290      	movs	r2, #144	@ 0x90
 800578a:	2100      	movs	r1, #0
 800578c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	225e      	movs	r2, #94	@ 0x5e
 8005792:	5a9b      	ldrh	r3, [r3, r2]
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d000      	beq.n	800579c <UART_RxISR_8BIT_FIFOEN+0x138>
 800579a:	e098      	b.n	80058ce <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579c:	f3ef 8310 	mrs	r3, PRIMASK
 80057a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a6:	2301      	movs	r3, #1
 80057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			@ (mov r8, r8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4973      	ldr	r1, [pc, #460]	@ (800598c <UART_RxISR_8BIT_FIFOEN+0x328>)
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ce:	f3ef 8310 	mrs	r3, PRIMASK
 80057d2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80057d8:	2301      	movs	r3, #1
 80057da:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057de:	f383 8810 	msr	PRIMASK, r3
}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4968      	ldr	r1, [pc, #416]	@ (8005990 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	228c      	movs	r2, #140	@ 0x8c
 8005804:	2120      	movs	r1, #32
 8005806:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a5e      	ldr	r2, [pc, #376]	@ (8005994 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01f      	beq.n	800585e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	041b      	lsls	r3, r3, #16
 8005828:	4013      	ands	r3, r2
 800582a:	d018      	beq.n	800585e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582c:	f3ef 8310 	mrs	r3, PRIMASK
 8005830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005834:	663b      	str	r3, [r7, #96]	@ 0x60
 8005836:	2301      	movs	r3, #1
 8005838:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	f383 8810 	msr	PRIMASK, r3
}
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4952      	ldr	r1, [pc, #328]	@ (8005998 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800584e:	400a      	ands	r2, r1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005858:	f383 8810 	msr	PRIMASK, r3
}
 800585c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d12f      	bne.n	80058c6 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586c:	f3ef 8310 	mrs	r3, PRIMASK
 8005870:	623b      	str	r3, [r7, #32]
  return(result);
 8005872:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005876:	2301      	movs	r3, #1
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	f383 8810 	msr	PRIMASK, r3
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2110      	movs	r1, #16
 800588e:	438a      	bics	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2210      	movs	r2, #16
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d103      	bne.n	80058b4 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2210      	movs	r2, #16
 80058b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	225c      	movs	r2, #92	@ 0x5c
 80058b8:	5a9a      	ldrh	r2, [r3, r2]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0011      	movs	r1, r2
 80058be:	0018      	movs	r0, r3
 80058c0:	f7fe fea6 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 80058c4:	e003      	b.n	80058ce <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fb fa3f 	bl	8000d4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058ce:	236e      	movs	r3, #110	@ 0x6e
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058da:	2220      	movs	r2, #32
 80058dc:	4013      	ands	r3, r2
 80058de:	d000      	beq.n	80058e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058e0:	e6e3      	b.n	80056aa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058e2:	205a      	movs	r0, #90	@ 0x5a
 80058e4:	183b      	adds	r3, r7, r0
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	215e      	movs	r1, #94	@ 0x5e
 80058ea:	5a52      	ldrh	r2, [r2, r1]
 80058ec:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058ee:	0001      	movs	r1, r0
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d044      	beq.n	8005982 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2268      	movs	r2, #104	@ 0x68
 80058fc:	5a9b      	ldrh	r3, [r3, r2]
 80058fe:	187a      	adds	r2, r7, r1
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d23d      	bcs.n	8005982 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005906:	f3ef 8310 	mrs	r3, PRIMASK
 800590a:	60bb      	str	r3, [r7, #8]
  return(result);
 800590c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800590e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005910:	2301      	movs	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	491d      	ldr	r1, [pc, #116]	@ (800599c <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005928:	400a      	ands	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a19      	ldr	r2, [pc, #100]	@ (80059a0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800593c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	617b      	str	r3, [r7, #20]
  return(result);
 8005944:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005946:	653b      	str	r3, [r7, #80]	@ 0x50
 8005948:	2301      	movs	r3, #1
 800594a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2120      	movs	r1, #32
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005970:	e007      	b.n	8005982 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2108      	movs	r1, #8
 800597e:	430a      	orrs	r2, r1
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b020      	add	sp, #128	@ 0x80
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			@ (mov r8, r8)
 800598c:	fffffeff 	.word	0xfffffeff
 8005990:	effffffe 	.word	0xeffffffe
 8005994:	40008000 	.word	0x40008000
 8005998:	fbffffff 	.word	0xfbffffff
 800599c:	efffffff 	.word	0xefffffff
 80059a0:	080052dd 	.word	0x080052dd

080059a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b0a2      	sub	sp, #136	@ 0x88
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059ac:	2382      	movs	r3, #130	@ 0x82
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	2160      	movs	r1, #96	@ 0x60
 80059b4:	5a52      	ldrh	r2, [r2, r1]
 80059b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2284      	movs	r2, #132	@ 0x84
 80059c0:	18ba      	adds	r2, r7, r2
 80059c2:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	228c      	movs	r2, #140	@ 0x8c
 80059d8:	589b      	ldr	r3, [r3, r2]
 80059da:	2b22      	cmp	r3, #34	@ 0x22
 80059dc:	d000      	beq.n	80059e0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80059de:	e174      	b.n	8005cca <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059e0:	2376      	movs	r3, #118	@ 0x76
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	2168      	movs	r1, #104	@ 0x68
 80059e8:	5a52      	ldrh	r2, [r2, r1]
 80059ea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059ec:	e119      	b.n	8005c22 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059f4:	2174      	movs	r1, #116	@ 0x74
 80059f6:	187b      	adds	r3, r7, r1
 80059f8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fe:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a00:	187b      	adds	r3, r7, r1
 8005a02:	2282      	movs	r2, #130	@ 0x82
 8005a04:	18ba      	adds	r2, r7, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	225e      	movs	r2, #94	@ 0x5e
 8005a20:	5a9b      	ldrh	r3, [r3, r2]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b299      	uxth	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	225e      	movs	r2, #94	@ 0x5e
 8005a2c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	2184      	movs	r1, #132	@ 0x84
 8005a36:	187a      	adds	r2, r7, r1
 8005a38:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a3a:	187b      	adds	r3, r7, r1
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2207      	movs	r2, #7
 8005a40:	4013      	ands	r3, r2
 8005a42:	d04e      	beq.n	8005ae2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d010      	beq.n	8005a70 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005a4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a50:	2380      	movs	r3, #128	@ 0x80
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4013      	ands	r3, r2
 8005a56:	d00b      	beq.n	8005a70 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2290      	movs	r2, #144	@ 0x90
 8005a64:	589b      	ldr	r3, [r3, r2]
 8005a66:	2201      	movs	r2, #1
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2190      	movs	r1, #144	@ 0x90
 8005a6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a70:	2384      	movs	r3, #132	@ 0x84
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2202      	movs	r2, #2
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00f      	beq.n	8005a9c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4013      	ands	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2290      	movs	r2, #144	@ 0x90
 8005a90:	589b      	ldr	r3, [r3, r2]
 8005a92:	2204      	movs	r2, #4
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2190      	movs	r1, #144	@ 0x90
 8005a9a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a9c:	2384      	movs	r3, #132	@ 0x84
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d00f      	beq.n	8005ac8 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	d00b      	beq.n	8005ac8 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2290      	movs	r2, #144	@ 0x90
 8005abc:	589b      	ldr	r3, [r3, r2]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2190      	movs	r1, #144	@ 0x90
 8005ac6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2290      	movs	r2, #144	@ 0x90
 8005acc:	589b      	ldr	r3, [r3, r2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7fe fd93 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2290      	movs	r2, #144	@ 0x90
 8005ade:	2100      	movs	r1, #0
 8005ae0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	225e      	movs	r2, #94	@ 0x5e
 8005ae6:	5a9b      	ldrh	r3, [r3, r2]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d000      	beq.n	8005af0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005aee:	e098      	b.n	8005c22 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005afa:	2301      	movs	r3, #1
 8005afc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4974      	ldr	r1, [pc, #464]	@ (8005ce4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005b12:	400a      	ands	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b18:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b22:	f3ef 8310 	mrs	r3, PRIMASK
 8005b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b32:	f383 8810 	msr	PRIMASK, r3
}
 8005b36:	46c0      	nop			@ (mov r8, r8)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4969      	ldr	r1, [pc, #420]	@ (8005ce8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	228c      	movs	r2, #140	@ 0x8c
 8005b58:	2120      	movs	r1, #32
 8005b5a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8005cec <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8310 	mrs	r3, PRIMASK
 8005b84:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			@ (mov r8, r8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4953      	ldr	r1, [pc, #332]	@ (8005cf0 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d12f      	bne.n	8005c1a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bca:	2301      	movs	r3, #1
 8005bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	f383 8810 	msr	PRIMASK, r3
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2110      	movs	r1, #16
 8005be2:	438a      	bics	r2, r1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d103      	bne.n	8005c08 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2210      	movs	r2, #16
 8005c06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	225c      	movs	r2, #92	@ 0x5c
 8005c0c:	5a9a      	ldrh	r2, [r3, r2]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fe fcfc 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 8005c18:	e003      	b.n	8005c22 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fb f895 	bl	8000d4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c22:	2376      	movs	r3, #118	@ 0x76
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d006      	beq.n	8005c3a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c2c:	2384      	movs	r3, #132	@ 0x84
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2220      	movs	r2, #32
 8005c34:	4013      	ands	r3, r2
 8005c36:	d000      	beq.n	8005c3a <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c38:	e6d9      	b.n	80059ee <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c3a:	205e      	movs	r0, #94	@ 0x5e
 8005c3c:	183b      	adds	r3, r7, r0
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	215e      	movs	r1, #94	@ 0x5e
 8005c42:	5a52      	ldrh	r2, [r2, r1]
 8005c44:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c46:	0001      	movs	r1, r0
 8005c48:	187b      	adds	r3, r7, r1
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d044      	beq.n	8005cda <UART_RxISR_16BIT_FIFOEN+0x336>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2268      	movs	r2, #104	@ 0x68
 8005c54:	5a9b      	ldrh	r3, [r3, r2]
 8005c56:	187a      	adds	r2, r7, r1
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d23d      	bcs.n	8005cda <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c62:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c64:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c68:	2301      	movs	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	491d      	ldr	r1, [pc, #116]	@ (8005cf4 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005c80:	400a      	ands	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a19      	ldr	r2, [pc, #100]	@ (8005cf8 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005c94:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c9c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2120      	movs	r1, #32
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cc8:	e007      	b.n	8005cda <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	619a      	str	r2, [r3, #24]
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b022      	add	sp, #136	@ 0x88
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	fffffeff 	.word	0xfffffeff
 8005ce8:	effffffe 	.word	0xeffffffe
 8005cec:	40008000 	.word	0x40008000
 8005cf0:	fbffffff 	.word	0xfbffffff
 8005cf4:	efffffff 	.word	0xefffffff
 8005cf8:	080054a1 	.word	0x080054a1

08005cfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d04:	46c0      	nop			@ (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2284      	movs	r2, #132	@ 0x84
 8005d38:	5c9b      	ldrb	r3, [r3, r2]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e027      	b.n	8005d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2284      	movs	r2, #132	@ 0x84
 8005d46:	2101      	movs	r1, #1
 8005d48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2288      	movs	r2, #136	@ 0x88
 8005d4e:	2124      	movs	r1, #36	@ 0x24
 8005d50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2101      	movs	r1, #1
 8005d66:	438a      	bics	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2288      	movs	r2, #136	@ 0x88
 8005d84:	2120      	movs	r1, #32
 8005d86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2284      	movs	r2, #132	@ 0x84
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	0018      	movs	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b004      	add	sp, #16
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	dfffffff 	.word	0xdfffffff

08005da0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2284      	movs	r2, #132	@ 0x84
 8005dae:	5c9b      	ldrb	r3, [r3, r2]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e02e      	b.n	8005e16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2284      	movs	r2, #132	@ 0x84
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2288      	movs	r2, #136	@ 0x88
 8005dc4:	2124      	movs	r1, #36	@ 0x24
 8005dc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2101      	movs	r1, #1
 8005ddc:	438a      	bics	r2, r1
 8005dde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	08d9      	lsrs	r1, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 f854 	bl	8005ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2288      	movs	r2, #136	@ 0x88
 8005e08:	2120      	movs	r1, #32
 8005e0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2284      	movs	r2, #132	@ 0x84
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b004      	add	sp, #16
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2284      	movs	r2, #132	@ 0x84
 8005e2e:	5c9b      	ldrb	r3, [r3, r2]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e02f      	b.n	8005e98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2284      	movs	r2, #132	@ 0x84
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2288      	movs	r2, #136	@ 0x88
 8005e44:	2124      	movs	r1, #36	@ 0x24
 8005e46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	438a      	bics	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f813 	bl	8005ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2288      	movs	r2, #136	@ 0x88
 8005e8a:	2120      	movs	r1, #32
 8005e8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2284      	movs	r2, #132	@ 0x84
 8005e92:	2100      	movs	r1, #0
 8005e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	0018      	movs	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b004      	add	sp, #16
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	f1ffffff 	.word	0xf1ffffff

08005ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d108      	bne.n	8005ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	226a      	movs	r2, #106	@ 0x6a
 8005eb8:	2101      	movs	r1, #1
 8005eba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2268      	movs	r2, #104	@ 0x68
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ec4:	e043      	b.n	8005f4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ec6:	260f      	movs	r6, #15
 8005ec8:	19bb      	adds	r3, r7, r6
 8005eca:	2208      	movs	r2, #8
 8005ecc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ece:	200e      	movs	r0, #14
 8005ed0:	183b      	adds	r3, r7, r0
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0e5b      	lsrs	r3, r3, #25
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	240d      	movs	r4, #13
 8005ee2:	193b      	adds	r3, r7, r4
 8005ee4:	2107      	movs	r1, #7
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	0f5b      	lsrs	r3, r3, #29
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	250c      	movs	r5, #12
 8005ef6:	197b      	adds	r3, r7, r5
 8005ef8:	2107      	movs	r1, #7
 8005efa:	400a      	ands	r2, r1
 8005efc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005efe:	183b      	adds	r3, r7, r0
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	197a      	adds	r2, r7, r5
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	4914      	ldr	r1, [pc, #80]	@ (8005f58 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f08:	5c8a      	ldrb	r2, [r1, r2]
 8005f0a:	435a      	muls	r2, r3
 8005f0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f0e:	197b      	adds	r3, r7, r5
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4a12      	ldr	r2, [pc, #72]	@ (8005f5c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f16:	0019      	movs	r1, r3
 8005f18:	f7fa f988 	bl	800022c <__divsi3>
 8005f1c:	0003      	movs	r3, r0
 8005f1e:	b299      	uxth	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	226a      	movs	r2, #106	@ 0x6a
 8005f24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f26:	19bb      	adds	r3, r7, r6
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	193a      	adds	r2, r7, r4
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	490a      	ldr	r1, [pc, #40]	@ (8005f58 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f30:	5c8a      	ldrb	r2, [r1, r2]
 8005f32:	435a      	muls	r2, r3
 8005f34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f36:	193b      	adds	r3, r7, r4
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	@ (8005f5c <UARTEx_SetNbDataToProcess+0xb8>)
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f3e:	0019      	movs	r1, r3
 8005f40:	f7fa f974 	bl	800022c <__divsi3>
 8005f44:	0003      	movs	r3, r0
 8005f46:	b299      	uxth	r1, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2268      	movs	r2, #104	@ 0x68
 8005f4c:	5299      	strh	r1, [r3, r2]
}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b005      	add	sp, #20
 8005f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	080071d4 	.word	0x080071d4
 8005f5c:	080071dc 	.word	0x080071dc

08005f60 <setbuf>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	2380      	movs	r3, #128	@ 0x80
 8005f64:	424a      	negs	r2, r1
 8005f66:	414a      	adcs	r2, r1
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	0052      	lsls	r2, r2, #1
 8005f6c:	f000 f802 	bl	8005f74 <setvbuf>
 8005f70:	bd10      	pop	{r4, pc}
	...

08005f74 <setvbuf>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	001d      	movs	r5, r3
 8005f78:	4b57      	ldr	r3, [pc, #348]	@ (80060d8 <setvbuf+0x164>)
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	681e      	ldr	r6, [r3, #0]
 8005f7e:	0004      	movs	r4, r0
 8005f80:	000f      	movs	r7, r1
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	d005      	beq.n	8005f94 <setvbuf+0x20>
 8005f88:	6a33      	ldr	r3, [r6, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <setvbuf+0x20>
 8005f8e:	0030      	movs	r0, r6
 8005f90:	f000 f936 	bl	8006200 <__sinit>
 8005f94:	9b00      	ldr	r3, [sp, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d005      	beq.n	8005fa6 <setvbuf+0x32>
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d900      	bls.n	8005fa0 <setvbuf+0x2c>
 8005f9e:	e097      	b.n	80060d0 <setvbuf+0x15c>
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	da00      	bge.n	8005fa6 <setvbuf+0x32>
 8005fa4:	e094      	b.n	80060d0 <setvbuf+0x15c>
 8005fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fa8:	07db      	lsls	r3, r3, #31
 8005faa:	d405      	bmi.n	8005fb8 <setvbuf+0x44>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	059b      	lsls	r3, r3, #22
 8005fb0:	d402      	bmi.n	8005fb8 <setvbuf+0x44>
 8005fb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fb4:	f000 fa8b 	bl	80064ce <__retarget_lock_acquire_recursive>
 8005fb8:	0021      	movs	r1, r4
 8005fba:	0030      	movs	r0, r6
 8005fbc:	f000 fec8 	bl	8006d50 <_fflush_r>
 8005fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d008      	beq.n	8005fd8 <setvbuf+0x64>
 8005fc6:	0023      	movs	r3, r4
 8005fc8:	3344      	adds	r3, #68	@ 0x44
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d002      	beq.n	8005fd4 <setvbuf+0x60>
 8005fce:	0030      	movs	r0, r6
 8005fd0:	f000 fa80 	bl	80064d4 <_free_r>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61a3      	str	r3, [r4, #24]
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	d503      	bpl.n	8005fec <setvbuf+0x78>
 8005fe4:	0030      	movs	r0, r6
 8005fe6:	6921      	ldr	r1, [r4, #16]
 8005fe8:	f000 fa74 	bl	80064d4 <_free_r>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	4a3b      	ldr	r2, [pc, #236]	@ (80060dc <setvbuf+0x168>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	9b00      	ldr	r3, [sp, #0]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d060      	beq.n	80060bc <setvbuf+0x148>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	0021      	movs	r1, r4
 8005ffe:	0030      	movs	r0, r6
 8006000:	aa02      	add	r2, sp, #8
 8006002:	f000 f931 	bl	8006268 <__swhatbuf_r>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	4303      	orrs	r3, r0
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	2d00      	cmp	r5, #0
 800600e:	d124      	bne.n	800605a <setvbuf+0xe6>
 8006010:	9d02      	ldr	r5, [sp, #8]
 8006012:	0028      	movs	r0, r5
 8006014:	f000 fbec 	bl	80067f0 <malloc>
 8006018:	9501      	str	r5, [sp, #4]
 800601a:	1e07      	subs	r7, r0, #0
 800601c:	d148      	bne.n	80060b0 <setvbuf+0x13c>
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	42ab      	cmp	r3, r5
 8006024:	d13f      	bne.n	80060a6 <setvbuf+0x132>
 8006026:	2501      	movs	r5, #1
 8006028:	426d      	negs	r5, r5
 800602a:	220c      	movs	r2, #12
 800602c:	5ea3      	ldrsh	r3, [r4, r2]
 800602e:	2202      	movs	r2, #2
 8006030:	431a      	orrs	r2, r3
 8006032:	81a2      	strh	r2, [r4, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	60a2      	str	r2, [r4, #8]
 8006038:	0022      	movs	r2, r4
 800603a:	3247      	adds	r2, #71	@ 0x47
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	6122      	str	r2, [r4, #16]
 8006040:	2201      	movs	r2, #1
 8006042:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006044:	6162      	str	r2, [r4, #20]
 8006046:	4211      	tst	r1, r2
 8006048:	d104      	bne.n	8006054 <setvbuf+0xe0>
 800604a:	059b      	lsls	r3, r3, #22
 800604c:	d402      	bmi.n	8006054 <setvbuf+0xe0>
 800604e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006050:	f000 fa3e 	bl	80064d0 <__retarget_lock_release_recursive>
 8006054:	0028      	movs	r0, r5
 8006056:	b005      	add	sp, #20
 8006058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800605a:	2f00      	cmp	r7, #0
 800605c:	d0d9      	beq.n	8006012 <setvbuf+0x9e>
 800605e:	6a33      	ldr	r3, [r6, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <setvbuf+0xf6>
 8006064:	0030      	movs	r0, r6
 8006066:	f000 f8cb 	bl	8006200 <__sinit>
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d103      	bne.n	8006078 <setvbuf+0x104>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	9a00      	ldr	r2, [sp, #0]
 8006074:	431a      	orrs	r2, r3
 8006076:	81a2      	strh	r2, [r4, #12]
 8006078:	220c      	movs	r2, #12
 800607a:	5ea3      	ldrsh	r3, [r4, r2]
 800607c:	2208      	movs	r2, #8
 800607e:	0019      	movs	r1, r3
 8006080:	6027      	str	r7, [r4, #0]
 8006082:	6127      	str	r7, [r4, #16]
 8006084:	6165      	str	r5, [r4, #20]
 8006086:	4011      	ands	r1, r2
 8006088:	4213      	tst	r3, r2
 800608a:	d01b      	beq.n	80060c4 <setvbuf+0x150>
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	d517      	bpl.n	80060c0 <setvbuf+0x14c>
 8006090:	2200      	movs	r2, #0
 8006092:	426d      	negs	r5, r5
 8006094:	60a2      	str	r2, [r4, #8]
 8006096:	61a5      	str	r5, [r4, #24]
 8006098:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800609a:	07d2      	lsls	r2, r2, #31
 800609c:	d401      	bmi.n	80060a2 <setvbuf+0x12e>
 800609e:	059b      	lsls	r3, r3, #22
 80060a0:	d512      	bpl.n	80060c8 <setvbuf+0x154>
 80060a2:	2500      	movs	r5, #0
 80060a4:	e7d6      	b.n	8006054 <setvbuf+0xe0>
 80060a6:	9801      	ldr	r0, [sp, #4]
 80060a8:	f000 fba2 	bl	80067f0 <malloc>
 80060ac:	1e07      	subs	r7, r0, #0
 80060ae:	d0ba      	beq.n	8006026 <setvbuf+0xb2>
 80060b0:	2380      	movs	r3, #128	@ 0x80
 80060b2:	89a2      	ldrh	r2, [r4, #12]
 80060b4:	9d01      	ldr	r5, [sp, #4]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	e7d0      	b.n	800605e <setvbuf+0xea>
 80060bc:	2500      	movs	r5, #0
 80060be:	e7b4      	b.n	800602a <setvbuf+0xb6>
 80060c0:	60a5      	str	r5, [r4, #8]
 80060c2:	e7e9      	b.n	8006098 <setvbuf+0x124>
 80060c4:	60a1      	str	r1, [r4, #8]
 80060c6:	e7e7      	b.n	8006098 <setvbuf+0x124>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f000 fa01 	bl	80064d0 <__retarget_lock_release_recursive>
 80060ce:	e7e8      	b.n	80060a2 <setvbuf+0x12e>
 80060d0:	2501      	movs	r5, #1
 80060d2:	426d      	negs	r5, r5
 80060d4:	e7be      	b.n	8006054 <setvbuf+0xe0>
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	20000018 	.word	0x20000018
 80060dc:	fffff35c 	.word	0xfffff35c

080060e0 <std>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b510      	push	{r4, lr}
 80060e4:	0004      	movs	r4, r0
 80060e6:	6003      	str	r3, [r0, #0]
 80060e8:	6043      	str	r3, [r0, #4]
 80060ea:	6083      	str	r3, [r0, #8]
 80060ec:	8181      	strh	r1, [r0, #12]
 80060ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80060f0:	81c2      	strh	r2, [r0, #14]
 80060f2:	6103      	str	r3, [r0, #16]
 80060f4:	6143      	str	r3, [r0, #20]
 80060f6:	6183      	str	r3, [r0, #24]
 80060f8:	0019      	movs	r1, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	305c      	adds	r0, #92	@ 0x5c
 80060fe:	f000 f98f 	bl	8006420 <memset>
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <std+0x50>)
 8006104:	6224      	str	r4, [r4, #32]
 8006106:	6263      	str	r3, [r4, #36]	@ 0x24
 8006108:	4b0a      	ldr	r3, [pc, #40]	@ (8006134 <std+0x54>)
 800610a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <std+0x58>)
 800610e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006110:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <std+0x5c>)
 8006112:	6323      	str	r3, [r4, #48]	@ 0x30
 8006114:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <std+0x60>)
 8006116:	429c      	cmp	r4, r3
 8006118:	d005      	beq.n	8006126 <std+0x46>
 800611a:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <std+0x64>)
 800611c:	429c      	cmp	r4, r3
 800611e:	d002      	beq.n	8006126 <std+0x46>
 8006120:	4b09      	ldr	r3, [pc, #36]	@ (8006148 <std+0x68>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d103      	bne.n	800612e <std+0x4e>
 8006126:	0020      	movs	r0, r4
 8006128:	3058      	adds	r0, #88	@ 0x58
 800612a:	f000 f9cf 	bl	80064cc <__retarget_lock_init_recursive>
 800612e:	bd10      	pop	{r4, pc}
 8006130:	08006dc9 	.word	0x08006dc9
 8006134:	08006df1 	.word	0x08006df1
 8006138:	08006e29 	.word	0x08006e29
 800613c:	08006e55 	.word	0x08006e55
 8006140:	20000374 	.word	0x20000374
 8006144:	200003dc 	.word	0x200003dc
 8006148:	20000444 	.word	0x20000444

0800614c <stdio_exit_handler>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4a03      	ldr	r2, [pc, #12]	@ (800615c <stdio_exit_handler+0x10>)
 8006150:	4903      	ldr	r1, [pc, #12]	@ (8006160 <stdio_exit_handler+0x14>)
 8006152:	4804      	ldr	r0, [pc, #16]	@ (8006164 <stdio_exit_handler+0x18>)
 8006154:	f000 f86c 	bl	8006230 <_fwalk_sglue>
 8006158:	bd10      	pop	{r4, pc}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	2000000c 	.word	0x2000000c
 8006160:	08006d51 	.word	0x08006d51
 8006164:	2000001c 	.word	0x2000001c

08006168 <cleanup_stdio>:
 8006168:	6841      	ldr	r1, [r0, #4]
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <cleanup_stdio+0x30>)
 800616c:	b510      	push	{r4, lr}
 800616e:	0004      	movs	r4, r0
 8006170:	4299      	cmp	r1, r3
 8006172:	d001      	beq.n	8006178 <cleanup_stdio+0x10>
 8006174:	f000 fdec 	bl	8006d50 <_fflush_r>
 8006178:	68a1      	ldr	r1, [r4, #8]
 800617a:	4b08      	ldr	r3, [pc, #32]	@ (800619c <cleanup_stdio+0x34>)
 800617c:	4299      	cmp	r1, r3
 800617e:	d002      	beq.n	8006186 <cleanup_stdio+0x1e>
 8006180:	0020      	movs	r0, r4
 8006182:	f000 fde5 	bl	8006d50 <_fflush_r>
 8006186:	68e1      	ldr	r1, [r4, #12]
 8006188:	4b05      	ldr	r3, [pc, #20]	@ (80061a0 <cleanup_stdio+0x38>)
 800618a:	4299      	cmp	r1, r3
 800618c:	d002      	beq.n	8006194 <cleanup_stdio+0x2c>
 800618e:	0020      	movs	r0, r4
 8006190:	f000 fdde 	bl	8006d50 <_fflush_r>
 8006194:	bd10      	pop	{r4, pc}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	20000374 	.word	0x20000374
 800619c:	200003dc 	.word	0x200003dc
 80061a0:	20000444 	.word	0x20000444

080061a4 <global_stdio_init.part.0>:
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <global_stdio_init.part.0+0x28>)
 80061a8:	4a09      	ldr	r2, [pc, #36]	@ (80061d0 <global_stdio_init.part.0+0x2c>)
 80061aa:	2104      	movs	r1, #4
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	4809      	ldr	r0, [pc, #36]	@ (80061d4 <global_stdio_init.part.0+0x30>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	f7ff ff95 	bl	80060e0 <std>
 80061b6:	2201      	movs	r2, #1
 80061b8:	2109      	movs	r1, #9
 80061ba:	4807      	ldr	r0, [pc, #28]	@ (80061d8 <global_stdio_init.part.0+0x34>)
 80061bc:	f7ff ff90 	bl	80060e0 <std>
 80061c0:	2202      	movs	r2, #2
 80061c2:	2112      	movs	r1, #18
 80061c4:	4805      	ldr	r0, [pc, #20]	@ (80061dc <global_stdio_init.part.0+0x38>)
 80061c6:	f7ff ff8b 	bl	80060e0 <std>
 80061ca:	bd10      	pop	{r4, pc}
 80061cc:	200004ac 	.word	0x200004ac
 80061d0:	0800614d 	.word	0x0800614d
 80061d4:	20000374 	.word	0x20000374
 80061d8:	200003dc 	.word	0x200003dc
 80061dc:	20000444 	.word	0x20000444

080061e0 <__sfp_lock_acquire>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4802      	ldr	r0, [pc, #8]	@ (80061ec <__sfp_lock_acquire+0xc>)
 80061e4:	f000 f973 	bl	80064ce <__retarget_lock_acquire_recursive>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	200004b1 	.word	0x200004b1

080061f0 <__sfp_lock_release>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4802      	ldr	r0, [pc, #8]	@ (80061fc <__sfp_lock_release+0xc>)
 80061f4:	f000 f96c 	bl	80064d0 <__retarget_lock_release_recursive>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	200004b1 	.word	0x200004b1

08006200 <__sinit>:
 8006200:	b510      	push	{r4, lr}
 8006202:	0004      	movs	r4, r0
 8006204:	f7ff ffec 	bl	80061e0 <__sfp_lock_acquire>
 8006208:	6a23      	ldr	r3, [r4, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <__sinit+0x14>
 800620e:	f7ff ffef 	bl	80061f0 <__sfp_lock_release>
 8006212:	bd10      	pop	{r4, pc}
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__sinit+0x28>)
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	4b04      	ldr	r3, [pc, #16]	@ (800622c <__sinit+0x2c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f6      	bne.n	800620e <__sinit+0xe>
 8006220:	f7ff ffc0 	bl	80061a4 <global_stdio_init.part.0>
 8006224:	e7f3      	b.n	800620e <__sinit+0xe>
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	08006169 	.word	0x08006169
 800622c:	200004ac 	.word	0x200004ac

08006230 <_fwalk_sglue>:
 8006230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006232:	0014      	movs	r4, r2
 8006234:	2600      	movs	r6, #0
 8006236:	9000      	str	r0, [sp, #0]
 8006238:	9101      	str	r1, [sp, #4]
 800623a:	68a5      	ldr	r5, [r4, #8]
 800623c:	6867      	ldr	r7, [r4, #4]
 800623e:	3f01      	subs	r7, #1
 8006240:	d504      	bpl.n	800624c <_fwalk_sglue+0x1c>
 8006242:	6824      	ldr	r4, [r4, #0]
 8006244:	2c00      	cmp	r4, #0
 8006246:	d1f8      	bne.n	800623a <_fwalk_sglue+0xa>
 8006248:	0030      	movs	r0, r6
 800624a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800624c:	89ab      	ldrh	r3, [r5, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d908      	bls.n	8006264 <_fwalk_sglue+0x34>
 8006252:	220e      	movs	r2, #14
 8006254:	5eab      	ldrsh	r3, [r5, r2]
 8006256:	3301      	adds	r3, #1
 8006258:	d004      	beq.n	8006264 <_fwalk_sglue+0x34>
 800625a:	0029      	movs	r1, r5
 800625c:	9800      	ldr	r0, [sp, #0]
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	4798      	blx	r3
 8006262:	4306      	orrs	r6, r0
 8006264:	3568      	adds	r5, #104	@ 0x68
 8006266:	e7ea      	b.n	800623e <_fwalk_sglue+0xe>

08006268 <__swhatbuf_r>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	000e      	movs	r6, r1
 800626c:	001d      	movs	r5, r3
 800626e:	230e      	movs	r3, #14
 8006270:	5ec9      	ldrsh	r1, [r1, r3]
 8006272:	0014      	movs	r4, r2
 8006274:	b096      	sub	sp, #88	@ 0x58
 8006276:	2900      	cmp	r1, #0
 8006278:	da0c      	bge.n	8006294 <__swhatbuf_r+0x2c>
 800627a:	89b2      	ldrh	r2, [r6, #12]
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	0011      	movs	r1, r2
 8006280:	4019      	ands	r1, r3
 8006282:	421a      	tst	r2, r3
 8006284:	d114      	bne.n	80062b0 <__swhatbuf_r+0x48>
 8006286:	2380      	movs	r3, #128	@ 0x80
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	2000      	movs	r0, #0
 800628c:	6029      	str	r1, [r5, #0]
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	b016      	add	sp, #88	@ 0x58
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	466a      	mov	r2, sp
 8006296:	f000 f8cb 	bl	8006430 <_fstat_r>
 800629a:	2800      	cmp	r0, #0
 800629c:	dbed      	blt.n	800627a <__swhatbuf_r+0x12>
 800629e:	23f0      	movs	r3, #240	@ 0xf0
 80062a0:	9901      	ldr	r1, [sp, #4]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	4019      	ands	r1, r3
 80062a6:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <__swhatbuf_r+0x50>)
 80062a8:	18c9      	adds	r1, r1, r3
 80062aa:	424b      	negs	r3, r1
 80062ac:	4159      	adcs	r1, r3
 80062ae:	e7ea      	b.n	8006286 <__swhatbuf_r+0x1e>
 80062b0:	2100      	movs	r1, #0
 80062b2:	2340      	movs	r3, #64	@ 0x40
 80062b4:	e7e9      	b.n	800628a <__swhatbuf_r+0x22>
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	ffffe000 	.word	0xffffe000

080062bc <__smakebuf_r>:
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	2602      	movs	r6, #2
 80062c0:	898b      	ldrh	r3, [r1, #12]
 80062c2:	0005      	movs	r5, r0
 80062c4:	000c      	movs	r4, r1
 80062c6:	b085      	sub	sp, #20
 80062c8:	4233      	tst	r3, r6
 80062ca:	d007      	beq.n	80062dc <__smakebuf_r+0x20>
 80062cc:	0023      	movs	r3, r4
 80062ce:	3347      	adds	r3, #71	@ 0x47
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	2301      	movs	r3, #1
 80062d6:	6163      	str	r3, [r4, #20]
 80062d8:	b005      	add	sp, #20
 80062da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	aa02      	add	r2, sp, #8
 80062e0:	f7ff ffc2 	bl	8006268 <__swhatbuf_r>
 80062e4:	9f02      	ldr	r7, [sp, #8]
 80062e6:	9001      	str	r0, [sp, #4]
 80062e8:	0039      	movs	r1, r7
 80062ea:	0028      	movs	r0, r5
 80062ec:	f000 faac 	bl	8006848 <_malloc_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d108      	bne.n	8006306 <__smakebuf_r+0x4a>
 80062f4:	220c      	movs	r2, #12
 80062f6:	5ea3      	ldrsh	r3, [r4, r2]
 80062f8:	059a      	lsls	r2, r3, #22
 80062fa:	d4ed      	bmi.n	80062d8 <__smakebuf_r+0x1c>
 80062fc:	2203      	movs	r2, #3
 80062fe:	4393      	bics	r3, r2
 8006300:	431e      	orrs	r6, r3
 8006302:	81a6      	strh	r6, [r4, #12]
 8006304:	e7e2      	b.n	80062cc <__smakebuf_r+0x10>
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	89a2      	ldrh	r2, [r4, #12]
 800630a:	6020      	str	r0, [r4, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	6120      	str	r0, [r4, #16]
 8006314:	6167      	str	r7, [r4, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00c      	beq.n	8006334 <__smakebuf_r+0x78>
 800631a:	0028      	movs	r0, r5
 800631c:	230e      	movs	r3, #14
 800631e:	5ee1      	ldrsh	r1, [r4, r3]
 8006320:	f000 f898 	bl	8006454 <_isatty_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	d005      	beq.n	8006334 <__smakebuf_r+0x78>
 8006328:	2303      	movs	r3, #3
 800632a:	89a2      	ldrh	r2, [r4, #12]
 800632c:	439a      	bics	r2, r3
 800632e:	3b02      	subs	r3, #2
 8006330:	4313      	orrs	r3, r2
 8006332:	81a3      	strh	r3, [r4, #12]
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	9a01      	ldr	r2, [sp, #4]
 8006338:	4313      	orrs	r3, r2
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	e7cc      	b.n	80062d8 <__smakebuf_r+0x1c>
	...

08006340 <iprintf>:
 8006340:	b40f      	push	{r0, r1, r2, r3}
 8006342:	b507      	push	{r0, r1, r2, lr}
 8006344:	4905      	ldr	r1, [pc, #20]	@ (800635c <iprintf+0x1c>)
 8006346:	ab04      	add	r3, sp, #16
 8006348:	6808      	ldr	r0, [r1, #0]
 800634a:	cb04      	ldmia	r3!, {r2}
 800634c:	6881      	ldr	r1, [r0, #8]
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	f000 f932 	bl	80065b8 <_vfiprintf_r>
 8006354:	b003      	add	sp, #12
 8006356:	bc08      	pop	{r3}
 8006358:	b004      	add	sp, #16
 800635a:	4718      	bx	r3
 800635c:	20000018 	.word	0x20000018

08006360 <_puts_r>:
 8006360:	6a03      	ldr	r3, [r0, #32]
 8006362:	b570      	push	{r4, r5, r6, lr}
 8006364:	0005      	movs	r5, r0
 8006366:	000e      	movs	r6, r1
 8006368:	6884      	ldr	r4, [r0, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <_puts_r+0x12>
 800636e:	f7ff ff47 	bl	8006200 <__sinit>
 8006372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006374:	07db      	lsls	r3, r3, #31
 8006376:	d405      	bmi.n	8006384 <_puts_r+0x24>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	059b      	lsls	r3, r3, #22
 800637c:	d402      	bmi.n	8006384 <_puts_r+0x24>
 800637e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006380:	f000 f8a5 	bl	80064ce <__retarget_lock_acquire_recursive>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	071b      	lsls	r3, r3, #28
 8006388:	d502      	bpl.n	8006390 <_puts_r+0x30>
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11f      	bne.n	80063d0 <_puts_r+0x70>
 8006390:	0021      	movs	r1, r4
 8006392:	0028      	movs	r0, r5
 8006394:	f000 fda6 	bl	8006ee4 <__swsetup_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	d019      	beq.n	80063d0 <_puts_r+0x70>
 800639c:	2501      	movs	r5, #1
 800639e:	426d      	negs	r5, r5
 80063a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063a2:	07db      	lsls	r3, r3, #31
 80063a4:	d405      	bmi.n	80063b2 <_puts_r+0x52>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	059b      	lsls	r3, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_puts_r+0x52>
 80063ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ae:	f000 f88f 	bl	80064d0 <__retarget_lock_release_recursive>
 80063b2:	0028      	movs	r0, r5
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	3601      	adds	r6, #1
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da04      	bge.n	80063c8 <_puts_r+0x68>
 80063be:	69a2      	ldr	r2, [r4, #24]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	dc16      	bgt.n	80063f2 <_puts_r+0x92>
 80063c4:	290a      	cmp	r1, #10
 80063c6:	d014      	beq.n	80063f2 <_puts_r+0x92>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	6022      	str	r2, [r4, #0]
 80063ce:	7019      	strb	r1, [r3, #0]
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	7831      	ldrb	r1, [r6, #0]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	2900      	cmp	r1, #0
 80063d8:	d1ed      	bne.n	80063b6 <_puts_r+0x56>
 80063da:	60a3      	str	r3, [r4, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da0f      	bge.n	8006400 <_puts_r+0xa0>
 80063e0:	0022      	movs	r2, r4
 80063e2:	0028      	movs	r0, r5
 80063e4:	310a      	adds	r1, #10
 80063e6:	f000 fd3b 	bl	8006e60 <__swbuf_r>
 80063ea:	3001      	adds	r0, #1
 80063ec:	d0d6      	beq.n	800639c <_puts_r+0x3c>
 80063ee:	250a      	movs	r5, #10
 80063f0:	e7d6      	b.n	80063a0 <_puts_r+0x40>
 80063f2:	0022      	movs	r2, r4
 80063f4:	0028      	movs	r0, r5
 80063f6:	f000 fd33 	bl	8006e60 <__swbuf_r>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d1e8      	bne.n	80063d0 <_puts_r+0x70>
 80063fe:	e7cd      	b.n	800639c <_puts_r+0x3c>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	6022      	str	r2, [r4, #0]
 8006406:	220a      	movs	r2, #10
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e7f0      	b.n	80063ee <_puts_r+0x8e>

0800640c <puts>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4b03      	ldr	r3, [pc, #12]	@ (800641c <puts+0x10>)
 8006410:	0001      	movs	r1, r0
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f7ff ffa4 	bl	8006360 <_puts_r>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	20000018 	.word	0x20000018

08006420 <memset>:
 8006420:	0003      	movs	r3, r0
 8006422:	1882      	adds	r2, r0, r2
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	7019      	strb	r1, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <_fstat_r>:
 8006430:	2300      	movs	r3, #0
 8006432:	b570      	push	{r4, r5, r6, lr}
 8006434:	4d06      	ldr	r5, [pc, #24]	@ (8006450 <_fstat_r+0x20>)
 8006436:	0004      	movs	r4, r0
 8006438:	0008      	movs	r0, r1
 800643a:	0011      	movs	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f7fb f852 	bl	80014e6 <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d103      	bne.n	800644e <_fstat_r+0x1e>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d000      	beq.n	800644e <_fstat_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	200004bc 	.word	0x200004bc

08006454 <_isatty_r>:
 8006454:	2300      	movs	r3, #0
 8006456:	b570      	push	{r4, r5, r6, lr}
 8006458:	4d06      	ldr	r5, [pc, #24]	@ (8006474 <_isatty_r+0x20>)
 800645a:	0004      	movs	r4, r0
 800645c:	0008      	movs	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fb f84f 	bl	8001502 <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d103      	bne.n	8006470 <_isatty_r+0x1c>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d000      	beq.n	8006470 <_isatty_r+0x1c>
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	200004bc 	.word	0x200004bc

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	@ (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	20000018 	.word	0x20000018

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	2600      	movs	r6, #0
 8006488:	4c0c      	ldr	r4, [pc, #48]	@ (80064bc <__libc_init_array+0x38>)
 800648a:	4d0d      	ldr	r5, [pc, #52]	@ (80064c0 <__libc_init_array+0x3c>)
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	2600      	movs	r6, #0
 8006496:	f000 fdef 	bl	8007078 <_init>
 800649a:	4c0a      	ldr	r4, [pc, #40]	@ (80064c4 <__libc_init_array+0x40>)
 800649c:	4d0a      	ldr	r5, [pc, #40]	@ (80064c8 <__libc_init_array+0x44>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	00b3      	lsls	r3, r6, #2
 80064aa:	58eb      	ldr	r3, [r5, r3]
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	00b3      	lsls	r3, r6, #2
 80064b4:	58eb      	ldr	r3, [r5, r3]
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	08007220 	.word	0x08007220
 80064c0:	08007220 	.word	0x08007220
 80064c4:	08007224 	.word	0x08007224
 80064c8:	08007220 	.word	0x08007220

080064cc <__retarget_lock_init_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_acquire_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_release_recursive>:
 80064d0:	4770      	bx	lr
	...

080064d4 <_free_r>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	0005      	movs	r5, r0
 80064d8:	1e0c      	subs	r4, r1, #0
 80064da:	d010      	beq.n	80064fe <_free_r+0x2a>
 80064dc:	3c04      	subs	r4, #4
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da00      	bge.n	80064e6 <_free_r+0x12>
 80064e4:	18e4      	adds	r4, r4, r3
 80064e6:	0028      	movs	r0, r5
 80064e8:	f000 fc5e 	bl	8006da8 <__malloc_lock>
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <_free_r+0x90>)
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <_free_r+0x2c>
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	6014      	str	r4, [r2, #0]
 80064f8:	0028      	movs	r0, r5
 80064fa:	f000 fc5d 	bl	8006db8 <__malloc_unlock>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	42a3      	cmp	r3, r4
 8006502:	d908      	bls.n	8006516 <_free_r+0x42>
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	1821      	adds	r1, r4, r0
 8006508:	428b      	cmp	r3, r1
 800650a:	d1f3      	bne.n	80064f4 <_free_r+0x20>
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	1809      	adds	r1, r1, r0
 8006512:	6021      	str	r1, [r4, #0]
 8006514:	e7ee      	b.n	80064f4 <_free_r+0x20>
 8006516:	001a      	movs	r2, r3
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <_free_r+0x4e>
 800651e:	42a3      	cmp	r3, r4
 8006520:	d9f9      	bls.n	8006516 <_free_r+0x42>
 8006522:	6811      	ldr	r1, [r2, #0]
 8006524:	1850      	adds	r0, r2, r1
 8006526:	42a0      	cmp	r0, r4
 8006528:	d10b      	bne.n	8006542 <_free_r+0x6e>
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1809      	adds	r1, r1, r0
 800652e:	1850      	adds	r0, r2, r1
 8006530:	6011      	str	r1, [r2, #0]
 8006532:	4283      	cmp	r3, r0
 8006534:	d1e0      	bne.n	80064f8 <_free_r+0x24>
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	1841      	adds	r1, r0, r1
 800653c:	6011      	str	r1, [r2, #0]
 800653e:	6053      	str	r3, [r2, #4]
 8006540:	e7da      	b.n	80064f8 <_free_r+0x24>
 8006542:	42a0      	cmp	r0, r4
 8006544:	d902      	bls.n	800654c <_free_r+0x78>
 8006546:	230c      	movs	r3, #12
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	e7d5      	b.n	80064f8 <_free_r+0x24>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	1821      	adds	r1, r4, r0
 8006550:	428b      	cmp	r3, r1
 8006552:	d103      	bne.n	800655c <_free_r+0x88>
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	1809      	adds	r1, r1, r0
 800655a:	6021      	str	r1, [r4, #0]
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	6054      	str	r4, [r2, #4]
 8006560:	e7ca      	b.n	80064f8 <_free_r+0x24>
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	200004b8 	.word	0x200004b8

08006568 <__sfputc_r>:
 8006568:	6893      	ldr	r3, [r2, #8]
 800656a:	b510      	push	{r4, lr}
 800656c:	3b01      	subs	r3, #1
 800656e:	6093      	str	r3, [r2, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da04      	bge.n	800657e <__sfputc_r+0x16>
 8006574:	6994      	ldr	r4, [r2, #24]
 8006576:	42a3      	cmp	r3, r4
 8006578:	db07      	blt.n	800658a <__sfputc_r+0x22>
 800657a:	290a      	cmp	r1, #10
 800657c:	d005      	beq.n	800658a <__sfputc_r+0x22>
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	1c58      	adds	r0, r3, #1
 8006582:	6010      	str	r0, [r2, #0]
 8006584:	7019      	strb	r1, [r3, #0]
 8006586:	0008      	movs	r0, r1
 8006588:	bd10      	pop	{r4, pc}
 800658a:	f000 fc69 	bl	8006e60 <__swbuf_r>
 800658e:	0001      	movs	r1, r0
 8006590:	e7f9      	b.n	8006586 <__sfputc_r+0x1e>

08006592 <__sfputs_r>:
 8006592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006594:	0006      	movs	r6, r0
 8006596:	000f      	movs	r7, r1
 8006598:	0014      	movs	r4, r2
 800659a:	18d5      	adds	r5, r2, r3
 800659c:	42ac      	cmp	r4, r5
 800659e:	d101      	bne.n	80065a4 <__sfputs_r+0x12>
 80065a0:	2000      	movs	r0, #0
 80065a2:	e007      	b.n	80065b4 <__sfputs_r+0x22>
 80065a4:	7821      	ldrb	r1, [r4, #0]
 80065a6:	003a      	movs	r2, r7
 80065a8:	0030      	movs	r0, r6
 80065aa:	f7ff ffdd 	bl	8006568 <__sfputc_r>
 80065ae:	3401      	adds	r4, #1
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d1f3      	bne.n	800659c <__sfputs_r+0xa>
 80065b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065b8 <_vfiprintf_r>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b0a1      	sub	sp, #132	@ 0x84
 80065bc:	000f      	movs	r7, r1
 80065be:	0015      	movs	r5, r2
 80065c0:	001e      	movs	r6, r3
 80065c2:	9003      	str	r0, [sp, #12]
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d004      	beq.n	80065d2 <_vfiprintf_r+0x1a>
 80065c8:	6a03      	ldr	r3, [r0, #32]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <_vfiprintf_r+0x1a>
 80065ce:	f7ff fe17 	bl	8006200 <__sinit>
 80065d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065d4:	07db      	lsls	r3, r3, #31
 80065d6:	d405      	bmi.n	80065e4 <_vfiprintf_r+0x2c>
 80065d8:	89bb      	ldrh	r3, [r7, #12]
 80065da:	059b      	lsls	r3, r3, #22
 80065dc:	d402      	bmi.n	80065e4 <_vfiprintf_r+0x2c>
 80065de:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80065e0:	f7ff ff75 	bl	80064ce <__retarget_lock_acquire_recursive>
 80065e4:	89bb      	ldrh	r3, [r7, #12]
 80065e6:	071b      	lsls	r3, r3, #28
 80065e8:	d502      	bpl.n	80065f0 <_vfiprintf_r+0x38>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d113      	bne.n	8006618 <_vfiprintf_r+0x60>
 80065f0:	0039      	movs	r1, r7
 80065f2:	9803      	ldr	r0, [sp, #12]
 80065f4:	f000 fc76 	bl	8006ee4 <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d00d      	beq.n	8006618 <_vfiprintf_r+0x60>
 80065fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065fe:	07db      	lsls	r3, r3, #31
 8006600:	d503      	bpl.n	800660a <_vfiprintf_r+0x52>
 8006602:	2001      	movs	r0, #1
 8006604:	4240      	negs	r0, r0
 8006606:	b021      	add	sp, #132	@ 0x84
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	89bb      	ldrh	r3, [r7, #12]
 800660c:	059b      	lsls	r3, r3, #22
 800660e:	d4f8      	bmi.n	8006602 <_vfiprintf_r+0x4a>
 8006610:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006612:	f7ff ff5d 	bl	80064d0 <__retarget_lock_release_recursive>
 8006616:	e7f4      	b.n	8006602 <_vfiprintf_r+0x4a>
 8006618:	2300      	movs	r3, #0
 800661a:	ac08      	add	r4, sp, #32
 800661c:	6163      	str	r3, [r4, #20]
 800661e:	3320      	adds	r3, #32
 8006620:	7663      	strb	r3, [r4, #25]
 8006622:	3310      	adds	r3, #16
 8006624:	76a3      	strb	r3, [r4, #26]
 8006626:	9607      	str	r6, [sp, #28]
 8006628:	002e      	movs	r6, r5
 800662a:	7833      	ldrb	r3, [r6, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <_vfiprintf_r+0x7c>
 8006630:	2b25      	cmp	r3, #37	@ 0x25
 8006632:	d148      	bne.n	80066c6 <_vfiprintf_r+0x10e>
 8006634:	1b73      	subs	r3, r6, r5
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	42ae      	cmp	r6, r5
 800663a:	d00b      	beq.n	8006654 <_vfiprintf_r+0x9c>
 800663c:	002a      	movs	r2, r5
 800663e:	0039      	movs	r1, r7
 8006640:	9803      	ldr	r0, [sp, #12]
 8006642:	f7ff ffa6 	bl	8006592 <__sfputs_r>
 8006646:	3001      	adds	r0, #1
 8006648:	d100      	bne.n	800664c <_vfiprintf_r+0x94>
 800664a:	e0ae      	b.n	80067aa <_vfiprintf_r+0x1f2>
 800664c:	6963      	ldr	r3, [r4, #20]
 800664e:	9a05      	ldr	r2, [sp, #20]
 8006650:	189b      	adds	r3, r3, r2
 8006652:	6163      	str	r3, [r4, #20]
 8006654:	7833      	ldrb	r3, [r6, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d100      	bne.n	800665c <_vfiprintf_r+0xa4>
 800665a:	e0a6      	b.n	80067aa <_vfiprintf_r+0x1f2>
 800665c:	2201      	movs	r2, #1
 800665e:	2300      	movs	r3, #0
 8006660:	4252      	negs	r2, r2
 8006662:	6062      	str	r2, [r4, #4]
 8006664:	a904      	add	r1, sp, #16
 8006666:	3254      	adds	r2, #84	@ 0x54
 8006668:	1852      	adds	r2, r2, r1
 800666a:	1c75      	adds	r5, r6, #1
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	60e3      	str	r3, [r4, #12]
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	7013      	strb	r3, [r2, #0]
 8006674:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006676:	4b59      	ldr	r3, [pc, #356]	@ (80067dc <_vfiprintf_r+0x224>)
 8006678:	2205      	movs	r2, #5
 800667a:	0018      	movs	r0, r3
 800667c:	7829      	ldrb	r1, [r5, #0]
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	f000 fcee 	bl	8007060 <memchr>
 8006684:	1c6e      	adds	r6, r5, #1
 8006686:	2800      	cmp	r0, #0
 8006688:	d11f      	bne.n	80066ca <_vfiprintf_r+0x112>
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	06d3      	lsls	r3, r2, #27
 800668e:	d504      	bpl.n	800669a <_vfiprintf_r+0xe2>
 8006690:	2353      	movs	r3, #83	@ 0x53
 8006692:	a904      	add	r1, sp, #16
 8006694:	185b      	adds	r3, r3, r1
 8006696:	2120      	movs	r1, #32
 8006698:	7019      	strb	r1, [r3, #0]
 800669a:	0713      	lsls	r3, r2, #28
 800669c:	d504      	bpl.n	80066a8 <_vfiprintf_r+0xf0>
 800669e:	2353      	movs	r3, #83	@ 0x53
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	185b      	adds	r3, r3, r1
 80066a4:	212b      	movs	r1, #43	@ 0x2b
 80066a6:	7019      	strb	r1, [r3, #0]
 80066a8:	782b      	ldrb	r3, [r5, #0]
 80066aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ac:	d016      	beq.n	80066dc <_vfiprintf_r+0x124>
 80066ae:	002e      	movs	r6, r5
 80066b0:	2100      	movs	r1, #0
 80066b2:	200a      	movs	r0, #10
 80066b4:	68e3      	ldr	r3, [r4, #12]
 80066b6:	7832      	ldrb	r2, [r6, #0]
 80066b8:	1c75      	adds	r5, r6, #1
 80066ba:	3a30      	subs	r2, #48	@ 0x30
 80066bc:	2a09      	cmp	r2, #9
 80066be:	d950      	bls.n	8006762 <_vfiprintf_r+0x1aa>
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d111      	bne.n	80066e8 <_vfiprintf_r+0x130>
 80066c4:	e017      	b.n	80066f6 <_vfiprintf_r+0x13e>
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7af      	b.n	800662a <_vfiprintf_r+0x72>
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	1ac0      	subs	r0, r0, r3
 80066d0:	2301      	movs	r3, #1
 80066d2:	4083      	lsls	r3, r0
 80066d4:	4313      	orrs	r3, r2
 80066d6:	0035      	movs	r5, r6
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	e7cc      	b.n	8006676 <_vfiprintf_r+0xbe>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	1d19      	adds	r1, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9107      	str	r1, [sp, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db01      	blt.n	80066ec <_vfiprintf_r+0x134>
 80066e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ea:	e004      	b.n	80066f6 <_vfiprintf_r+0x13e>
 80066ec:	425b      	negs	r3, r3
 80066ee:	60e3      	str	r3, [r4, #12]
 80066f0:	2302      	movs	r3, #2
 80066f2:	4313      	orrs	r3, r2
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	7833      	ldrb	r3, [r6, #0]
 80066f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80066fa:	d10c      	bne.n	8006716 <_vfiprintf_r+0x15e>
 80066fc:	7873      	ldrb	r3, [r6, #1]
 80066fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006700:	d134      	bne.n	800676c <_vfiprintf_r+0x1b4>
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	3602      	adds	r6, #2
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9207      	str	r2, [sp, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da01      	bge.n	8006714 <_vfiprintf_r+0x15c>
 8006710:	2301      	movs	r3, #1
 8006712:	425b      	negs	r3, r3
 8006714:	9309      	str	r3, [sp, #36]	@ 0x24
 8006716:	4d32      	ldr	r5, [pc, #200]	@ (80067e0 <_vfiprintf_r+0x228>)
 8006718:	2203      	movs	r2, #3
 800671a:	0028      	movs	r0, r5
 800671c:	7831      	ldrb	r1, [r6, #0]
 800671e:	f000 fc9f 	bl	8007060 <memchr>
 8006722:	2800      	cmp	r0, #0
 8006724:	d006      	beq.n	8006734 <_vfiprintf_r+0x17c>
 8006726:	2340      	movs	r3, #64	@ 0x40
 8006728:	1b40      	subs	r0, r0, r5
 800672a:	4083      	lsls	r3, r0
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	3601      	adds	r6, #1
 8006730:	4313      	orrs	r3, r2
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	7831      	ldrb	r1, [r6, #0]
 8006736:	2206      	movs	r2, #6
 8006738:	482a      	ldr	r0, [pc, #168]	@ (80067e4 <_vfiprintf_r+0x22c>)
 800673a:	1c75      	adds	r5, r6, #1
 800673c:	7621      	strb	r1, [r4, #24]
 800673e:	f000 fc8f 	bl	8007060 <memchr>
 8006742:	2800      	cmp	r0, #0
 8006744:	d040      	beq.n	80067c8 <_vfiprintf_r+0x210>
 8006746:	4b28      	ldr	r3, [pc, #160]	@ (80067e8 <_vfiprintf_r+0x230>)
 8006748:	2b00      	cmp	r3, #0
 800674a:	d122      	bne.n	8006792 <_vfiprintf_r+0x1da>
 800674c:	2207      	movs	r2, #7
 800674e:	9b07      	ldr	r3, [sp, #28]
 8006750:	3307      	adds	r3, #7
 8006752:	4393      	bics	r3, r2
 8006754:	3308      	adds	r3, #8
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	9a04      	ldr	r2, [sp, #16]
 800675c:	189b      	adds	r3, r3, r2
 800675e:	6163      	str	r3, [r4, #20]
 8006760:	e762      	b.n	8006628 <_vfiprintf_r+0x70>
 8006762:	4343      	muls	r3, r0
 8006764:	002e      	movs	r6, r5
 8006766:	2101      	movs	r1, #1
 8006768:	189b      	adds	r3, r3, r2
 800676a:	e7a4      	b.n	80066b6 <_vfiprintf_r+0xfe>
 800676c:	2300      	movs	r3, #0
 800676e:	200a      	movs	r0, #10
 8006770:	0019      	movs	r1, r3
 8006772:	3601      	adds	r6, #1
 8006774:	6063      	str	r3, [r4, #4]
 8006776:	7832      	ldrb	r2, [r6, #0]
 8006778:	1c75      	adds	r5, r6, #1
 800677a:	3a30      	subs	r2, #48	@ 0x30
 800677c:	2a09      	cmp	r2, #9
 800677e:	d903      	bls.n	8006788 <_vfiprintf_r+0x1d0>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0c8      	beq.n	8006716 <_vfiprintf_r+0x15e>
 8006784:	9109      	str	r1, [sp, #36]	@ 0x24
 8006786:	e7c6      	b.n	8006716 <_vfiprintf_r+0x15e>
 8006788:	4341      	muls	r1, r0
 800678a:	002e      	movs	r6, r5
 800678c:	2301      	movs	r3, #1
 800678e:	1889      	adds	r1, r1, r2
 8006790:	e7f1      	b.n	8006776 <_vfiprintf_r+0x1be>
 8006792:	aa07      	add	r2, sp, #28
 8006794:	9200      	str	r2, [sp, #0]
 8006796:	0021      	movs	r1, r4
 8006798:	003a      	movs	r2, r7
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <_vfiprintf_r+0x234>)
 800679c:	9803      	ldr	r0, [sp, #12]
 800679e:	e000      	b.n	80067a2 <_vfiprintf_r+0x1ea>
 80067a0:	bf00      	nop
 80067a2:	9004      	str	r0, [sp, #16]
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	3301      	adds	r3, #1
 80067a8:	d1d6      	bne.n	8006758 <_vfiprintf_r+0x1a0>
 80067aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ac:	07db      	lsls	r3, r3, #31
 80067ae:	d405      	bmi.n	80067bc <_vfiprintf_r+0x204>
 80067b0:	89bb      	ldrh	r3, [r7, #12]
 80067b2:	059b      	lsls	r3, r3, #22
 80067b4:	d402      	bmi.n	80067bc <_vfiprintf_r+0x204>
 80067b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80067b8:	f7ff fe8a 	bl	80064d0 <__retarget_lock_release_recursive>
 80067bc:	89bb      	ldrh	r3, [r7, #12]
 80067be:	065b      	lsls	r3, r3, #25
 80067c0:	d500      	bpl.n	80067c4 <_vfiprintf_r+0x20c>
 80067c2:	e71e      	b.n	8006602 <_vfiprintf_r+0x4a>
 80067c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80067c6:	e71e      	b.n	8006606 <_vfiprintf_r+0x4e>
 80067c8:	aa07      	add	r2, sp, #28
 80067ca:	9200      	str	r2, [sp, #0]
 80067cc:	0021      	movs	r1, r4
 80067ce:	003a      	movs	r2, r7
 80067d0:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <_vfiprintf_r+0x234>)
 80067d2:	9803      	ldr	r0, [sp, #12]
 80067d4:	f000 f928 	bl	8006a28 <_printf_i>
 80067d8:	e7e3      	b.n	80067a2 <_vfiprintf_r+0x1ea>
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	080071e4 	.word	0x080071e4
 80067e0:	080071ea 	.word	0x080071ea
 80067e4:	080071ee 	.word	0x080071ee
 80067e8:	00000000 	.word	0x00000000
 80067ec:	08006593 	.word	0x08006593

080067f0 <malloc>:
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <malloc+0x10>)
 80067f4:	0001      	movs	r1, r0
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	f000 f826 	bl	8006848 <_malloc_r>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	20000018 	.word	0x20000018

08006804 <sbrk_aligned>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4e0f      	ldr	r6, [pc, #60]	@ (8006844 <sbrk_aligned+0x40>)
 8006808:	000d      	movs	r5, r1
 800680a:	6831      	ldr	r1, [r6, #0]
 800680c:	0004      	movs	r4, r0
 800680e:	2900      	cmp	r1, #0
 8006810:	d102      	bne.n	8006818 <sbrk_aligned+0x14>
 8006812:	f000 fbff 	bl	8007014 <_sbrk_r>
 8006816:	6030      	str	r0, [r6, #0]
 8006818:	0029      	movs	r1, r5
 800681a:	0020      	movs	r0, r4
 800681c:	f000 fbfa 	bl	8007014 <_sbrk_r>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d103      	bne.n	800682c <sbrk_aligned+0x28>
 8006824:	2501      	movs	r5, #1
 8006826:	426d      	negs	r5, r5
 8006828:	0028      	movs	r0, r5
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	2303      	movs	r3, #3
 800682e:	1cc5      	adds	r5, r0, #3
 8006830:	439d      	bics	r5, r3
 8006832:	42a8      	cmp	r0, r5
 8006834:	d0f8      	beq.n	8006828 <sbrk_aligned+0x24>
 8006836:	1a29      	subs	r1, r5, r0
 8006838:	0020      	movs	r0, r4
 800683a:	f000 fbeb 	bl	8007014 <_sbrk_r>
 800683e:	3001      	adds	r0, #1
 8006840:	d1f2      	bne.n	8006828 <sbrk_aligned+0x24>
 8006842:	e7ef      	b.n	8006824 <sbrk_aligned+0x20>
 8006844:	200004b4 	.word	0x200004b4

08006848 <_malloc_r>:
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	2203      	movs	r2, #3
 800684c:	1ccb      	adds	r3, r1, #3
 800684e:	4393      	bics	r3, r2
 8006850:	3308      	adds	r3, #8
 8006852:	0005      	movs	r5, r0
 8006854:	001f      	movs	r7, r3
 8006856:	2b0c      	cmp	r3, #12
 8006858:	d234      	bcs.n	80068c4 <_malloc_r+0x7c>
 800685a:	270c      	movs	r7, #12
 800685c:	42b9      	cmp	r1, r7
 800685e:	d833      	bhi.n	80068c8 <_malloc_r+0x80>
 8006860:	0028      	movs	r0, r5
 8006862:	f000 faa1 	bl	8006da8 <__malloc_lock>
 8006866:	4e37      	ldr	r6, [pc, #220]	@ (8006944 <_malloc_r+0xfc>)
 8006868:	6833      	ldr	r3, [r6, #0]
 800686a:	001c      	movs	r4, r3
 800686c:	2c00      	cmp	r4, #0
 800686e:	d12f      	bne.n	80068d0 <_malloc_r+0x88>
 8006870:	0039      	movs	r1, r7
 8006872:	0028      	movs	r0, r5
 8006874:	f7ff ffc6 	bl	8006804 <sbrk_aligned>
 8006878:	0004      	movs	r4, r0
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d15f      	bne.n	800693e <_malloc_r+0xf6>
 800687e:	6834      	ldr	r4, [r6, #0]
 8006880:	9400      	str	r4, [sp, #0]
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d14a      	bne.n	800691e <_malloc_r+0xd6>
 8006888:	2c00      	cmp	r4, #0
 800688a:	d052      	beq.n	8006932 <_malloc_r+0xea>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	0028      	movs	r0, r5
 8006890:	18e3      	adds	r3, r4, r3
 8006892:	9900      	ldr	r1, [sp, #0]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	f000 fbbd 	bl	8007014 <_sbrk_r>
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	4283      	cmp	r3, r0
 800689e:	d148      	bne.n	8006932 <_malloc_r+0xea>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	0028      	movs	r0, r5
 80068a4:	1aff      	subs	r7, r7, r3
 80068a6:	0039      	movs	r1, r7
 80068a8:	f7ff ffac 	bl	8006804 <sbrk_aligned>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d040      	beq.n	8006932 <_malloc_r+0xea>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	d133      	bne.n	8006926 <_malloc_r+0xde>
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	e019      	b.n	80068f8 <_malloc_r+0xb0>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dac9      	bge.n	800685c <_malloc_r+0x14>
 80068c8:	230c      	movs	r3, #12
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	2000      	movs	r0, #0
 80068ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068d0:	6821      	ldr	r1, [r4, #0]
 80068d2:	1bc9      	subs	r1, r1, r7
 80068d4:	d420      	bmi.n	8006918 <_malloc_r+0xd0>
 80068d6:	290b      	cmp	r1, #11
 80068d8:	d90a      	bls.n	80068f0 <_malloc_r+0xa8>
 80068da:	19e2      	adds	r2, r4, r7
 80068dc:	6027      	str	r7, [r4, #0]
 80068de:	42a3      	cmp	r3, r4
 80068e0:	d104      	bne.n	80068ec <_malloc_r+0xa4>
 80068e2:	6032      	str	r2, [r6, #0]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	6011      	str	r1, [r2, #0]
 80068e8:	6053      	str	r3, [r2, #4]
 80068ea:	e005      	b.n	80068f8 <_malloc_r+0xb0>
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	e7f9      	b.n	80068e4 <_malloc_r+0x9c>
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	d10e      	bne.n	8006914 <_malloc_r+0xcc>
 80068f6:	6032      	str	r2, [r6, #0]
 80068f8:	0028      	movs	r0, r5
 80068fa:	f000 fa5d 	bl	8006db8 <__malloc_unlock>
 80068fe:	0020      	movs	r0, r4
 8006900:	2207      	movs	r2, #7
 8006902:	300b      	adds	r0, #11
 8006904:	1d23      	adds	r3, r4, #4
 8006906:	4390      	bics	r0, r2
 8006908:	1ac2      	subs	r2, r0, r3
 800690a:	4298      	cmp	r0, r3
 800690c:	d0df      	beq.n	80068ce <_malloc_r+0x86>
 800690e:	1a1b      	subs	r3, r3, r0
 8006910:	50a3      	str	r3, [r4, r2]
 8006912:	e7dc      	b.n	80068ce <_malloc_r+0x86>
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	e7ef      	b.n	80068f8 <_malloc_r+0xb0>
 8006918:	0023      	movs	r3, r4
 800691a:	6864      	ldr	r4, [r4, #4]
 800691c:	e7a6      	b.n	800686c <_malloc_r+0x24>
 800691e:	9c00      	ldr	r4, [sp, #0]
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	e7ad      	b.n	8006882 <_malloc_r+0x3a>
 8006926:	001a      	movs	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	42a3      	cmp	r3, r4
 800692c:	d1fb      	bne.n	8006926 <_malloc_r+0xde>
 800692e:	2300      	movs	r3, #0
 8006930:	e7da      	b.n	80068e8 <_malloc_r+0xa0>
 8006932:	230c      	movs	r3, #12
 8006934:	0028      	movs	r0, r5
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f000 fa3e 	bl	8006db8 <__malloc_unlock>
 800693c:	e7c6      	b.n	80068cc <_malloc_r+0x84>
 800693e:	6007      	str	r7, [r0, #0]
 8006940:	e7da      	b.n	80068f8 <_malloc_r+0xb0>
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	200004b8 	.word	0x200004b8

08006948 <_printf_common>:
 8006948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694a:	0016      	movs	r6, r2
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	688a      	ldr	r2, [r1, #8]
 8006950:	690b      	ldr	r3, [r1, #16]
 8006952:	000c      	movs	r4, r1
 8006954:	9000      	str	r0, [sp, #0]
 8006956:	4293      	cmp	r3, r2
 8006958:	da00      	bge.n	800695c <_printf_common+0x14>
 800695a:	0013      	movs	r3, r2
 800695c:	0022      	movs	r2, r4
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	3243      	adds	r2, #67	@ 0x43
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	2a00      	cmp	r2, #0
 8006966:	d001      	beq.n	800696c <_printf_common+0x24>
 8006968:	3301      	adds	r3, #1
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	069b      	lsls	r3, r3, #26
 8006970:	d502      	bpl.n	8006978 <_printf_common+0x30>
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	3302      	adds	r3, #2
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	6822      	ldr	r2, [r4, #0]
 800697a:	2306      	movs	r3, #6
 800697c:	0015      	movs	r5, r2
 800697e:	401d      	ands	r5, r3
 8006980:	421a      	tst	r2, r3
 8006982:	d027      	beq.n	80069d4 <_printf_common+0x8c>
 8006984:	0023      	movs	r3, r4
 8006986:	3343      	adds	r3, #67	@ 0x43
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	4193      	sbcs	r3, r2
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	0692      	lsls	r2, r2, #26
 8006992:	d430      	bmi.n	80069f6 <_printf_common+0xae>
 8006994:	0022      	movs	r2, r4
 8006996:	9901      	ldr	r1, [sp, #4]
 8006998:	9800      	ldr	r0, [sp, #0]
 800699a:	9d08      	ldr	r5, [sp, #32]
 800699c:	3243      	adds	r2, #67	@ 0x43
 800699e:	47a8      	blx	r5
 80069a0:	3001      	adds	r0, #1
 80069a2:	d025      	beq.n	80069f0 <_printf_common+0xa8>
 80069a4:	2206      	movs	r2, #6
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	2500      	movs	r5, #0
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d105      	bne.n	80069bc <_printf_common+0x74>
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	68e5      	ldr	r5, [r4, #12]
 80069b4:	1aed      	subs	r5, r5, r3
 80069b6:	43eb      	mvns	r3, r5
 80069b8:	17db      	asrs	r3, r3, #31
 80069ba:	401d      	ands	r5, r3
 80069bc:	68a3      	ldr	r3, [r4, #8]
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	dd01      	ble.n	80069c8 <_printf_common+0x80>
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	18ed      	adds	r5, r5, r3
 80069c8:	2600      	movs	r6, #0
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d120      	bne.n	8006a10 <_printf_common+0xc8>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e010      	b.n	80069f4 <_printf_common+0xac>
 80069d2:	3501      	adds	r5, #1
 80069d4:	68e3      	ldr	r3, [r4, #12]
 80069d6:	6832      	ldr	r2, [r6, #0]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	42ab      	cmp	r3, r5
 80069dc:	ddd2      	ble.n	8006984 <_printf_common+0x3c>
 80069de:	0022      	movs	r2, r4
 80069e0:	2301      	movs	r3, #1
 80069e2:	9901      	ldr	r1, [sp, #4]
 80069e4:	9800      	ldr	r0, [sp, #0]
 80069e6:	9f08      	ldr	r7, [sp, #32]
 80069e8:	3219      	adds	r2, #25
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	d1f0      	bne.n	80069d2 <_printf_common+0x8a>
 80069f0:	2001      	movs	r0, #1
 80069f2:	4240      	negs	r0, r0
 80069f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069f6:	2030      	movs	r0, #48	@ 0x30
 80069f8:	18e1      	adds	r1, r4, r3
 80069fa:	3143      	adds	r1, #67	@ 0x43
 80069fc:	7008      	strb	r0, [r1, #0]
 80069fe:	0021      	movs	r1, r4
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	3145      	adds	r1, #69	@ 0x45
 8006a04:	7809      	ldrb	r1, [r1, #0]
 8006a06:	18a2      	adds	r2, r4, r2
 8006a08:	3243      	adds	r2, #67	@ 0x43
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	7011      	strb	r1, [r2, #0]
 8006a0e:	e7c1      	b.n	8006994 <_printf_common+0x4c>
 8006a10:	0022      	movs	r2, r4
 8006a12:	2301      	movs	r3, #1
 8006a14:	9901      	ldr	r1, [sp, #4]
 8006a16:	9800      	ldr	r0, [sp, #0]
 8006a18:	9f08      	ldr	r7, [sp, #32]
 8006a1a:	321a      	adds	r2, #26
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa8>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d1      	b.n	80069ca <_printf_common+0x82>
	...

08006a28 <_printf_i>:
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	b08b      	sub	sp, #44	@ 0x2c
 8006a2c:	9206      	str	r2, [sp, #24]
 8006a2e:	000a      	movs	r2, r1
 8006a30:	3243      	adds	r2, #67	@ 0x43
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	9005      	str	r0, [sp, #20]
 8006a36:	9203      	str	r2, [sp, #12]
 8006a38:	7e0a      	ldrb	r2, [r1, #24]
 8006a3a:	000c      	movs	r4, r1
 8006a3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a3e:	2a78      	cmp	r2, #120	@ 0x78
 8006a40:	d809      	bhi.n	8006a56 <_printf_i+0x2e>
 8006a42:	2a62      	cmp	r2, #98	@ 0x62
 8006a44:	d80b      	bhi.n	8006a5e <_printf_i+0x36>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	d100      	bne.n	8006a4c <_printf_i+0x24>
 8006a4a:	e0bc      	b.n	8006bc6 <_printf_i+0x19e>
 8006a4c:	497b      	ldr	r1, [pc, #492]	@ (8006c3c <_printf_i+0x214>)
 8006a4e:	9104      	str	r1, [sp, #16]
 8006a50:	2a58      	cmp	r2, #88	@ 0x58
 8006a52:	d100      	bne.n	8006a56 <_printf_i+0x2e>
 8006a54:	e090      	b.n	8006b78 <_printf_i+0x150>
 8006a56:	0025      	movs	r5, r4
 8006a58:	3542      	adds	r5, #66	@ 0x42
 8006a5a:	702a      	strb	r2, [r5, #0]
 8006a5c:	e022      	b.n	8006aa4 <_printf_i+0x7c>
 8006a5e:	0010      	movs	r0, r2
 8006a60:	3863      	subs	r0, #99	@ 0x63
 8006a62:	2815      	cmp	r0, #21
 8006a64:	d8f7      	bhi.n	8006a56 <_printf_i+0x2e>
 8006a66:	f7f9 fb4d 	bl	8000104 <__gnu_thumb1_case_shi>
 8006a6a:	0016      	.short	0x0016
 8006a6c:	fff6001f 	.word	0xfff6001f
 8006a70:	fff6fff6 	.word	0xfff6fff6
 8006a74:	001ffff6 	.word	0x001ffff6
 8006a78:	fff6fff6 	.word	0xfff6fff6
 8006a7c:	fff6fff6 	.word	0xfff6fff6
 8006a80:	003600a1 	.word	0x003600a1
 8006a84:	fff60080 	.word	0xfff60080
 8006a88:	00b2fff6 	.word	0x00b2fff6
 8006a8c:	0036fff6 	.word	0x0036fff6
 8006a90:	fff6fff6 	.word	0xfff6fff6
 8006a94:	0084      	.short	0x0084
 8006a96:	0025      	movs	r5, r4
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	3542      	adds	r5, #66	@ 0x42
 8006a9c:	1d11      	adds	r1, r2, #4
 8006a9e:	6019      	str	r1, [r3, #0]
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	702b      	strb	r3, [r5, #0]
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0a0      	b.n	8006bea <_printf_i+0x1c2>
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	6809      	ldr	r1, [r1, #0]
 8006aac:	1d02      	adds	r2, r0, #4
 8006aae:	060d      	lsls	r5, r1, #24
 8006ab0:	d50b      	bpl.n	8006aca <_printf_i+0xa2>
 8006ab2:	6806      	ldr	r6, [r0, #0]
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	da03      	bge.n	8006ac2 <_printf_i+0x9a>
 8006aba:	232d      	movs	r3, #45	@ 0x2d
 8006abc:	9a03      	ldr	r2, [sp, #12]
 8006abe:	4276      	negs	r6, r6
 8006ac0:	7013      	strb	r3, [r2, #0]
 8006ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c3c <_printf_i+0x214>)
 8006ac4:	270a      	movs	r7, #10
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	e018      	b.n	8006afc <_printf_i+0xd4>
 8006aca:	6806      	ldr	r6, [r0, #0]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	0649      	lsls	r1, r1, #25
 8006ad0:	d5f1      	bpl.n	8006ab6 <_printf_i+0x8e>
 8006ad2:	b236      	sxth	r6, r6
 8006ad4:	e7ef      	b.n	8006ab6 <_printf_i+0x8e>
 8006ad6:	6808      	ldr	r0, [r1, #0]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	c940      	ldmia	r1!, {r6}
 8006adc:	0605      	lsls	r5, r0, #24
 8006ade:	d402      	bmi.n	8006ae6 <_printf_i+0xbe>
 8006ae0:	0640      	lsls	r0, r0, #25
 8006ae2:	d500      	bpl.n	8006ae6 <_printf_i+0xbe>
 8006ae4:	b2b6      	uxth	r6, r6
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	4b54      	ldr	r3, [pc, #336]	@ (8006c3c <_printf_i+0x214>)
 8006aea:	270a      	movs	r7, #10
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	2a6f      	cmp	r2, #111	@ 0x6f
 8006af0:	d100      	bne.n	8006af4 <_printf_i+0xcc>
 8006af2:	3f02      	subs	r7, #2
 8006af4:	0023      	movs	r3, r4
 8006af6:	2200      	movs	r2, #0
 8006af8:	3343      	adds	r3, #67	@ 0x43
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db03      	blt.n	8006b0c <_printf_i+0xe4>
 8006b04:	2104      	movs	r1, #4
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	438a      	bics	r2, r1
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	d102      	bne.n	8006b16 <_printf_i+0xee>
 8006b10:	9d03      	ldr	r5, [sp, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <_printf_i+0x108>
 8006b16:	9d03      	ldr	r5, [sp, #12]
 8006b18:	0030      	movs	r0, r6
 8006b1a:	0039      	movs	r1, r7
 8006b1c:	f7f9 fb82 	bl	8000224 <__aeabi_uidivmod>
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	3d01      	subs	r5, #1
 8006b24:	5c5b      	ldrb	r3, [r3, r1]
 8006b26:	702b      	strb	r3, [r5, #0]
 8006b28:	0033      	movs	r3, r6
 8006b2a:	0006      	movs	r6, r0
 8006b2c:	429f      	cmp	r7, r3
 8006b2e:	d9f3      	bls.n	8006b18 <_printf_i+0xf0>
 8006b30:	2f08      	cmp	r7, #8
 8006b32:	d109      	bne.n	8006b48 <_printf_i+0x120>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d506      	bpl.n	8006b48 <_printf_i+0x120>
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	dc02      	bgt.n	8006b48 <_printf_i+0x120>
 8006b42:	2330      	movs	r3, #48	@ 0x30
 8006b44:	3d01      	subs	r5, #1
 8006b46:	702b      	strb	r3, [r5, #0]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1b5b      	subs	r3, r3, r5
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	9b07      	ldr	r3, [sp, #28]
 8006b50:	0021      	movs	r1, r4
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	9805      	ldr	r0, [sp, #20]
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	aa09      	add	r2, sp, #36	@ 0x24
 8006b5a:	f7ff fef5 	bl	8006948 <_printf_common>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d148      	bne.n	8006bf4 <_printf_i+0x1cc>
 8006b62:	2001      	movs	r0, #1
 8006b64:	4240      	negs	r0, r0
 8006b66:	b00b      	add	sp, #44	@ 0x2c
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	2278      	movs	r2, #120	@ 0x78
 8006b74:	4932      	ldr	r1, [pc, #200]	@ (8006c40 <_printf_i+0x218>)
 8006b76:	9104      	str	r1, [sp, #16]
 8006b78:	0021      	movs	r1, r4
 8006b7a:	3145      	adds	r1, #69	@ 0x45
 8006b7c:	700a      	strb	r2, [r1, #0]
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	c940      	ldmia	r1!, {r6}
 8006b84:	0610      	lsls	r0, r2, #24
 8006b86:	d402      	bmi.n	8006b8e <_printf_i+0x166>
 8006b88:	0650      	lsls	r0, r2, #25
 8006b8a:	d500      	bpl.n	8006b8e <_printf_i+0x166>
 8006b8c:	b2b6      	uxth	r6, r6
 8006b8e:	6019      	str	r1, [r3, #0]
 8006b90:	07d3      	lsls	r3, r2, #31
 8006b92:	d502      	bpl.n	8006b9a <_printf_i+0x172>
 8006b94:	2320      	movs	r3, #32
 8006b96:	4313      	orrs	r3, r2
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d001      	beq.n	8006ba2 <_printf_i+0x17a>
 8006b9e:	2710      	movs	r7, #16
 8006ba0:	e7a8      	b.n	8006af4 <_printf_i+0xcc>
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	4393      	bics	r3, r2
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	e7f8      	b.n	8006b9e <_printf_i+0x176>
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	680d      	ldr	r5, [r1, #0]
 8006bb0:	1d10      	adds	r0, r2, #4
 8006bb2:	6949      	ldr	r1, [r1, #20]
 8006bb4:	6018      	str	r0, [r3, #0]
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	062e      	lsls	r6, r5, #24
 8006bba:	d501      	bpl.n	8006bc0 <_printf_i+0x198>
 8006bbc:	6019      	str	r1, [r3, #0]
 8006bbe:	e002      	b.n	8006bc6 <_printf_i+0x19e>
 8006bc0:	066d      	lsls	r5, r5, #25
 8006bc2:	d5fb      	bpl.n	8006bbc <_printf_i+0x194>
 8006bc4:	8019      	strh	r1, [r3, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9d03      	ldr	r5, [sp, #12]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	e7bf      	b.n	8006b4e <_printf_i+0x126>
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	1d11      	adds	r1, r2, #4
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	6815      	ldr	r5, [r2, #0]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	0028      	movs	r0, r5
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	f000 fa40 	bl	8007060 <memchr>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d001      	beq.n	8006be8 <_printf_i+0x1c0>
 8006be4:	1b40      	subs	r0, r0, r5
 8006be6:	6060      	str	r0, [r4, #4]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	2300      	movs	r3, #0
 8006bee:	9a03      	ldr	r2, [sp, #12]
 8006bf0:	7013      	strb	r3, [r2, #0]
 8006bf2:	e7ac      	b.n	8006b4e <_printf_i+0x126>
 8006bf4:	002a      	movs	r2, r5
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	9906      	ldr	r1, [sp, #24]
 8006bfa:	9805      	ldr	r0, [sp, #20]
 8006bfc:	9d07      	ldr	r5, [sp, #28]
 8006bfe:	47a8      	blx	r5
 8006c00:	3001      	adds	r0, #1
 8006c02:	d0ae      	beq.n	8006b62 <_printf_i+0x13a>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	079b      	lsls	r3, r3, #30
 8006c08:	d415      	bmi.n	8006c36 <_printf_i+0x20e>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	68e0      	ldr	r0, [r4, #12]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	daa9      	bge.n	8006b66 <_printf_i+0x13e>
 8006c12:	0018      	movs	r0, r3
 8006c14:	e7a7      	b.n	8006b66 <_printf_i+0x13e>
 8006c16:	0022      	movs	r2, r4
 8006c18:	2301      	movs	r3, #1
 8006c1a:	9906      	ldr	r1, [sp, #24]
 8006c1c:	9805      	ldr	r0, [sp, #20]
 8006c1e:	9e07      	ldr	r6, [sp, #28]
 8006c20:	3219      	adds	r2, #25
 8006c22:	47b0      	blx	r6
 8006c24:	3001      	adds	r0, #1
 8006c26:	d09c      	beq.n	8006b62 <_printf_i+0x13a>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	dcf0      	bgt.n	8006c16 <_printf_i+0x1ee>
 8006c34:	e7e9      	b.n	8006c0a <_printf_i+0x1e2>
 8006c36:	2500      	movs	r5, #0
 8006c38:	e7f7      	b.n	8006c2a <_printf_i+0x202>
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	080071f5 	.word	0x080071f5
 8006c40:	08007206 	.word	0x08007206

08006c44 <__sflush_r>:
 8006c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c46:	220c      	movs	r2, #12
 8006c48:	5e8b      	ldrsh	r3, [r1, r2]
 8006c4a:	0005      	movs	r5, r0
 8006c4c:	000c      	movs	r4, r1
 8006c4e:	071a      	lsls	r2, r3, #28
 8006c50:	d456      	bmi.n	8006d00 <__sflush_r+0xbc>
 8006c52:	684a      	ldr	r2, [r1, #4]
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	dc02      	bgt.n	8006c5e <__sflush_r+0x1a>
 8006c58:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	dd4e      	ble.n	8006cfc <__sflush_r+0xb8>
 8006c5e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006c60:	2f00      	cmp	r7, #0
 8006c62:	d04b      	beq.n	8006cfc <__sflush_r+0xb8>
 8006c64:	2200      	movs	r2, #0
 8006c66:	2080      	movs	r0, #128	@ 0x80
 8006c68:	682e      	ldr	r6, [r5, #0]
 8006c6a:	602a      	str	r2, [r5, #0]
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	0140      	lsls	r0, r0, #5
 8006c70:	6a21      	ldr	r1, [r4, #32]
 8006c72:	4002      	ands	r2, r0
 8006c74:	4203      	tst	r3, r0
 8006c76:	d033      	beq.n	8006ce0 <__sflush_r+0x9c>
 8006c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	075b      	lsls	r3, r3, #29
 8006c7e:	d506      	bpl.n	8006c8e <__sflush_r+0x4a>
 8006c80:	6863      	ldr	r3, [r4, #4]
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <__sflush_r+0x4a>
 8006c8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	2300      	movs	r3, #0
 8006c90:	0028      	movs	r0, r5
 8006c92:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006c94:	6a21      	ldr	r1, [r4, #32]
 8006c96:	47b8      	blx	r7
 8006c98:	89a2      	ldrh	r2, [r4, #12]
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d106      	bne.n	8006cac <__sflush_r+0x68>
 8006c9e:	6829      	ldr	r1, [r5, #0]
 8006ca0:	291d      	cmp	r1, #29
 8006ca2:	d846      	bhi.n	8006d32 <__sflush_r+0xee>
 8006ca4:	4b29      	ldr	r3, [pc, #164]	@ (8006d4c <__sflush_r+0x108>)
 8006ca6:	410b      	asrs	r3, r1
 8006ca8:	07db      	lsls	r3, r3, #31
 8006caa:	d442      	bmi.n	8006d32 <__sflush_r+0xee>
 8006cac:	2300      	movs	r3, #0
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	04d2      	lsls	r2, r2, #19
 8006cb6:	d505      	bpl.n	8006cc4 <__sflush_r+0x80>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <__sflush_r+0x7e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d100      	bne.n	8006cc4 <__sflush_r+0x80>
 8006cc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cc6:	602e      	str	r6, [r5, #0]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d017      	beq.n	8006cfc <__sflush_r+0xb8>
 8006ccc:	0023      	movs	r3, r4
 8006cce:	3344      	adds	r3, #68	@ 0x44
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d002      	beq.n	8006cda <__sflush_r+0x96>
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	f7ff fbfd 	bl	80064d4 <_free_r>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cde:	e00d      	b.n	8006cfc <__sflush_r+0xb8>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	0028      	movs	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d1c6      	bne.n	8006c7a <__sflush_r+0x36>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0c3      	beq.n	8006c7a <__sflush_r+0x36>
 8006cf2:	2b1d      	cmp	r3, #29
 8006cf4:	d001      	beq.n	8006cfa <__sflush_r+0xb6>
 8006cf6:	2b16      	cmp	r3, #22
 8006cf8:	d11a      	bne.n	8006d30 <__sflush_r+0xec>
 8006cfa:	602e      	str	r6, [r5, #0]
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e01e      	b.n	8006d3e <__sflush_r+0xfa>
 8006d00:	690e      	ldr	r6, [r1, #16]
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	d0fa      	beq.n	8006cfc <__sflush_r+0xb8>
 8006d06:	680f      	ldr	r7, [r1, #0]
 8006d08:	600e      	str	r6, [r1, #0]
 8006d0a:	1bba      	subs	r2, r7, r6
 8006d0c:	9201      	str	r2, [sp, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	079b      	lsls	r3, r3, #30
 8006d12:	d100      	bne.n	8006d16 <__sflush_r+0xd2>
 8006d14:	694a      	ldr	r2, [r1, #20]
 8006d16:	60a2      	str	r2, [r4, #8]
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	ddee      	ble.n	8006cfc <__sflush_r+0xb8>
 8006d1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d20:	0032      	movs	r2, r6
 8006d22:	001f      	movs	r7, r3
 8006d24:	0028      	movs	r0, r5
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	6a21      	ldr	r1, [r4, #32]
 8006d2a:	47b8      	blx	r7
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dc07      	bgt.n	8006d40 <__sflush_r+0xfc>
 8006d30:	89a2      	ldrh	r2, [r4, #12]
 8006d32:	2340      	movs	r3, #64	@ 0x40
 8006d34:	2001      	movs	r0, #1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b21b      	sxth	r3, r3
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	4240      	negs	r0, r0
 8006d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	1836      	adds	r6, r6, r0
 8006d44:	1a1b      	subs	r3, r3, r0
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	e7e6      	b.n	8006d18 <__sflush_r+0xd4>
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	dfbffffe 	.word	0xdfbffffe

08006d50 <_fflush_r>:
 8006d50:	690b      	ldr	r3, [r1, #16]
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	0005      	movs	r5, r0
 8006d56:	000c      	movs	r4, r1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <_fflush_r+0x12>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	0028      	movs	r0, r5
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d004      	beq.n	8006d70 <_fflush_r+0x20>
 8006d66:	6a03      	ldr	r3, [r0, #32]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <_fflush_r+0x20>
 8006d6c:	f7ff fa48 	bl	8006200 <__sinit>
 8006d70:	220c      	movs	r2, #12
 8006d72:	5ea3      	ldrsh	r3, [r4, r2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0f1      	beq.n	8006d5c <_fflush_r+0xc>
 8006d78:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d7a:	07d2      	lsls	r2, r2, #31
 8006d7c:	d404      	bmi.n	8006d88 <_fflush_r+0x38>
 8006d7e:	059b      	lsls	r3, r3, #22
 8006d80:	d402      	bmi.n	8006d88 <_fflush_r+0x38>
 8006d82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d84:	f7ff fba3 	bl	80064ce <__retarget_lock_acquire_recursive>
 8006d88:	0028      	movs	r0, r5
 8006d8a:	0021      	movs	r1, r4
 8006d8c:	f7ff ff5a 	bl	8006c44 <__sflush_r>
 8006d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d92:	0005      	movs	r5, r0
 8006d94:	07db      	lsls	r3, r3, #31
 8006d96:	d4e2      	bmi.n	8006d5e <_fflush_r+0xe>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	059b      	lsls	r3, r3, #22
 8006d9c:	d4df      	bmi.n	8006d5e <_fflush_r+0xe>
 8006d9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006da0:	f7ff fb96 	bl	80064d0 <__retarget_lock_release_recursive>
 8006da4:	e7db      	b.n	8006d5e <_fflush_r+0xe>
	...

08006da8 <__malloc_lock>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4802      	ldr	r0, [pc, #8]	@ (8006db4 <__malloc_lock+0xc>)
 8006dac:	f7ff fb8f 	bl	80064ce <__retarget_lock_acquire_recursive>
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	200004b0 	.word	0x200004b0

08006db8 <__malloc_unlock>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	4802      	ldr	r0, [pc, #8]	@ (8006dc4 <__malloc_unlock+0xc>)
 8006dbc:	f7ff fb88 	bl	80064d0 <__retarget_lock_release_recursive>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	200004b0 	.word	0x200004b0

08006dc8 <__sread>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	000c      	movs	r4, r1
 8006dcc:	250e      	movs	r5, #14
 8006dce:	5f49      	ldrsh	r1, [r1, r5]
 8006dd0:	f000 f90c 	bl	8006fec <_read_r>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	db03      	blt.n	8006de0 <__sread+0x18>
 8006dd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006dda:	181b      	adds	r3, r3, r0
 8006ddc:	6563      	str	r3, [r4, #84]	@ 0x54
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	4a02      	ldr	r2, [pc, #8]	@ (8006dec <__sread+0x24>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	e7f9      	b.n	8006dde <__sread+0x16>
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	ffffefff 	.word	0xffffefff

08006df0 <__swrite>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	001f      	movs	r7, r3
 8006df4:	898b      	ldrh	r3, [r1, #12]
 8006df6:	0005      	movs	r5, r0
 8006df8:	000c      	movs	r4, r1
 8006dfa:	0016      	movs	r6, r2
 8006dfc:	05db      	lsls	r3, r3, #23
 8006dfe:	d505      	bpl.n	8006e0c <__swrite+0x1c>
 8006e00:	230e      	movs	r3, #14
 8006e02:	5ec9      	ldrsh	r1, [r1, r3]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2302      	movs	r3, #2
 8006e08:	f000 f8dc 	bl	8006fc4 <_lseek_r>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	4a05      	ldr	r2, [pc, #20]	@ (8006e24 <__swrite+0x34>)
 8006e10:	0028      	movs	r0, r5
 8006e12:	4013      	ands	r3, r2
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	0032      	movs	r2, r6
 8006e18:	230e      	movs	r3, #14
 8006e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8006e1c:	003b      	movs	r3, r7
 8006e1e:	f000 f90b 	bl	8007038 <_write_r>
 8006e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e24:	ffffefff 	.word	0xffffefff

08006e28 <__sseek>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	000c      	movs	r4, r1
 8006e2c:	250e      	movs	r5, #14
 8006e2e:	5f49      	ldrsh	r1, [r1, r5]
 8006e30:	f000 f8c8 	bl	8006fc4 <_lseek_r>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	1c42      	adds	r2, r0, #1
 8006e38:	d103      	bne.n	8006e42 <__sseek+0x1a>
 8006e3a:	4a05      	ldr	r2, [pc, #20]	@ (8006e50 <__sseek+0x28>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	2280      	movs	r2, #128	@ 0x80
 8006e44:	0152      	lsls	r2, r2, #5
 8006e46:	4313      	orrs	r3, r2
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e4c:	e7f8      	b.n	8006e40 <__sseek+0x18>
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	ffffefff 	.word	0xffffefff

08006e54 <__sclose>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	230e      	movs	r3, #14
 8006e58:	5ec9      	ldrsh	r1, [r1, r3]
 8006e5a:	f000 f8a1 	bl	8006fa0 <_close_r>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <__swbuf_r>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	0006      	movs	r6, r0
 8006e64:	000d      	movs	r5, r1
 8006e66:	0014      	movs	r4, r2
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d004      	beq.n	8006e76 <__swbuf_r+0x16>
 8006e6c:	6a03      	ldr	r3, [r0, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <__swbuf_r+0x16>
 8006e72:	f7ff f9c5 	bl	8006200 <__sinit>
 8006e76:	69a3      	ldr	r3, [r4, #24]
 8006e78:	60a3      	str	r3, [r4, #8]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	071b      	lsls	r3, r3, #28
 8006e7e:	d502      	bpl.n	8006e86 <__swbuf_r+0x26>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <__swbuf_r+0x3a>
 8006e86:	0021      	movs	r1, r4
 8006e88:	0030      	movs	r0, r6
 8006e8a:	f000 f82b 	bl	8006ee4 <__swsetup_r>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d003      	beq.n	8006e9a <__swbuf_r+0x3a>
 8006e92:	2501      	movs	r5, #1
 8006e94:	426d      	negs	r5, r5
 8006e96:	0028      	movs	r0, r5
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	b2ef      	uxtb	r7, r5
 8006ea0:	1ac0      	subs	r0, r0, r3
 8006ea2:	6963      	ldr	r3, [r4, #20]
 8006ea4:	b2ed      	uxtb	r5, r5
 8006ea6:	4283      	cmp	r3, r0
 8006ea8:	dc05      	bgt.n	8006eb6 <__swbuf_r+0x56>
 8006eaa:	0021      	movs	r1, r4
 8006eac:	0030      	movs	r0, r6
 8006eae:	f7ff ff4f 	bl	8006d50 <_fflush_r>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d1ed      	bne.n	8006e92 <__swbuf_r+0x32>
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	3001      	adds	r0, #1
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	6022      	str	r2, [r4, #0]
 8006ec4:	701f      	strb	r7, [r3, #0]
 8006ec6:	6963      	ldr	r3, [r4, #20]
 8006ec8:	4283      	cmp	r3, r0
 8006eca:	d004      	beq.n	8006ed6 <__swbuf_r+0x76>
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	07db      	lsls	r3, r3, #31
 8006ed0:	d5e1      	bpl.n	8006e96 <__swbuf_r+0x36>
 8006ed2:	2d0a      	cmp	r5, #10
 8006ed4:	d1df      	bne.n	8006e96 <__swbuf_r+0x36>
 8006ed6:	0021      	movs	r1, r4
 8006ed8:	0030      	movs	r0, r6
 8006eda:	f7ff ff39 	bl	8006d50 <_fflush_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0d9      	beq.n	8006e96 <__swbuf_r+0x36>
 8006ee2:	e7d6      	b.n	8006e92 <__swbuf_r+0x32>

08006ee4 <__swsetup_r>:
 8006ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f9c <__swsetup_r+0xb8>)
 8006ee6:	b570      	push	{r4, r5, r6, lr}
 8006ee8:	0005      	movs	r5, r0
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	000c      	movs	r4, r1
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d004      	beq.n	8006efc <__swsetup_r+0x18>
 8006ef2:	6a03      	ldr	r3, [r0, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <__swsetup_r+0x18>
 8006ef8:	f7ff f982 	bl	8006200 <__sinit>
 8006efc:	230c      	movs	r3, #12
 8006efe:	5ee2      	ldrsh	r2, [r4, r3]
 8006f00:	0713      	lsls	r3, r2, #28
 8006f02:	d423      	bmi.n	8006f4c <__swsetup_r+0x68>
 8006f04:	06d3      	lsls	r3, r2, #27
 8006f06:	d407      	bmi.n	8006f18 <__swsetup_r+0x34>
 8006f08:	2309      	movs	r3, #9
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	2340      	movs	r3, #64	@ 0x40
 8006f0e:	2001      	movs	r0, #1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	4240      	negs	r0, r0
 8006f16:	e03a      	b.n	8006f8e <__swsetup_r+0xaa>
 8006f18:	0752      	lsls	r2, r2, #29
 8006f1a:	d513      	bpl.n	8006f44 <__swsetup_r+0x60>
 8006f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d008      	beq.n	8006f34 <__swsetup_r+0x50>
 8006f22:	0023      	movs	r3, r4
 8006f24:	3344      	adds	r3, #68	@ 0x44
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d002      	beq.n	8006f30 <__swsetup_r+0x4c>
 8006f2a:	0028      	movs	r0, r5
 8006f2c:	f7ff fad2 	bl	80064d4 <_free_r>
 8006f30:	2300      	movs	r3, #0
 8006f32:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f34:	2224      	movs	r2, #36	@ 0x24
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	4393      	bics	r3, r2
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	2308      	movs	r3, #8
 8006f46:	89a2      	ldrh	r2, [r4, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10b      	bne.n	8006f6a <__swsetup_r+0x86>
 8006f52:	21a0      	movs	r1, #160	@ 0xa0
 8006f54:	2280      	movs	r2, #128	@ 0x80
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	0089      	lsls	r1, r1, #2
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	400b      	ands	r3, r1
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <__swsetup_r+0x86>
 8006f62:	0021      	movs	r1, r4
 8006f64:	0028      	movs	r0, r5
 8006f66:	f7ff f9a9 	bl	80062bc <__smakebuf_r>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	5ee2      	ldrsh	r2, [r4, r3]
 8006f6e:	2101      	movs	r1, #1
 8006f70:	0013      	movs	r3, r2
 8006f72:	400b      	ands	r3, r1
 8006f74:	420a      	tst	r2, r1
 8006f76:	d00b      	beq.n	8006f90 <__swsetup_r+0xac>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	6963      	ldr	r3, [r4, #20]
 8006f7e:	425b      	negs	r3, r3
 8006f80:	61a3      	str	r3, [r4, #24]
 8006f82:	2000      	movs	r0, #0
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	4283      	cmp	r3, r0
 8006f88:	d101      	bne.n	8006f8e <__swsetup_r+0xaa>
 8006f8a:	0613      	lsls	r3, r2, #24
 8006f8c:	d4be      	bmi.n	8006f0c <__swsetup_r+0x28>
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	0791      	lsls	r1, r2, #30
 8006f92:	d400      	bmi.n	8006f96 <__swsetup_r+0xb2>
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	60a3      	str	r3, [r4, #8]
 8006f98:	e7f3      	b.n	8006f82 <__swsetup_r+0x9e>
 8006f9a:	46c0      	nop			@ (mov r8, r8)
 8006f9c:	20000018 	.word	0x20000018

08006fa0 <_close_r>:
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4d06      	ldr	r5, [pc, #24]	@ (8006fc0 <_close_r+0x20>)
 8006fa6:	0004      	movs	r4, r0
 8006fa8:	0008      	movs	r0, r1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	f7fa fa91 	bl	80014d2 <_close>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d103      	bne.n	8006fbc <_close_r+0x1c>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d000      	beq.n	8006fbc <_close_r+0x1c>
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	200004bc 	.word	0x200004bc

08006fc4 <_lseek_r>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	0004      	movs	r4, r0
 8006fc8:	0008      	movs	r0, r1
 8006fca:	0011      	movs	r1, r2
 8006fcc:	001a      	movs	r2, r3
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4d05      	ldr	r5, [pc, #20]	@ (8006fe8 <_lseek_r+0x24>)
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fa fa9e 	bl	8001514 <_lseek>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d103      	bne.n	8006fe4 <_lseek_r+0x20>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d000      	beq.n	8006fe4 <_lseek_r+0x20>
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	200004bc 	.word	0x200004bc

08006fec <_read_r>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	0004      	movs	r4, r0
 8006ff0:	0008      	movs	r0, r1
 8006ff2:	0011      	movs	r1, r2
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4d05      	ldr	r5, [pc, #20]	@ (8007010 <_read_r+0x24>)
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	f7fa fa4c 	bl	8001498 <_read>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d103      	bne.n	800700c <_read_r+0x20>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d000      	beq.n	800700c <_read_r+0x20>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	200004bc 	.word	0x200004bc

08007014 <_sbrk_r>:
 8007014:	2300      	movs	r3, #0
 8007016:	b570      	push	{r4, r5, r6, lr}
 8007018:	4d06      	ldr	r5, [pc, #24]	@ (8007034 <_sbrk_r+0x20>)
 800701a:	0004      	movs	r4, r0
 800701c:	0008      	movs	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fa fa84 	bl	800152c <_sbrk>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d103      	bne.n	8007030 <_sbrk_r+0x1c>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d000      	beq.n	8007030 <_sbrk_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	200004bc 	.word	0x200004bc

08007038 <_write_r>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	0004      	movs	r4, r0
 800703c:	0008      	movs	r0, r1
 800703e:	0011      	movs	r1, r2
 8007040:	001a      	movs	r2, r3
 8007042:	2300      	movs	r3, #0
 8007044:	4d05      	ldr	r5, [pc, #20]	@ (800705c <_write_r+0x24>)
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7f9 fdde 	bl	8000c08 <_write>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d103      	bne.n	8007058 <_write_r+0x20>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d000      	beq.n	8007058 <_write_r+0x20>
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	bd70      	pop	{r4, r5, r6, pc}
 800705a:	46c0      	nop			@ (mov r8, r8)
 800705c:	200004bc 	.word	0x200004bc

08007060 <memchr>:
 8007060:	b2c9      	uxtb	r1, r1
 8007062:	1882      	adds	r2, r0, r2
 8007064:	4290      	cmp	r0, r2
 8007066:	d101      	bne.n	800706c <memchr+0xc>
 8007068:	2000      	movs	r0, #0
 800706a:	4770      	bx	lr
 800706c:	7803      	ldrb	r3, [r0, #0]
 800706e:	428b      	cmp	r3, r1
 8007070:	d0fb      	beq.n	800706a <memchr+0xa>
 8007072:	3001      	adds	r0, #1
 8007074:	e7f6      	b.n	8007064 <memchr+0x4>
	...

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr
